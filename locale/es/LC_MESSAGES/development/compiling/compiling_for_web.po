# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot
# community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-28 16:44-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../development/compiling/compiling_for_web.rst:4
msgid "Compiling for the Web"
msgstr ""

#: ../../development/compiling/compiling_for_web.rst:9
msgid "Requirements"
msgstr ""

#: ../../development/compiling/compiling_for_web.rst:11
msgid "To compile export templates for the Web, the following is required:"
msgstr ""

#: ../../development/compiling/compiling_for_web.rst:13
msgid ""
"`Emscripten 1.37.9+ <http://emscripten.org/>`__: If the version available"
" per package manager is not recent enough, the best alternative is to "
"install using the `Emscripten SDK <http://kripken.github.io/emscripten-"
"site/docs/gettng_started/downloads.html>`__ (Install in a path without "
"spaces, i.e. not in ``Program Files``)"
msgstr ""

#: ../../development/compiling/compiling_for_web.rst:17
msgid "`Python 2.7+ or Python 3.5+ <https://www.python.org/>`__"
msgstr ""

#: ../../development/compiling/compiling_for_web.rst:18
msgid "`SCons <http://www.scons.org>`__ build system"
msgstr ""

#: ../../development/compiling/compiling_for_web.rst:21
msgid "Building export templates"
msgstr ""

#: ../../development/compiling/compiling_for_web.rst:23
msgid ""
"Start a terminal and set the environment variable ``EMSCRIPTEN_ROOT`` to "
"the installation directory of Emscripten:"
msgstr ""

#: ../../development/compiling/compiling_for_web.rst:26
msgid ""
"If you installed Emscripten via the Emscripten SDK, declare the variable "
"with a path to the downloaded folder::"
msgstr ""

#: ../../development/compiling/compiling_for_web.rst:31
msgid ""
"If you installed Emscripten via package manager, the path can be "
"retrieved with the ``em-config`` command::"
msgstr ""

#: ../../development/compiling/compiling_for_web.rst:36
msgid ""
"On Windows you can set the environment variable in the system settings or"
" in the command prompt::"
msgstr ""

#: ../../development/compiling/compiling_for_web.rst:41
msgid ""
"Now go to the root directory of the engine source code and instruct SCons"
" to build the JavaScript platform. Specify ``target`` as either "
"``release`` for a release build or ``release_debug`` for a debug build::"
msgstr ""

#: ../../development/compiling/compiling_for_web.rst:48
msgid ""
"The engine will now be compiled to WebAssembly by Emscripten. If all goes"
" well, the resulting file will be placed in the ``bin`` subdirectory. Its"
" name is ``godot.javascript.opt.zip`` for release or "
"``godot.javascript.opt.debug.zip`` for debug."
msgstr ""

#: ../../development/compiling/compiling_for_web.rst:53
msgid ""
"Finally, rename the zip archive to ``webassembly_release.zip`` for the "
"release template::"
msgstr ""

#: ../../development/compiling/compiling_for_web.rst:58
msgid "And ``webassembly_debug.zip`` for the debug template::"
msgstr ""

#: ../../development/compiling/compiling_for_web.rst:63
msgid "Building per asm.js translation or LLVM backend"
msgstr ""

#: ../../development/compiling/compiling_for_web.rst:65
msgid ""
"WebAssembly can be compiled in two ways: The default is to first compile "
"to asm.js, a highly optimizable subset of JavaScript, using Emscripten's "
"*fastcomp* fork of LLVM. This code is then translated to WebAssembly "
"using a tool called ``asm2wasm``. Emscripten automatically takes care of "
"both processes, we simply run SCons."
msgstr ""

#: ../../development/compiling/compiling_for_web.rst:71
msgid ""
"The other method uses LLVM's WebAssembly backend. This backend is not yet"
" available in release versions of LLVM, only in development builds built "
"with ``LLVM_EXPERIMENTAL_TARGETS_TO_BUILD=WebAssembly``. Compiling with "
"this backend outputs files in LLVM's ``.s`` format, which is translated "
"into actual WebAssembly using a tool called ``s2wasm``. Emscripten "
"manages these processes as well, so we just invoke SCons."
msgstr ""

#: ../../development/compiling/compiling_for_web.rst:78
msgid ""
"In order to choose one of the two methods, the ``LLVM_ROOT`` variable in "
"the Emscripten configuration file ``~/.emscripten`` is set. If it points "
"to a directory containing binaries of Emscripten's *fastcomp* fork of "
"clang, ``asm2wasm`` is used. This is the default in a normal Emscripten "
"installation. Otherwise, LLVM binaries built with the WebAssembly backend"
" will be expected and ``s2wasm`` is used. On Windows, make sure to escape"
" backslashes of paths within this file as double backslashes ``\\\\`` or "
"use Unix-style paths with a single forward slash ``/``."
msgstr ""

