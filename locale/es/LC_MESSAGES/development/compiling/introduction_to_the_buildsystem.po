# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot
# community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-28 16:44-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../development/compiling/introduction_to_the_buildsystem.rst:4
msgid "Introduction to the buildsystem"
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:9
msgid "SCons"
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:11
msgid ""
"Godot uses `SCons <http://www.scons.org>`__ to build. We love it, we are "
"not changing it for anything else. We are not even sure other build "
"systems are up to the task of building Godot. We constantly get requests "
"to move the build system to CMake, or Visual Studio, but this is not "
"going to happen. There are many reasons why we have chosen SCons over "
"other alternatives, for example:"
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:18
msgid ""
"Godot can be compiled for a dozen different platforms. All PC platforms, "
"all mobile platforms, many consoles, and many web-based platforms (such "
"as HTML5 and Chrome PNACL)."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:21
msgid ""
"Developers often need to compile for several of the platforms **at the "
"same time**, or even different targets of the same platform. They can't "
"afford reconfiguring and rebuilding the project each time. SCons can do "
"this with no sweat, without breaking the builds."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:25
msgid ""
"SCons will *never* break a build no matter how many changes, "
"configurations, additions, removals etc. You have more chances to die "
"struck by lightning than needing to clean and rebuild in SCons."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:28
msgid ""
"Godot build process is not simple. Several files are generated by code "
"(binders), others are parsed (shaders), and others need to offer "
"customization (plugins). This requires complex logic which is easier to "
"write in an actual programming language (like Python) rather than using a"
" mostly macro-based language only meant for building."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:33
msgid ""
"Godot build process makes heavy use of cross compiling tools. Each "
"platform has a specific detection process, and all these must be handled "
"as specific cases with special code written for each."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:37
msgid ""
"So, please try to keep an open mind and get at least a little familiar "
"with it if you are planning to build Godot yourself."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:41
msgid "Setup"
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:42
msgid ""
"Please refer to the documentation for :ref:`doc_compiling_for_android`, "
":ref:`doc_compiling_for_ios`, :ref:`doc_compiling_for_osx`, "
":ref:`doc_compiling_for_uwp`, :ref:`doc_compiling_for_web`, "
":ref:`doc_compiling_for_windows` and :ref:`doc_compiling_for_x11`."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:44
msgid ""
"Note that for **Windows/Visual Studio**, you need to use ``x86_x64 Cross "
"Tools Command Prompt for VS 2017`` or similar, depending on your install,"
" instead of the standard Windows command prompt to enter the commands "
"below."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:47
msgid "Platform selection"
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:49
msgid ""
"Godot's build system will begin by detecting the platforms it can build "
"for. If not detected, the platform will simply not appear on the list of "
"available platforms. The build requirements for each platform are "
"described in the rest of this tutorial section."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:54
msgid "SCons is invoked by just calling ``scons``."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:56
msgid ""
"However, this will do nothing except list the available platforms, for "
"example:"
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:77
msgid ""
"To build for a platform (for example, x11), run with the ``platform=`` "
"(or just ``p=`` to make it short) argument:"
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:84
msgid ""
"This will start the build process, which will take a while. If you want "
"scons to build faster, use the ``-j <cores>`` parameter to specify how "
"many cores will be used for the build. Or just leave it using one core, "
"so you can use your computer for something else :)"
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:89
msgid "Example for using 4 cores:"
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:95
msgid ""
"Note that there are currently `issues "
"<https://github.com/godotengine/godot/issues/5182>`__ with parallel "
"builds for at least some users, so if you are running into errors, try "
"building without the ``-j`` parameter."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:98
msgid "Resulting binary"
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:100
msgid ""
"The resulting binaries will be placed in the bin/ subdirectory, generally"
" with this naming convention:"
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:107
msgid "For the previous build attempt the result would look like this:"
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:114
msgid ""
"This means that the binary is for X11, is not optimized, has tools (the "
"whole editor) compiled in, and is meant for 64 bits."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:117
msgid "A Windows binary with the same configuration will look like this."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:124
msgid ""
"Just copy that binary to wherever you like, as it contains the project "
"manager, editor and all means to execute the game. However, it lacks the "
"data to export it to the different platforms. For that the export "
"templates are needed (which can be either downloaded from "
"`godotengine.org <https://godotengine.org/>`__, or you can build them "
"yourself)."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:130
msgid ""
"Aside from that, there are a few standard options that can be set in all "
"build targets, and which will be explained below."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:134
msgid "Tools"
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:136
msgid ""
"Tools are enabled by default in all PC targets (Linux, Windows, macOS), "
"disabled for everything else. Disabling tools produces a binary that can "
"run projects but that does not include the editor or the project manager."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:146
msgid "Target"
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:148
msgid "Target controls optimization and debug flags. Each mode means:"
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:150
msgid ""
"**debug**: Build with C++ debugging symbols, runtime checks (performs "
"checks and reports error) and none to little optimization."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:152
msgid ""
"**release_debug**: Build without C++ debugging symbols and optimization, "
"but keep the runtime checks (performs checks and reports errors). "
"Official binaries use this configuration."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:155
msgid ""
"**release**: Build without symbols, with optimization and with little to "
"no runtime checks. This target can't be used together with tools=yes, as "
"the tools require some debug functionality and run-time checks to run."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:164
msgid ""
"This flag appends the \".debug\" suffix (for debug), or \".tools\" (for "
"debug with tools enabled). When optimization is enabled (release) it "
"appends the \".opt\" suffix."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:169
msgid "Bits"
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:171
msgid ""
"Bits is meant to control the CPU or OS version intended to run the "
"binaries. It is focused mostly on desktop platforms and ignored "
"everywhere else."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:175
msgid "**32**: Build binaries for 32 bits platform."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:176
msgid "**64**: Build binaries for 64 bits platform."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:177
msgid ""
"**default**: Build whatever the build system feels is best. On Linux this"
" depends on the host platform (if not cross compiling), on Mac it "
"defaults to 64 bits and on Windows it defaults to 32 bits."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:185
msgid ""
"This flag appends \".32\" or \".64\" suffixes to resulting binaries when "
"relevant."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:189
msgid "Export templates"
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:191
msgid ""
"Official export templates are downloaded from the Godot Engine site: "
"`godotengine.org <https://godotengine.org/>`__. However, you might want "
"to build them yourself (in case you want newer ones, you are using custom"
" modules, or simply don't trust your own shadow)."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:196
msgid ""
"If you download the official export templates package and unzip it, you "
"will notice that most are just optimized binaries or packages for each "
"platform:"
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:219
msgid ""
"To create those yourself, just follow the instructions detailed for each "
"platform in this same tutorial section. Each platform explains how to "
"create its own template."
msgstr ""

#: ../../development/compiling/introduction_to_the_buildsystem.rst:223
msgid ""
"If you are developing for multiple platforms, macOS is definitely the "
"most convenient host platform for cross compilation, since you can cross-"
"compile for almost every target (except for UWP). Linux and Windows come "
"in second place, but Linux has the advantage of being the easier platform"
" to set this up."
msgstr ""

