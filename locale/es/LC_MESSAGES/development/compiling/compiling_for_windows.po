# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot
# community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-28 16:44-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../development/compiling/compiling_for_windows.rst:4
msgid "Compiling for Windows"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:9
msgid "Requirements"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:11
msgid "For compiling under Windows, the following is required:"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:13
msgid ""
"Visual C++, `Visual Studio Community <https://www.visualstudio.com/en-"
"us/products/visual-studio-community-vs.aspx>`__ (recommended), version "
"2013 (12.0) or later. **Make sure you read Installing Visual Studio "
"caveats below or you will have to run/download the installer again.**"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:18
msgid "`Python 2.7+ or Python 3.5+ <https://www.python.org/downloads/>`__."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:19
msgid ""
"`Pywin32 Python Extension <https://github.com/mhammond/pywin32>`__ for "
"parallel builds (which increase the build speed by a great factor)."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:21
msgid "`SCons <http://www.scons.org>`__ build system."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:24
msgid "Setting up SCons"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:26
msgid ""
"Python adds the interpreter (python.exe) to the path. It usually installs"
" in ``C:\\Python`` (or ``C:\\Python[Version]``). SCons installs inside "
"the Python install (typically in the ``Scripts`` folder) and provides a "
"batch file called ``scons.bat``. The location of this file can be added "
"to the path or it can simply be copied to ``C:\\Python`` together with "
"the interpreter executable."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:33
msgid ""
"To check whether you have installed Python and SCons correctly, you can "
"type ``python --version`` and ``scons --version`` into the Windows "
"Command Prompt (``cmd.exe``)."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:37
msgid ""
"If commands above do not work, make sure you add Python to your PATH "
"environment variable after installing it, and check again."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:41
msgid "Setting up Pywin32"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:43
msgid ""
"Pywin32 is required for parallel builds using multiple CPU cores. If "
"SCons is issuing a warning about Pywin32 after parsing SConstruct build "
"instructions, when beginning to build, you need to install it properly "
"from the correct installer executable for your Python version `located at"
" Sourceforge. "
"<https://sourceforge.net/projects/pywin32/files/pywin32/>`__"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:49
msgid ""
"For example, if you installed a 32-bit version of Python 2.7, you would "
"want to install the latest version of Pywin32 that is built for the "
"mentioned version of Python. That executable installer would be named "
"``pywin32-221.win32-py2.7.exe``."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:53
msgid ""
"The ``amd64`` version of Pywin32 is for a 64-bit version of Python "
"``pywin32-221.win-amd64-py2.7.exe``. Change the ``py`` number to install "
"for your version of Python (check via ``python --version`` mentioned "
"above)."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:58
msgid "Installing Visual Studio caveats"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:60
msgid ""
"If installing Visual Studio 2015 or later, make sure to run **Custom** "
"installation, not **Typical** and select C++ as language there (and any "
"other things you might need). The installer does not install C++ by "
"default. C++ was the `only language made optional "
"<https://blogs.msdn.microsoft.com/vcblog/2015/07/24/setup-changes-in-"
"visual-studio-2015-affecting-c-developers/>`__ in Visual Studio 2015."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:66
msgid ""
"If you have already made the mistake of installing a **Typical**, "
"installation, rerun the executable installer you downloaded from "
"internet, it will give you a **Modify** Button option. Running the "
"install from Add/Remove programs will only give you the \"Repair\" "
"option, which will do nothing for your problem."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:72
msgid ""
"If you're using Express, make sure you get/have a version that can "
"compile for ***C++, Desktop***."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:76
msgid "Downloading Godot's source"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:78
msgid ""
"`Godot's <https://github.com/godotengine/godot>`__ source is hosted on "
"GitHub. Downloading it (cloning) via `Git <https://git-scm.com/>`__ is "
"recommended."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:81
msgid ""
"The tutorial will presume from now on that you placed the source into "
"``C:\\godot``."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:85
msgid "Compiling"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:87
msgid ""
"SCons will not be able out of the box to compile from the Windows Command"
" Prompt (``cmd.exe``) because SCons and Visual C++ compiler will not be "
"able to locate environment variables and executables they need for "
"compilation."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:92
msgid ""
"Therefore, you need to start a Visual Studio command prompt. It sets up "
"environment variables needed by SCons to locate the compiler. It should "
"be called similar to one of the below names (for your respective version "
"of Visual Studio):"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:97
msgid "\"Developer Command Prompt for VS2013\""
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:98
msgid "\"VS2013 x64 Native Tools Command Prompt\""
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:99
msgid "\"VS2013 x86 Native Tools Command Prompt\""
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:100
msgid "\"VS2013 x64 Cross Tools Command Prompt\""
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:101
msgid "\"VS2013 x86 Cross Tools Command Prompt\""
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:103
msgid ""
"You should be able to find at least the Developer Command Prompt for your"
" version of Visual Studio in your start menu."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:106
msgid ""
"However Visual Studio sometimes seems to not install some of the above "
"shortcuts, except the Developer Console at these locations that are "
"automatically searched by the start menu search option:"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:116
msgid ""
"If you found the Developer Console, it will do for now to create a 32-bit"
" version of Godot, but if you want the 64-bit version, you might need to "
"setup the prompts manually for easy access."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:120
msgid ""
"If you don't see some of the shortcuts, \"How the prompts actually work\""
" section below will explain how to setup these prompts if you need them."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:124
msgid "About the Developer/Tools Command Prompts and the Visual C++ compiler"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:126
msgid ""
"There is a few things you need to know about these consoles and the "
"Visual C++ compiler."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:129
msgid ""
"Your Visual Studio installation will ship with several Visual C++ "
"compilers, them being more or less identical, however each ``cl.exe`` "
"(Visual C++ compiler) will compile Godot for a different architecture "
"(32-bit x86 or 64-bit x86; the ARM compiler is not supported)."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:134
msgid ""
"The **Developer Command Prompt** will build a 32-bit version of Godot by "
"using the 32-bit Visual C++ compiler."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:137
msgid ""
"**Native Tools** Prompts (mentioned above) are used when you want the "
"32-bit cl.exe to compile a 32-bit executable (x86 Native Tools Command "
"Prompt). For the 64-bit cl.exe, it will compile a 64-bit executable (x64 "
"Native Tools Command Prompt)."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:142
msgid ""
"The **Cross Tools** are used when your Windows is using one architecture "
"(32-bit, for example) and you need to compile to a different architecture"
" (64-bit). As you might be familiar, 32-bit Windows can not run 64-bit "
"executables, but you still might need to compile for them."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:147
msgid "For example:"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:149
msgid ""
"\"VS2013 x64 Cross Tools Command Prompt\" will use a 32-bit cl.exe that "
"will compile a 64 bit application."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:152
msgid ""
"\"VS2013 x86 Cross Tools Command Prompt\" will use a 64-bit cl.exe that "
"will compile a 32-bit application. This one is useful if you are running "
"a 32-bit Windows."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:156
msgid ""
"On a 64-bit Windows, you can run any of above prompts and compilers "
"(``cl.exe`` executables) because 64-bit Windows can run any 32-bit "
"application. 32-bit Windows cannot run 64-bit executables, so the Visual "
"Studio installer won't even install shortcuts for some of these prompts."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:162
msgid ""
"Note that you need to choose the **Developer Console** or the correct "
"**Tools Prompt** to build Godot for the correct architecture. Use only "
"Native Prompts if you are not sure yet what exactly Cross Compile Prompts"
" do."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:168
msgid "Running SCons"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:170
msgid ""
"Once inside the **Developer Console/Tools Console Prompt**, go to the "
"root directory of the engine source code and type:"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:177
msgid ""
"Tip: if you installed \"Pywin32 Python Extension\" you can append the -j "
"command to instruct SCons to run parallel builds like this:"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:184
msgid ""
"In general, it is OK to have at least as many threads compiling Godot as "
"you have cores in your CPU, if not one or two more. Feel free to add the "
"-j option to any SCons command you see below if you setup the \"Pywin32 "
"Python Extension\"."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:189
msgid ""
"If all goes well, the resulting binary executable will be placed in "
"``C:\\godot\\bin\\`` with the name of ``godot.windows.tools.32.exe`` or "
"``godot.windows.tools.64.exe``. SCons will automatically detect what "
"compiler architecture the environment (the prompt) is setup for and will "
"build a corresponding executable."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:195
msgid ""
"This executable file contains the whole engine and runs without any "
"dependencies. Executing it will bring up the Project Manager."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:199
msgid "How the prompts actually work"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:201
msgid ""
"The Visual Studio command prompts are just shortcuts that call the "
"standard Command Prompt and have it run a batch file before giving  you "
"control. The batch file itself is called **vcvarsall.bat** and it sets up"
" environment variables, including the PATH variable, so that the correct "
"version of the compiler can be run. The Developer Command Prompt calls a "
"different file called **VsDevCmd.bat** but none of the other tools that "
"this batch file enables are needed by Godot/SCons."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:209
msgid ""
"Since you are probably using Visual Studio 2013 or 2015, if you need to "
"recreate them manually, use the below folders, or place them on the "
"desktop/taskbar:"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:218
msgid ""
"Start the creation of the shortcut by pressing the ``right mouse "
"button/New/Shortcut`` in an empty place in your desired location."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:221
msgid ""
"Then copy one of these commands below for the corresponding tool you need"
" into the \"Path\" and \"Name\" sections of the shortcut creation wizard,"
" and fix the path to the batch file if needed."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:225
msgid "Visual Studio 2013 is in the \"Microsoft Visual Studio 12.0\" folder."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:226
msgid "Visual Studio 2015 is in the \"Microsoft Visual Studio 14.0\" folder."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:227
msgid "etc."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:246
msgid ""
"After you create the shortcut, in the shortcut's properties, that you can"
" access by right clicking with your mouse on the shortcut itself, you can"
" choose the starting directory of the command prompt (\"Start in\" "
"field)."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:251
msgid ""
"Some of these shortcuts (namely the 64-bit compilers) seem to not be "
"available in the Express edition of Visual Studio or Visual C++. Before "
"recreating the commands, make sure that ``cl.exe`` executables are "
"present in one of these locations, they are the actual compilers for the "
"arhitecture you want to build from the command prompt."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:272
msgid ""
"In case you are wondering what these prompt shortcuts do, they call "
"``cmd.exe`` with the ``\\k`` option and have it run a Batch file."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:284
msgid "How to run an automated build of Godot"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:286
msgid ""
"If you just need to run the compilation process via a Batch file or "
"directly in the Windows Command Prompt you need to use the following "
"command:"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:294
msgid "with one of the following parameters:"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:296
msgid "x86 (32-bit cl.exe to compile for the 32-bit architecture)"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:297
msgid "amd64 (64-bit cl.exe to compile for the 64-bit architecture)"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:298
msgid "x86_amd64 (32-bit cl.exe to compile for the 64-bit architecture)"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:299
msgid "amd64_x86 (64-bit cl.exe to compile for the 32-bit architecture)"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:301
msgid "and after that one, you can run SCons:"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:307
msgid "or you can run them together:"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:318
msgid "Development in Visual Studio or other IDEs"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:320
msgid ""
"For most projects, using only scripting is enough but when development in"
" C++ is needed, for creating modules or extending the engine, working "
"with an IDE is usually desirable."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:324
msgid ""
"You can create a Visual Studio solution via SCons by running SCons with "
"the ``vsproj=yes`` parameter, like this:"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:331
msgid ""
"You will be able to open Godot's source in a Visual Studio solution now, "
"and able to build Godot via the Visual Studio **Build** button. However, "
"make sure that you have installed Pywin32 so that parallel (-j) builds "
"work properly."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:336
msgid ""
"If you need to edit the compilation commands, they are located in "
"\"Godot\" project settings, NMAKE sheet. SCons is called at the very end "
"of the commands. If you make a mistake, copy the command from one of the "
"other build configurations (debug, release_debug, release) or "
"architectures (Win32/x64). They are equivalent."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:343
msgid "Cross-compiling for Windows from other operating systems"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:345
msgid ""
"If you are a Linux or macOS user, you need to install `MinGW-w64 "
"<https://mingw-w64.org>`_, which typically comes in 32-bit and 64-bit "
"variants. The package names may differ based on your distro, here are "
"some known ones:"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:350
msgid "**Arch**"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:354
msgid "**Debian** / **Ubuntu**"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:358
msgid "**Fedora**"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:362
msgid "**macOS**"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:366
msgid "**Mageia**"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:371
msgid ""
"Before allowing you to attempt the compilation, SCons will check for the "
"following binaries in your ``$PATH``:"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:379
msgid ""
"If the binaries are not located in the ``$PATH`` (e.g. ``/usr/bin``), you"
" can define the following environment variables to give a hint to the "
"build system:"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:388
msgid ""
"To make sure you are doing things correctly, executing the following in "
"the shell should result in a working compiler (the version output may "
"differ based on your system):"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:398
msgid "Troubleshooting"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:400
msgid ""
"Cross-compiling from some versions of Ubuntu may lead to `this bug "
"<https://github.com/godotengine/godot/issues/9258>`_, due to a default "
"configuration lacking support for POSIX threading."
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:403
msgid ""
"You can change that configuration following those instructions, for "
"32-bit:"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:413
msgid "And for 64-bit:"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:423
msgid "Creating Windows export templates"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:425
msgid ""
"Windows export templates are created by compiling Godot as release, with "
"the following flags:"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:428
msgid "(using Mingw32 command prompt, using the bits parameter)"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:435
msgid "(using Mingw-w64 command prompt, using the bits parameter)"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:442
msgid ""
"(using the Visual Studio command prompts for the correct architecture, "
"notice the lack of bits parameter)"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:450
msgid "If you plan on replacing the standard templates, copy these to:"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:456
msgid "With the following names:"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:465
msgid ""
"However, if you are writing your custom modules or custom C++ code, you "
"might instead want to configure your binaries as custom export templates "
"here:"
msgstr ""

#: ../../development/compiling/compiling_for_windows.rst:471
msgid ""
"You don't even need to copy them, you can just reference the resulting "
"files in the ``bin\\`` directory of your Godot source folder, so the next"
" time you build you automatically have the custom templates referenced."
msgstr ""

