# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot
# community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-28 16:44-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../development/cpp/core_types.rst:4
msgid "Core types"
msgstr ""

#: ../../development/cpp/core_types.rst:6
msgid ""
"Godot has a rich set of classes and templates that compose its core, and "
"everything is built upon them."
msgstr ""

#: ../../development/cpp/core_types.rst:9
msgid ""
"This reference will try to list them in order for their better "
"understanding."
msgstr ""

#: ../../development/cpp/core_types.rst:13
msgid "Definitions"
msgstr ""

#: ../../development/cpp/core_types.rst:15
msgid ""
"Godot uses the standard C98 datatypes, such as ``uint8_t``, ``uint32_t``,"
" ``int64_t``, etc. which are nowadays supported by every compiler. "
"Reinventing the wheel for those is not fun, as it makes code more "
"difficult to read."
msgstr ""

#: ../../development/cpp/core_types.rst:20
msgid ""
"In general, care is not taken to use the most efficient datatype for a "
"given task unless using large structures or arrays. ``int`` is used "
"through most of the code unless necessary. This is done because nowadays "
"every device has at least a 32 bits bus and can do such operations in one"
" cycle. It makes code more readable too."
msgstr ""

#: ../../development/cpp/core_types.rst:26
msgid ""
"For files or memory sizes, ``size_t`` is used, which is warranted to be "
"64 bits."
msgstr ""

#: ../../development/cpp/core_types.rst:29
msgid ""
"For Unicode characters, CharType instead of wchar_t is used, because many"
" architectures have 4 bytes long wchar_t, where 2 bytes might be desired."
" However, by default, this has not been forced and CharType maps directly"
" to wchar_t."
msgstr ""

#: ../../development/cpp/core_types.rst:35
#: ../../development/cpp/core_types.rst:133
#: ../../development/cpp/core_types.rst:167
#: ../../development/cpp/core_types.rst:183
#: ../../development/cpp/core_types.rst:199
#: ../../development/cpp/core_types.rst:210
#: ../../development/cpp/core_types.rst:221
#: ../../development/cpp/core_types.rst:234
msgid "References:"
msgstr ""

#: ../../development/cpp/core_types.rst:37
msgid ""
"`core/typedefs.h "
"<https://github.com/godotengine/godot/blob/master/core/typedefs.h>`__"
msgstr ""

#: ../../development/cpp/core_types.rst:40
msgid "Memory model"
msgstr ""

#: ../../development/cpp/core_types.rst:42
msgid ""
"PC is a wonderful architecture. Computers often have gigabytes of RAM, "
"terabytes of storage and gigahertz of CPU, and when an application needs "
"more resources the OS will just swap out the inactive ones. Other "
"architectures (like mobile or consoles) are in general more limited."
msgstr ""

#: ../../development/cpp/core_types.rst:47
msgid ""
"The most common memory model is the heap, where an application will "
"request a region of memory, and the underlying OS will try to fit it "
"somewhere and return it. This often works best and is very flexible, but "
"over time and with abuse, this can lead to segmentation."
msgstr ""

#: ../../development/cpp/core_types.rst:52
msgid ""
"Segmentation slowly creates holes that are too small for most common "
"allocations, so that memory is wasted. There is a lot of literature about"
" heap and segmentation, so this topic will not be developed further here."
" Modern operating systems use paged memory, which helps mitigate the "
"problem of segmentation but doesn't solve it."
msgstr ""

#: ../../development/cpp/core_types.rst:58
#, python-format
msgid ""
"However, in many studies and tests, it is shown that given enough memory,"
" if the maximum allocation size is below a given threshold in proportion "
"to the maximum heap size and proportion of memory intended to be unused, "
"segmentation will not be a problem over time as it will remain constant. "
"In other words, just leave 10-20% of your memory free and perform all "
"small allocations and you are fine."
msgstr ""

#: ../../development/cpp/core_types.rst:65
msgid ""
"Godot ensures that all objects that can be allocated dynamically are "
"small (less than a few kb at most). But what happens if an allocation is "
"too large (like an image or mesh geometry or large array)? In this case "
"Godot has the option to use a dynamic memory pool. This memory needs to "
"be locked to be accessed, and if an allocation runs out of memory, the "
"pool will be rearranged and compacted on demand. Depending on the need of"
" the game, the programmer can configure the dynamic memory pool size."
msgstr ""

#: ../../development/cpp/core_types.rst:74
msgid "Allocating memory"
msgstr ""

#: ../../development/cpp/core_types.rst:76
msgid ""
"Godot has many tools for tracking memory usage in a game, especially "
"during debug. Because of this, the regular C and C++ library calls should"
" not be used. Instead, a few other ones are provided."
msgstr ""

#: ../../development/cpp/core_types.rst:80
msgid "For C-style allocation, Godot provides a few macros:"
msgstr ""

#: ../../development/cpp/core_types.rst:88
msgid ""
"These are equivalent to the usual malloc, realloc, free of the standard "
"library."
msgstr ""

#: ../../development/cpp/core_types.rst:91
msgid "For C++-style allocation, special macros are provided:"
msgstr ""

#: ../../development/cpp/core_types.rst:101
msgid "which are equivalent to new, delete, new[] and delete[]."
msgstr ""

#: ../../development/cpp/core_types.rst:103
msgid ""
"memnew/memdelete also use a little C++ magic and notify Objects right "
"after they are created, and right before they are deleted."
msgstr ""

#: ../../development/cpp/core_types.rst:106
msgid "For dynamic memory, the DVector<> template is provided. Just use it like:"
msgstr ""

#: ../../development/cpp/core_types.rst:113
msgid ""
"DVector is just a standard vector class, it can be accessed using the [] "
"operator, but that's probably slow for large amount of accesses (as it "
"has to lock internally). A few helpers exist for this:"
msgstr ""

#: ../../development/cpp/core_types.rst:122
msgid "and"
msgstr ""

#: ../../development/cpp/core_types.rst:129
msgid ""
"respectively. These allow fast read/write from DVectors and keep it "
"locked until they go out of scope."
msgstr ""

#: ../../development/cpp/core_types.rst:135
msgid ""
"`core/os/memory.h "
"<https://github.com/godotengine/godot/blob/master/core/os/memory.h>`__"
msgstr ""

#: ../../development/cpp/core_types.rst:136
msgid ""
"`core/dvector.h "
"<https://github.com/godotengine/godot/blob/master/core/dvector.h>`__"
msgstr ""

#: ../../development/cpp/core_types.rst:139
msgid "Containers"
msgstr ""

#: ../../development/cpp/core_types.rst:141
msgid "Godot provides also a set of common containers:"
msgstr ""

#: ../../development/cpp/core_types.rst:143
msgid "Vector"
msgstr ""

#: ../../development/cpp/core_types.rst:144
msgid "List"
msgstr ""

#: ../../development/cpp/core_types.rst:145
msgid "Set"
msgstr ""

#: ../../development/cpp/core_types.rst:146
msgid "Map"
msgstr ""

#: ../../development/cpp/core_types.rst:148
msgid ""
"They are very simple and aim to be as minimal as possible, as templates "
"in C++ are often inlined and make the binary size much fatter, both in "
"debug symbols and code. List, Set and Map can be iterated using pointers,"
" like this:"
msgstr ""

#: ../../development/cpp/core_types.rst:159
msgid "The Vector<> class also has a few nice features:"
msgstr ""

#: ../../development/cpp/core_types.rst:161
msgid ""
"It does copy on write, so making copies of it is cheap as long as they "
"are not modified."
msgstr ""

#: ../../development/cpp/core_types.rst:163
msgid ""
"It supports multi-threading, by using atomic operations on the reference "
"counter."
msgstr ""

#: ../../development/cpp/core_types.rst:169
msgid ""
"`core/vector.h "
"<https://github.com/godotengine/godot/blob/master/core/vector.h>`__"
msgstr ""

#: ../../development/cpp/core_types.rst:170
msgid ""
"`core/list.h "
"<https://github.com/godotengine/godot/blob/master/core/list.h>`__"
msgstr ""

#: ../../development/cpp/core_types.rst:171
msgid ""
"`core/set.h "
"<https://github.com/godotengine/godot/blob/master/core/set.h>`__"
msgstr ""

#: ../../development/cpp/core_types.rst:172
msgid ""
"`core/map.h "
"<https://github.com/godotengine/godot/blob/master/core/map.h>`__"
msgstr ""

#: ../../development/cpp/core_types.rst:175
msgid "String"
msgstr ""

#: ../../development/cpp/core_types.rst:177
msgid ""
"Godot also provides a String class. This class has a huge amount of "
"features, full Unicode support in all the functions (like case "
"operations) and utf8 parsing/extracting, as well as helpers for "
"conversion and visualization."
msgstr ""

#: ../../development/cpp/core_types.rst:185
msgid ""
"`core/ustring.h "
"<https://github.com/godotengine/godot/blob/master/core/ustring.h>`__"
msgstr ""

#: ../../development/cpp/core_types.rst:188
msgid "StringName"
msgstr ""

#: ../../development/cpp/core_types.rst:190
msgid ""
"StringNames are like a String, but they are unique. Creating a StringName"
" from a string results in a unique internal pointer for all equal "
"strings. StringNames are really useful for using strings as identifier, "
"as comparing them is basically comparing a pointer."
msgstr ""

#: ../../development/cpp/core_types.rst:195
msgid ""
"Creation of a StringName (especially a new one) is slow, but comparison "
"is fast."
msgstr ""

#: ../../development/cpp/core_types.rst:201
msgid ""
"`core/string_db.h "
"<https://github.com/godotengine/godot/blob/master/core/string_db.h>`__"
msgstr ""

#: ../../development/cpp/core_types.rst:204
msgid "Math types"
msgstr ""

#: ../../development/cpp/core_types.rst:206
msgid ""
"There are several linear math types available in the core/math directory,"
" they are basically just that."
msgstr ""

#: ../../development/cpp/core_types.rst:212
msgid "`core/math <https://github.com/godotengine/godot/blob/master/core/math>`__"
msgstr ""

#: ../../development/cpp/core_types.rst:215
msgid "NodePath"
msgstr ""

#: ../../development/cpp/core_types.rst:217
msgid ""
"This is a special datatype used for storing paths in a scene tree and "
"referencing them fast."
msgstr ""

#: ../../development/cpp/core_types.rst:223
msgid ""
"`core/path_db.h "
"<https://github.com/godotengine/godot/blob/master/core/path_db.h>`__"
msgstr ""

#: ../../development/cpp/core_types.rst:226
msgid "RID"
msgstr ""

#: ../../development/cpp/core_types.rst:228
msgid ""
"RIDs are resource IDs. Servers use these to reference data stored in "
"them. RIDs are opaque, meaning that the data they reference can't be "
"accessed directly. RIDs are unique, even for different types of "
"referenced data."
msgstr ""

#: ../../development/cpp/core_types.rst:236
msgid ""
"`core/rid.h "
"<https://github.com/godotengine/godot/blob/master/core/rid.h>`__"
msgstr ""

