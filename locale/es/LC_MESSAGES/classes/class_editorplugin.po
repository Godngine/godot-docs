# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot
# community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-28 16:44-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../classes/class_editorplugin.rst:8
msgid "EditorPlugin"
msgstr ""

#: ../../classes/class_editorplugin.rst:10
msgid "**Inherits:** :ref:`Node<class_node>` **<** :ref:`Object<class_object>`"
msgstr ""

#: ../../classes/class_editorplugin.rst:12
msgid "**Category:** Core"
msgstr ""

#: ../../classes/class_editorplugin.rst:15
msgid "Brief Description"
msgstr ""

#: ../../classes/class_editorplugin.rst:17
msgid "Used by the editor to extend its functionality."
msgstr ""

#: ../../classes/class_editorplugin.rst:20
msgid "Member Functions"
msgstr ""

#: ../../classes/class_editorplugin.rst:23
msgid ":ref:`ToolButton<class_toolbutton>`"
msgstr ""

#: ../../classes/class_editorplugin.rst:23
msgid ""
":ref:`add_control_to_bottom_panel<class_EditorPlugin_add_control_to_bottom_panel>`"
" **(** :ref:`Control<class_control>` control, :ref:`String<class_string>`"
" title **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:25
#: ../../classes/class_editorplugin.rst:27
#: ../../classes/class_editorplugin.rst:29
#: ../../classes/class_editorplugin.rst:31
#: ../../classes/class_editorplugin.rst:33
#: ../../classes/class_editorplugin.rst:35
#: ../../classes/class_editorplugin.rst:37
#: ../../classes/class_editorplugin.rst:39
#: ../../classes/class_editorplugin.rst:41
#: ../../classes/class_editorplugin.rst:45
#: ../../classes/class_editorplugin.rst:49
#: ../../classes/class_editorplugin.rst:51
#: ../../classes/class_editorplugin.rst:67
#: ../../classes/class_editorplugin.rst:73
#: ../../classes/class_editorplugin.rst:75
#: ../../classes/class_editorplugin.rst:77
#: ../../classes/class_editorplugin.rst:79
#: ../../classes/class_editorplugin.rst:81
#: ../../classes/class_editorplugin.rst:83
#: ../../classes/class_editorplugin.rst:85
#: ../../classes/class_editorplugin.rst:87
#: ../../classes/class_editorplugin.rst:89
#: ../../classes/class_editorplugin.rst:91
#: ../../classes/class_editorplugin.rst:93
#: ../../classes/class_editorplugin.rst:95
#: ../../classes/class_editorplugin.rst:97
#: ../../classes/class_editorplugin.rst:99
#: ../../classes/class_editorplugin.rst:101
#: ../../classes/class_editorplugin.rst:103
msgid "void"
msgstr ""

#: ../../classes/class_editorplugin.rst:25
msgid ""
":ref:`add_control_to_container<class_EditorPlugin_add_control_to_container>`"
" **(** :ref:`int<class_int>` container, :ref:`Control<class_control>` "
"control **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:27
msgid ""
":ref:`add_control_to_dock<class_EditorPlugin_add_control_to_dock>` **(** "
":ref:`int<class_int>` slot, :ref:`Control<class_control>` control **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:29
msgid ""
":ref:`add_custom_type<class_EditorPlugin_add_custom_type>` **(** "
":ref:`String<class_string>` type, :ref:`String<class_string>` base, "
":ref:`Script<class_script>` script, :ref:`Texture<class_texture>` icon "
"**)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:31
msgid ""
":ref:`add_export_plugin<class_EditorPlugin_add_export_plugin>` **(** "
":ref:`EditorExportPlugin<class_editorexportplugin>` exporter **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:33
msgid ""
":ref:`add_import_plugin<class_EditorPlugin_add_import_plugin>` **(** "
":ref:`EditorImportPlugin<class_editorimportplugin>` importer **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:35
msgid ""
":ref:`add_scene_import_plugin<class_EditorPlugin_add_scene_import_plugin>`"
" **(** :ref:`EditorSceneImporter<class_editorsceneimporter>` "
"scene_importer **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:37
msgid ""
":ref:`add_tool_submenu_item<class_EditorPlugin_add_tool_submenu_item>` "
"**(** :ref:`String<class_string>` name, :ref:`Object<class_object>` "
"submenu **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:39
msgid ":ref:`apply_changes<class_EditorPlugin_apply_changes>` **(** **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:41
msgid ":ref:`clear<class_EditorPlugin_clear>` **(** **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:43
msgid ":ref:`EditorSpatialGizmo<class_editorspatialgizmo>`"
msgstr ""

#: ../../classes/class_editorplugin.rst:43
msgid ""
":ref:`create_spatial_gizmo<class_EditorPlugin_create_spatial_gizmo>` "
"**(** :ref:`Spatial<class_spatial>` for_spatial **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:45
msgid ""
":ref:`edit<class_EditorPlugin_edit>` **(** :ref:`Object<class_object>` "
"object **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:47
#: ../../classes/class_editorplugin.rst:53
#: ../../classes/class_editorplugin.rst:69
#: ../../classes/class_editorplugin.rst:71
msgid ":ref:`bool<class_bool>`"
msgstr ""

#: ../../classes/class_editorplugin.rst:47
msgid ""
":ref:`forward_canvas_gui_input<class_EditorPlugin_forward_canvas_gui_input>`"
" **(** :ref:`InputEvent<class_inputevent>` event **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:49
msgid ""
":ref:`forward_draw_over_viewport<class_EditorPlugin_forward_draw_over_viewport>`"
" **(** :ref:`Control<class_control>` overlay **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:51
msgid ""
":ref:`forward_force_draw_over_viewport<class_EditorPlugin_forward_force_draw_over_viewport>`"
" **(** :ref:`Control<class_control>` overlay **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:53
msgid ""
":ref:`forward_spatial_gui_input<class_EditorPlugin_forward_spatial_gui_input>`"
" **(** :ref:`Camera<class_camera>` camera, "
":ref:`InputEvent<class_inputevent>` event **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:55
msgid ":ref:`PoolStringArray<class_poolstringarray>`"
msgstr ""

#: ../../classes/class_editorplugin.rst:55
msgid ""
":ref:`get_breakpoints<class_EditorPlugin_get_breakpoints>` **(** **)** "
"virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:57
msgid ":ref:`EditorInterface<class_editorinterface>`"
msgstr ""

#: ../../classes/class_editorplugin.rst:57
msgid ""
":ref:`get_editor_interface<class_EditorPlugin_get_editor_interface>` "
"**(** **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:59
msgid ":ref:`Object<class_object>`"
msgstr ""

#: ../../classes/class_editorplugin.rst:59
msgid ""
":ref:`get_plugin_icon<class_EditorPlugin_get_plugin_icon>` **(** **)** "
"virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:61
msgid ":ref:`String<class_string>`"
msgstr ""

#: ../../classes/class_editorplugin.rst:61
msgid ""
":ref:`get_plugin_name<class_EditorPlugin_get_plugin_name>` **(** **)** "
"virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:63
msgid ":ref:`Dictionary<class_dictionary>`"
msgstr ""

#: ../../classes/class_editorplugin.rst:63
msgid ":ref:`get_state<class_EditorPlugin_get_state>` **(** **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:65
msgid ":ref:`UndoRedo<class_undoredo>`"
msgstr ""

#: ../../classes/class_editorplugin.rst:65
msgid ":ref:`get_undo_redo<class_EditorPlugin_get_undo_redo>` **(** **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:67
msgid ""
":ref:`get_window_layout<class_EditorPlugin_get_window_layout>` **(** "
":ref:`ConfigFile<class_configfile>` layout **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:69
msgid ""
":ref:`handles<class_EditorPlugin_handles>` **(** "
":ref:`Object<class_object>` object **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:71
msgid ""
":ref:`has_main_screen<class_EditorPlugin_has_main_screen>` **(** **)** "
"virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:73
msgid ":ref:`hide_bottom_panel<class_EditorPlugin_hide_bottom_panel>` **(** **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:75
msgid ""
":ref:`make_bottom_panel_item_visible<class_EditorPlugin_make_bottom_panel_item_visible>`"
" **(** :ref:`Control<class_control>` item **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:77
msgid ""
":ref:`make_visible<class_EditorPlugin_make_visible>` **(** "
":ref:`bool<class_bool>` visible **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:79
msgid ""
":ref:`queue_save_layout<class_EditorPlugin_queue_save_layout>` **(** "
"**)** const"
msgstr ""

#: ../../classes/class_editorplugin.rst:81
msgid ""
":ref:`remove_control_from_bottom_panel<class_EditorPlugin_remove_control_from_bottom_panel>`"
" **(** :ref:`Control<class_control>` control **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:83
msgid ""
":ref:`remove_control_from_container<class_EditorPlugin_remove_control_from_container>`"
" **(** :ref:`int<class_int>` container, :ref:`Control<class_control>` "
"control **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:85
msgid ""
":ref:`remove_control_from_docks<class_EditorPlugin_remove_control_from_docks>`"
" **(** :ref:`Control<class_control>` control **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:87
msgid ""
":ref:`remove_custom_type<class_EditorPlugin_remove_custom_type>` **(** "
":ref:`String<class_string>` type **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:89
msgid ""
":ref:`remove_export_plugin<class_EditorPlugin_remove_export_plugin>` "
"**(** :ref:`EditorExportPlugin<class_editorexportplugin>` exporter **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:91
msgid ""
":ref:`remove_import_plugin<class_EditorPlugin_remove_import_plugin>` "
"**(** :ref:`EditorImportPlugin<class_editorimportplugin>` importer **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:93
msgid ""
":ref:`remove_scene_import_plugin<class_EditorPlugin_remove_scene_import_plugin>`"
" **(** :ref:`EditorSceneImporter<class_editorsceneimporter>` "
"scene_importer **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:95
msgid ""
":ref:`save_external_data<class_EditorPlugin_save_external_data>` **(** "
"**)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:97
msgid ""
":ref:`set_force_draw_over_forwarding_enabled<class_EditorPlugin_set_force_draw_over_forwarding_enabled>`"
" **(** **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:99
msgid ""
":ref:`set_input_event_forwarding_always_enabled<class_EditorPlugin_set_input_event_forwarding_always_enabled>`"
" **(** **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:101
msgid ""
":ref:`set_state<class_EditorPlugin_set_state>` **(** "
":ref:`Dictionary<class_dictionary>` state **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:103
msgid ""
":ref:`set_window_layout<class_EditorPlugin_set_window_layout>` **(** "
":ref:`ConfigFile<class_configfile>` layout **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:105
msgid ":ref:`int<class_int>`"
msgstr ""

#: ../../classes/class_editorplugin.rst:105
msgid ""
":ref:`update_overlays<class_EditorPlugin_update_overlays>` **(** **)** "
"const"
msgstr ""

#: ../../classes/class_editorplugin.rst:109
msgid "Signals"
msgstr ""

#: ../../classes/class_editorplugin.rst:113
msgid ""
"**main_screen_changed** **(** :ref:`String<class_string>` screen_name "
"**)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:115
msgid ""
"Emitted when user change main screen view (2D, 3D, Script, AssetLib). "
"Works also with screens which are defined by plugins."
msgstr ""

#: ../../classes/class_editorplugin.rst:119
msgid "**scene_changed** **(** :ref:`Object<class_object>` scene_root **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:121
msgid ""
"Emitted when user change scene. The argument is a root node of freshly "
"opened scene."
msgstr ""

#: ../../classes/class_editorplugin.rst:125
msgid "**scene_closed** **(** :ref:`String<class_string>` filepath **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:127
msgid ""
"Emitted when user close scene. The argument is file path to a closed "
"scene."
msgstr ""

#: ../../classes/class_editorplugin.rst:131
msgid "Enums"
msgstr ""

#: ../../classes/class_editorplugin.rst:135
msgid "enum **DockSlot**"
msgstr ""

#: ../../classes/class_editorplugin.rst:137
msgid "**DOCK_SLOT_LEFT_UL** = **0**"
msgstr ""

#: ../../classes/class_editorplugin.rst:138
msgid "**DOCK_SLOT_LEFT_BL** = **1**"
msgstr ""

#: ../../classes/class_editorplugin.rst:139
msgid "**DOCK_SLOT_LEFT_UR** = **2**"
msgstr ""

#: ../../classes/class_editorplugin.rst:140
msgid "**DOCK_SLOT_LEFT_BR** = **3**"
msgstr ""

#: ../../classes/class_editorplugin.rst:141
msgid "**DOCK_SLOT_RIGHT_UL** = **4**"
msgstr ""

#: ../../classes/class_editorplugin.rst:142
msgid "**DOCK_SLOT_RIGHT_BL** = **5**"
msgstr ""

#: ../../classes/class_editorplugin.rst:143
msgid "**DOCK_SLOT_RIGHT_UR** = **6**"
msgstr ""

#: ../../classes/class_editorplugin.rst:144
msgid "**DOCK_SLOT_RIGHT_BR** = **7**"
msgstr ""

#: ../../classes/class_editorplugin.rst:145
msgid "**DOCK_SLOT_MAX** = **8**"
msgstr ""

#: ../../classes/class_editorplugin.rst:149
msgid "enum **CustomControlContainer**"
msgstr ""

#: ../../classes/class_editorplugin.rst:151
msgid "**CONTAINER_TOOLBAR** = **0**"
msgstr ""

#: ../../classes/class_editorplugin.rst:152
msgid "**CONTAINER_SPATIAL_EDITOR_MENU** = **1**"
msgstr ""

#: ../../classes/class_editorplugin.rst:153
msgid "**CONTAINER_SPATIAL_EDITOR_SIDE** = **2**"
msgstr ""

#: ../../classes/class_editorplugin.rst:154
msgid "**CONTAINER_SPATIAL_EDITOR_BOTTOM** = **3**"
msgstr ""

#: ../../classes/class_editorplugin.rst:155
msgid "**CONTAINER_CANVAS_EDITOR_MENU** = **4**"
msgstr ""

#: ../../classes/class_editorplugin.rst:156
msgid "**CONTAINER_CANVAS_EDITOR_SIDE** = **5**"
msgstr ""

#: ../../classes/class_editorplugin.rst:157
msgid "**CONTAINER_CANVAS_EDITOR_BOTTOM** = **6**"
msgstr ""

#: ../../classes/class_editorplugin.rst:158
msgid "**CONTAINER_PROPERTY_EDITOR_BOTTOM** = **7**"
msgstr ""

#: ../../classes/class_editorplugin.rst:162
msgid "Description"
msgstr ""

#: ../../classes/class_editorplugin.rst:164
msgid ""
"Plugins are used by the editor to extend functionality. The most common "
"types of plugins are those which edit a given node or resource type, "
"import plugins and export plugins."
msgstr ""

#: ../../classes/class_editorplugin.rst:167
msgid "Member Function Description"
msgstr ""

#: ../../classes/class_editorplugin.rst:171
msgid ""
":ref:`ToolButton<class_toolbutton>` **add_control_to_bottom_panel** **(**"
" :ref:`Control<class_control>` control, :ref:`String<class_string>` title"
" **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:173
msgid ""
"Add a control to the bottom panel (together with Output, Debug, "
"Animation, etc). Returns a reference to the button added. It's up to you "
"to hide/show the button when needed. If your plugin is being removed, "
"also make sure to remove your control by calling "
":ref:`remove_control_from_bottom_panel<class_EditorPlugin_remove_control_from_bottom_panel>`."
msgstr ""

#: ../../classes/class_editorplugin.rst:177
msgid ""
"void **add_control_to_container** **(** :ref:`int<class_int>` container, "
":ref:`Control<class_control>` control **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:179
msgid ""
"Add a custom control to a container (see CONTAINER\\_\\* enum). There are"
" many locations where custom controls can be added in the editor UI."
msgstr ""

#: ../../classes/class_editorplugin.rst:181
msgid ""
"Please remember that you have to manage the visibility of your custom "
"controls yourself (and likely hide it after adding it)."
msgstr ""

#: ../../classes/class_editorplugin.rst:183
msgid ""
"If your plugin is being removed, also make sure to remove your custom "
"controls too."
msgstr ""

#: ../../classes/class_editorplugin.rst:187
msgid ""
"void **add_control_to_dock** **(** :ref:`int<class_int>` slot, "
":ref:`Control<class_control>` control **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:189
msgid "Add the control to a specific dock slot (see DOCK\\_\\* enum for options)."
msgstr ""

#: ../../classes/class_editorplugin.rst:191
msgid ""
"If the dock is repositioned and as long as the plugin is active, the "
"editor will save the dock position on further sessions."
msgstr ""

#: ../../classes/class_editorplugin.rst:193
msgid ""
"If your plugin is being removed, also make sure to remove your control by"
" calling "
":ref:`remove_control_from_docks<class_EditorPlugin_remove_control_from_docks>`."
msgstr ""

#: ../../classes/class_editorplugin.rst:197
msgid ""
"void **add_custom_type** **(** :ref:`String<class_string>` type, "
":ref:`String<class_string>` base, :ref:`Script<class_script>` script, "
":ref:`Texture<class_texture>` icon **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:199
msgid ""
"Add a custom type, which will appear in the list of nodes or resources. "
"An icon can be optionally passed."
msgstr ""

#: ../../classes/class_editorplugin.rst:201
msgid ""
"When given node or resource is selected, the base type will be instanced "
"(ie, \"Spatial\", \"Control\", \"Resource\"), then the script will be "
"loaded and set to this object."
msgstr ""

#: ../../classes/class_editorplugin.rst:203
msgid ""
"You can use the :ref:`EditorPlugin.handles<class_EditorPlugin_handles>` "
"to check if your custom object is being edited by checking the script or "
"using 'is' keyword."
msgstr ""

#: ../../classes/class_editorplugin.rst:205
msgid ""
"During run-time, this will be a simple object with a script so this "
"function does not need to be called then."
msgstr ""

#: ../../classes/class_editorplugin.rst:209
msgid ""
"void **add_export_plugin** **(** "
":ref:`EditorExportPlugin<class_editorexportplugin>` exporter **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:213
msgid ""
"void **add_import_plugin** **(** "
":ref:`EditorImportPlugin<class_editorimportplugin>` importer **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:217
msgid ""
"void **add_scene_import_plugin** **(** "
":ref:`EditorSceneImporter<class_editorsceneimporter>` scene_importer "
"**)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:221
msgid ""
"void **add_tool_submenu_item** **(** :ref:`String<class_string>` name, "
":ref:`Object<class_object>` submenu **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:225
msgid "void **apply_changes** **(** **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:227
msgid ""
"This method is called when the editor is about to save the project, "
"switch to another tab, etc. It asks the plugin to apply any pending state"
" changes to ensure consistency."
msgstr ""

#: ../../classes/class_editorplugin.rst:229
msgid ""
"This is used, for example, in shader editors to let the plugin know that "
"it must apply the shader code being written by the user to the object."
msgstr ""

#: ../../classes/class_editorplugin.rst:233
msgid "void **clear** **(** **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:235
msgid ""
"Clear all the state and reset the object being edited to zero. This "
"ensures your plugin does not keep editing a currently existing node, or a"
" node from the wrong scene."
msgstr ""

#: ../../classes/class_editorplugin.rst:239
msgid ""
":ref:`EditorSpatialGizmo<class_editorspatialgizmo>` "
"**create_spatial_gizmo** **(** :ref:`Spatial<class_spatial>` for_spatial "
"**)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:241
msgid ""
"This is used for plugins that create gizmos used by the spatial editor. "
"Just check that the node passed in the \"for_spatial\" argument matches "
"your plugin."
msgstr ""

#: ../../classes/class_editorplugin.rst:245
msgid "void **edit** **(** :ref:`Object<class_object>` object **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:247
msgid ""
"This function is used for plugins that edit specific object types (nodes "
"or resources). It requests the editor to edit the given object."
msgstr ""

#: ../../classes/class_editorplugin.rst:251
msgid ""
":ref:`bool<class_bool>` **forward_canvas_gui_input** **(** "
":ref:`InputEvent<class_inputevent>` event **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:255
msgid ""
"void **forward_draw_over_viewport** **(** :ref:`Control<class_control>` "
"overlay **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:259
msgid ""
"void **forward_force_draw_over_viewport** **(** "
":ref:`Control<class_control>` overlay **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:263
msgid ""
":ref:`bool<class_bool>` **forward_spatial_gui_input** **(** "
":ref:`Camera<class_camera>` camera, :ref:`InputEvent<class_inputevent>` "
"event **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:265
msgid ""
"Implement this function if you are interested in 3D view screen input "
"events. It will be called only if currently selected node is handled by "
"your plugin."
msgstr ""

#: ../../classes/class_editorplugin.rst:267
msgid ""
"If you would like to always gets those input events then additionally use"
" "
":ref:`set_input_forwarding_always_enabled<class_EditorPlugin_set_input_forwarding_always_enabled>`."
msgstr ""

#: ../../classes/class_editorplugin.rst:271
msgid ""
":ref:`PoolStringArray<class_poolstringarray>` **get_breakpoints** **(** "
"**)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:273
msgid ""
"This is for editors that edit script based objects. You can return a list"
" of breakpoints in the format (script:line), for example: "
"res://path_to_script.gd:25"
msgstr ""

#: ../../classes/class_editorplugin.rst:277
msgid ""
":ref:`EditorInterface<class_editorinterface>` **get_editor_interface** "
"**(** **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:281
msgid ":ref:`Object<class_object>` **get_plugin_icon** **(** **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:285
msgid ":ref:`String<class_string>` **get_plugin_name** **(** **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:289
msgid ":ref:`Dictionary<class_dictionary>` **get_state** **(** **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:291
msgid ""
"Get the state of your plugin editor. This is used when saving the scene "
"(so state is kept when opening it again) and for switching tabs (so state"
" can be restored when the tab returns)."
msgstr ""

#: ../../classes/class_editorplugin.rst:295
msgid ":ref:`UndoRedo<class_undoredo>` **get_undo_redo** **(** **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:297
msgid ""
"Get the undo/redo object. Most actions in the editor can be undoable, so "
"use this object to make sure this happens when it's worth it."
msgstr ""

#: ../../classes/class_editorplugin.rst:301
msgid ""
"void **get_window_layout** **(** :ref:`ConfigFile<class_configfile>` "
"layout **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:303
msgid ""
"Get the GUI layout of the plugin. This is used to save the project's "
"editor layout when the "
":ref:`EditorPlugin.queue_save_layout<class_EditorPlugin_queue_save_layout>`"
" is called or the editor layout was changed(For example changing the "
"position of a dock)."
msgstr ""

#: ../../classes/class_editorplugin.rst:307
msgid ""
":ref:`bool<class_bool>` **handles** **(** :ref:`Object<class_object>` "
"object **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:309
msgid ""
"Implement this function if your plugin edits a specific type of object "
"(Resource or Node). If you return true, then you will get the functions "
":ref:`EditorPlugin.edit<class_EditorPlugin_edit>` and "
":ref:`EditorPlugin.make_visible<class_EditorPlugin_make_visible>` called "
"when the editor requests them."
msgstr ""

#: ../../classes/class_editorplugin.rst:313
msgid ":ref:`bool<class_bool>` **has_main_screen** **(** **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:315
msgid ""
"Return true if this is a main screen editor plugin (it goes in the main "
"screen selector together with 2D, 3D, Script)."
msgstr ""

#: ../../classes/class_editorplugin.rst:319
msgid "void **hide_bottom_panel** **(** **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:323
msgid ""
"void **make_bottom_panel_item_visible** **(** "
":ref:`Control<class_control>` item **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:327
msgid "void **make_visible** **(** :ref:`bool<class_bool>` visible **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:329
msgid ""
"This function will be called when the editor is requested to become "
"visible. It is used for plugins that edit a specific object type."
msgstr ""

#: ../../classes/class_editorplugin.rst:331
msgid ""
"Remember that you have to manage the visibility of all your editor "
"controls manually."
msgstr ""

#: ../../classes/class_editorplugin.rst:335
msgid "void **queue_save_layout** **(** **)** const"
msgstr ""

#: ../../classes/class_editorplugin.rst:337
msgid "Queue save the project's editor layout."
msgstr ""

#: ../../classes/class_editorplugin.rst:341
msgid ""
"void **remove_control_from_bottom_panel** **(** "
":ref:`Control<class_control>` control **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:343
msgid ""
"Remove the control from the bottom panel. Don't forget to call this if "
"you added one, so the editor can remove it cleanly."
msgstr ""

#: ../../classes/class_editorplugin.rst:347
msgid ""
"void **remove_control_from_container** **(** :ref:`int<class_int>` "
"container, :ref:`Control<class_control>` control **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:349
msgid ""
"Remove the control from the specified container. Use it when cleaning up "
"after adding a control with "
":ref:`add_control_to_container<class_EditorPlugin_add_control_to_container>`."
" Note that you can simply free the control if you won't use it anymore."
msgstr ""

#: ../../classes/class_editorplugin.rst:353
msgid ""
"void **remove_control_from_docks** **(** :ref:`Control<class_control>` "
"control **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:355
msgid ""
"Remove the control from the dock. Don't forget to call this if you added "
"one, so the editor can save the layout and remove it cleanly."
msgstr ""

#: ../../classes/class_editorplugin.rst:359
msgid "void **remove_custom_type** **(** :ref:`String<class_string>` type **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:361
msgid ""
"Remove a custom type added by "
":ref:`EditorPlugin.add_custom_type<class_EditorPlugin_add_custom_type>`"
msgstr ""

#: ../../classes/class_editorplugin.rst:365
msgid ""
"void **remove_export_plugin** **(** "
":ref:`EditorExportPlugin<class_editorexportplugin>` exporter **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:369
msgid ""
"void **remove_import_plugin** **(** "
":ref:`EditorImportPlugin<class_editorimportplugin>` importer **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:373
msgid ""
"void **remove_scene_import_plugin** **(** "
":ref:`EditorSceneImporter<class_editorsceneimporter>` scene_importer "
"**)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:377
msgid "void **save_external_data** **(** **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:379
msgid ""
"This method is called after the editor saves the project or when it's "
"closed. It asks the plugin to save edited external scenes/resources."
msgstr ""

#: ../../classes/class_editorplugin.rst:383
msgid "void **set_force_draw_over_forwarding_enabled** **(** **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:387
msgid "void **set_input_event_forwarding_always_enabled** **(** **)**"
msgstr ""

#: ../../classes/class_editorplugin.rst:389
msgid ""
"Use this method if you always want to receive inputs from 3D view screen "
"inside "
":ref:`forward_spatial_gui_input<class_EditorPlugin_forward_spatial_gui_input>`."
" It might be especially usable if your plugin will want to use raycast in"
" the scene."
msgstr ""

#: ../../classes/class_editorplugin.rst:393
msgid ""
"void **set_state** **(** :ref:`Dictionary<class_dictionary>` state **)** "
"virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:395
msgid ""
"Restore the state saved by "
":ref:`EditorPlugin.get_state<class_EditorPlugin_get_state>`."
msgstr ""

#: ../../classes/class_editorplugin.rst:399
msgid ""
"void **set_window_layout** **(** :ref:`ConfigFile<class_configfile>` "
"layout **)** virtual"
msgstr ""

#: ../../classes/class_editorplugin.rst:401
msgid ""
"Restore the plugin GUI layout saved by "
":ref:`EditorPlugin.get_window_layout<class_EditorPlugin_get_window_layout>`."
msgstr ""

#: ../../classes/class_editorplugin.rst:405
msgid ":ref:`int<class_int>` **update_overlays** **(** **)** const"
msgstr ""

