# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot
# community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-28 16:44-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../classes/class_jsonparseresult.rst:8
msgid "JSONParseResult"
msgstr ""

#: ../../classes/class_jsonparseresult.rst:10
msgid ""
"**Inherits:** :ref:`Reference<class_reference>` **<** "
":ref:`Object<class_object>`"
msgstr ""

#: ../../classes/class_jsonparseresult.rst:12
msgid "**Category:** Core"
msgstr ""

#: ../../classes/class_jsonparseresult.rst:15
msgid "Brief Description"
msgstr ""

#: ../../classes/class_jsonparseresult.rst:17
msgid "Data class wrapper for decoded JSON."
msgstr ""

#: ../../classes/class_jsonparseresult.rst:20
msgid "Member Variables"
msgstr ""

#: ../../classes/class_jsonparseresult.rst:24
msgid ""
"Error **error** - The error type if JSON source was not successfully "
"parsed. See :ref:`@GlobalScope<class_@globalscope>` ERR\\_\\* constants."
msgstr ""

#: ../../classes/class_jsonparseresult.rst:28
msgid ""
":ref:`int<class_int>` **error_line** - The line number where the error "
"occurred if JSON source was not successfully parsed."
msgstr ""

#: ../../classes/class_jsonparseresult.rst:32
msgid ""
":ref:`String<class_string>` **error_string** - The error message if JSON "
"source was not successfully parsed. See "
":ref:`@GlobalScope<class_@globalscope>` ERR\\_\\* constants."
msgstr ""

#: ../../classes/class_jsonparseresult.rst:36
msgid ""
":ref:`Variant<class_variant>` **result** - A "
":ref:`Variant<class_variant>` containing the parsed JSON. Use typeof() to"
" check if it is what you expect. For example, if JSON source starts with "
"curly braces (``{}``) a :ref:`Dictionary<class_dictionary>` will be "
"returned, if JSON source starts with braces (``[]``) an "
":ref:`Array<class_array>` will be returned."
msgstr ""

#: ../../classes/class_jsonparseresult.rst:38
msgid ""
"*Be aware that the JSON specification does not define integer or float "
"types, but only a number type. Therefore, parsing a JSON text will "
"convert all numerical values to float types."
msgstr ""

#: ../../classes/class_jsonparseresult.rst:40
msgid ""
"Note that JSON objects do not preserve key order like Godot dictionaries,"
" thus you should not rely on keys being in a certain order if a "
"dictionary is constructed from JSON. In contrast, JSON arrays retain the "
"order of their elements:*"
msgstr ""

#: ../../classes/class_jsonparseresult.rst:52
msgid "Description"
msgstr ""

#: ../../classes/class_jsonparseresult.rst:54
msgid ""
"Returned by :ref:`JSON.parse<class_JSON_parse>`, ``JSONParseResult`` "
"contains decoded JSON or error information if JSON source not "
"successfully parsed. You can check if JSON source was successfully parsed"
" with ``if json_result.error == OK``."
msgstr ""

