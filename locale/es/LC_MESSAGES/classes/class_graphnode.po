# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot
# community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-28 16:44-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../classes/class_graphnode.rst:8
msgid "GraphNode"
msgstr ""

#: ../../classes/class_graphnode.rst:10
msgid ""
"**Inherits:** :ref:`Container<class_container>` **<** "
":ref:`Control<class_control>` **<** :ref:`CanvasItem<class_canvasitem>` "
"**<** :ref:`Node<class_node>` **<** :ref:`Object<class_object>`"
msgstr ""

#: ../../classes/class_graphnode.rst:12
msgid "**Category:** Core"
msgstr ""

#: ../../classes/class_graphnode.rst:15
msgid "Brief Description"
msgstr ""

#: ../../classes/class_graphnode.rst:17
msgid ""
"A GraphNode is a container with several input and output slots allowing "
"connections between GraphNodes. Slots can have different, incompatible "
"types."
msgstr ""

#: ../../classes/class_graphnode.rst:20
msgid "Member Functions"
msgstr ""

#: ../../classes/class_graphnode.rst:23 ../../classes/class_graphnode.rst:25
#: ../../classes/class_graphnode.rst:55
msgid "void"
msgstr ""

#: ../../classes/class_graphnode.rst:23
msgid ":ref:`clear_all_slots<class_GraphNode_clear_all_slots>` **(** **)**"
msgstr ""

#: ../../classes/class_graphnode.rst:25
msgid ""
":ref:`clear_slot<class_GraphNode_clear_slot>` **(** :ref:`int<class_int>`"
" idx **)**"
msgstr ""

#: ../../classes/class_graphnode.rst:27 ../../classes/class_graphnode.rst:35
#: ../../classes/class_graphnode.rst:43 ../../classes/class_graphnode.rst:45
msgid ":ref:`Color<class_color>`"
msgstr ""

#: ../../classes/class_graphnode.rst:27
msgid ""
":ref:`get_connection_input_color<class_GraphNode_get_connection_input_color>`"
" **(** :ref:`int<class_int>` idx **)**"
msgstr ""

#: ../../classes/class_graphnode.rst:29 ../../classes/class_graphnode.rst:33
#: ../../classes/class_graphnode.rst:37 ../../classes/class_graphnode.rst:41
#: ../../classes/class_graphnode.rst:47 ../../classes/class_graphnode.rst:49
msgid ":ref:`int<class_int>`"
msgstr ""

#: ../../classes/class_graphnode.rst:29
msgid ""
":ref:`get_connection_input_count<class_GraphNode_get_connection_input_count>`"
" **(** **)**"
msgstr ""

#: ../../classes/class_graphnode.rst:31 ../../classes/class_graphnode.rst:39
msgid ":ref:`Vector2<class_vector2>`"
msgstr ""

#: ../../classes/class_graphnode.rst:31
msgid ""
":ref:`get_connection_input_position<class_GraphNode_get_connection_input_position>`"
" **(** :ref:`int<class_int>` idx **)**"
msgstr ""

#: ../../classes/class_graphnode.rst:33
msgid ""
":ref:`get_connection_input_type<class_GraphNode_get_connection_input_type>`"
" **(** :ref:`int<class_int>` idx **)**"
msgstr ""

#: ../../classes/class_graphnode.rst:35
msgid ""
":ref:`get_connection_output_color<class_GraphNode_get_connection_output_color>`"
" **(** :ref:`int<class_int>` idx **)**"
msgstr ""

#: ../../classes/class_graphnode.rst:37
msgid ""
":ref:`get_connection_output_count<class_GraphNode_get_connection_output_count>`"
" **(** **)**"
msgstr ""

#: ../../classes/class_graphnode.rst:39
msgid ""
":ref:`get_connection_output_position<class_GraphNode_get_connection_output_position>`"
" **(** :ref:`int<class_int>` idx **)**"
msgstr ""

#: ../../classes/class_graphnode.rst:41
msgid ""
":ref:`get_connection_output_type<class_GraphNode_get_connection_output_type>`"
" **(** :ref:`int<class_int>` idx **)**"
msgstr ""

#: ../../classes/class_graphnode.rst:43
msgid ""
":ref:`get_slot_color_left<class_GraphNode_get_slot_color_left>` **(** "
":ref:`int<class_int>` idx **)** const"
msgstr ""

#: ../../classes/class_graphnode.rst:45
msgid ""
":ref:`get_slot_color_right<class_GraphNode_get_slot_color_right>` **(** "
":ref:`int<class_int>` idx **)** const"
msgstr ""

#: ../../classes/class_graphnode.rst:47
msgid ""
":ref:`get_slot_type_left<class_GraphNode_get_slot_type_left>` **(** "
":ref:`int<class_int>` idx **)** const"
msgstr ""

#: ../../classes/class_graphnode.rst:49
msgid ""
":ref:`get_slot_type_right<class_GraphNode_get_slot_type_right>` **(** "
":ref:`int<class_int>` idx **)** const"
msgstr ""

#: ../../classes/class_graphnode.rst:51 ../../classes/class_graphnode.rst:53
msgid ":ref:`bool<class_bool>`"
msgstr ""

#: ../../classes/class_graphnode.rst:51
msgid ""
":ref:`is_slot_enabled_left<class_GraphNode_is_slot_enabled_left>` **(** "
":ref:`int<class_int>` idx **)** const"
msgstr ""

#: ../../classes/class_graphnode.rst:53
msgid ""
":ref:`is_slot_enabled_right<class_GraphNode_is_slot_enabled_right>` **(**"
" :ref:`int<class_int>` idx **)** const"
msgstr ""

#: ../../classes/class_graphnode.rst:55
msgid ""
":ref:`set_slot<class_GraphNode_set_slot>` **(** :ref:`int<class_int>` "
"idx, :ref:`bool<class_bool>` enable_left, :ref:`int<class_int>` "
"type_left, :ref:`Color<class_color>` color_left, :ref:`bool<class_bool>` "
"enable_right, :ref:`int<class_int>` type_right, :ref:`Color<class_color>`"
" color_right, :ref:`Texture<class_texture>` custom_left=null, "
":ref:`Texture<class_texture>` custom_right=null **)**"
msgstr ""

#: ../../classes/class_graphnode.rst:59
msgid "Signals"
msgstr ""

#: ../../classes/class_graphnode.rst:63
msgid "**close_request** **(** **)**"
msgstr ""

#: ../../classes/class_graphnode.rst:65
msgid "Signal sent on closing the GraphNode."
msgstr ""

#: ../../classes/class_graphnode.rst:69
msgid ""
"**dragged** **(** :ref:`Vector2<class_vector2>` from, "
":ref:`Vector2<class_vector2>` to **)**"
msgstr ""

#: ../../classes/class_graphnode.rst:71
msgid "Signal sent when the GraphNode is dragged."
msgstr ""

#: ../../classes/class_graphnode.rst:75
msgid "**offset_changed** **(** **)**"
msgstr ""

#: ../../classes/class_graphnode.rst:77
msgid "Signal sent when the GraphNode is moved."
msgstr ""

#: ../../classes/class_graphnode.rst:81
msgid "**raise_request** **(** **)**"
msgstr ""

#: ../../classes/class_graphnode.rst:83
msgid ""
"Signal sent when the GraphNode is requested to be displayed over other "
"ones. Happens on focusing (clicking into) the GraphNode."
msgstr ""

#: ../../classes/class_graphnode.rst:87
msgid "**resize_request** **(** :ref:`Vector2<class_vector2>` new_minsize **)**"
msgstr ""

#: ../../classes/class_graphnode.rst:91
msgid "Member Variables"
msgstr ""

#: ../../classes/class_graphnode.rst:95
msgid ":ref:`bool<class_bool>` **comment**"
msgstr ""

#: ../../classes/class_graphnode.rst:99
msgid ""
":ref:`Vector2<class_vector2>` **offset** - The offset of the GraphNode, "
"relative to the scroll offset of the :ref:`GraphEdit<class_graphedit>`. "
"Note that you cannot use position directly, as "
":ref:`GraphEdit<class_graphedit>` is a :ref:`Container<class_container>`."
msgstr ""

#: ../../classes/class_graphnode.rst:103
msgid ":ref:`Overlay<enum_graphnode_overlay>` **overlay**"
msgstr ""

#: ../../classes/class_graphnode.rst:107
msgid ":ref:`bool<class_bool>` **resizable**"
msgstr ""

#: ../../classes/class_graphnode.rst:111
msgid ":ref:`bool<class_bool>` **selected**"
msgstr ""

#: ../../classes/class_graphnode.rst:115
msgid ":ref:`bool<class_bool>` **show_close**"
msgstr ""

#: ../../classes/class_graphnode.rst:119
msgid ":ref:`String<class_string>` **title**"
msgstr ""

#: ../../classes/class_graphnode.rst:123
msgid "Enums"
msgstr ""

#: ../../classes/class_graphnode.rst:127
msgid "enum **Overlay**"
msgstr ""

#: ../../classes/class_graphnode.rst:129
msgid "**OVERLAY_DISABLED** = **0**"
msgstr ""

#: ../../classes/class_graphnode.rst:130
msgid "**OVERLAY_BREAKPOINT** = **1**"
msgstr ""

#: ../../classes/class_graphnode.rst:131
msgid "**OVERLAY_POSITION** = **2**"
msgstr ""

#: ../../classes/class_graphnode.rst:135
msgid "Description"
msgstr ""

#: ../../classes/class_graphnode.rst:137
msgid ""
"A GraphNode is a container defined by a title. It can have 1 or more "
"input and output slots, which can be enabled (shown) or disabled (not "
"shown) and have different (incompatible) types. Colors can also be "
"assigned to slots. A tuple of input and output slots is defined for each "
"GUI element included in the GraphNode. Input and output connections are "
"left and right slots, but only enabled slots are counted as connections."
msgstr ""

#: ../../classes/class_graphnode.rst:140
msgid "Member Function Description"
msgstr ""

#: ../../classes/class_graphnode.rst:144
msgid "void **clear_all_slots** **(** **)**"
msgstr ""

#: ../../classes/class_graphnode.rst:146
msgid "Disable all input and output slots of the GraphNode."
msgstr ""

#: ../../classes/class_graphnode.rst:150
msgid "void **clear_slot** **(** :ref:`int<class_int>` idx **)**"
msgstr ""

#: ../../classes/class_graphnode.rst:152
msgid "Disable input and output slot whose index is 'idx'."
msgstr ""

#: ../../classes/class_graphnode.rst:156
msgid ""
":ref:`Color<class_color>` **get_connection_input_color** **(** "
":ref:`int<class_int>` idx **)**"
msgstr ""

#: ../../classes/class_graphnode.rst:158
msgid "Return the color of the input connection 'idx'."
msgstr ""

#: ../../classes/class_graphnode.rst:162
msgid ":ref:`int<class_int>` **get_connection_input_count** **(** **)**"
msgstr ""

#: ../../classes/class_graphnode.rst:164
msgid "Return the number of enabled input slots (connections) to the GraphNode."
msgstr ""

#: ../../classes/class_graphnode.rst:168
msgid ""
":ref:`Vector2<class_vector2>` **get_connection_input_position** **(** "
":ref:`int<class_int>` idx **)**"
msgstr ""

#: ../../classes/class_graphnode.rst:170
msgid "Return the position of the input connection 'idx'."
msgstr ""

#: ../../classes/class_graphnode.rst:174
msgid ""
":ref:`int<class_int>` **get_connection_input_type** **(** "
":ref:`int<class_int>` idx **)**"
msgstr ""

#: ../../classes/class_graphnode.rst:176
msgid "Return the type of the input connection 'idx'."
msgstr ""

#: ../../classes/class_graphnode.rst:180
msgid ""
":ref:`Color<class_color>` **get_connection_output_color** **(** "
":ref:`int<class_int>` idx **)**"
msgstr ""

#: ../../classes/class_graphnode.rst:182
msgid "Return the color of the output connection 'idx'."
msgstr ""

#: ../../classes/class_graphnode.rst:186
msgid ":ref:`int<class_int>` **get_connection_output_count** **(** **)**"
msgstr ""

#: ../../classes/class_graphnode.rst:188
msgid "Return the number of enabled output slots (connections) of the GraphNode."
msgstr ""

#: ../../classes/class_graphnode.rst:192
msgid ""
":ref:`Vector2<class_vector2>` **get_connection_output_position** **(** "
":ref:`int<class_int>` idx **)**"
msgstr ""

#: ../../classes/class_graphnode.rst:194
msgid "Return the position of the output connection 'idx'."
msgstr ""

#: ../../classes/class_graphnode.rst:198
msgid ""
":ref:`int<class_int>` **get_connection_output_type** **(** "
":ref:`int<class_int>` idx **)**"
msgstr ""

#: ../../classes/class_graphnode.rst:200
msgid "Return the type of the output connection 'idx'."
msgstr ""

#: ../../classes/class_graphnode.rst:204
msgid ""
":ref:`Color<class_color>` **get_slot_color_left** **(** "
":ref:`int<class_int>` idx **)** const"
msgstr ""

#: ../../classes/class_graphnode.rst:206
msgid "Return the color set to 'idx' left (input) slot."
msgstr ""

#: ../../classes/class_graphnode.rst:210
msgid ""
":ref:`Color<class_color>` **get_slot_color_right** **(** "
":ref:`int<class_int>` idx **)** const"
msgstr ""

#: ../../classes/class_graphnode.rst:212
msgid "Return the color set to 'idx' right (output) slot."
msgstr ""

#: ../../classes/class_graphnode.rst:216
msgid ""
":ref:`int<class_int>` **get_slot_type_left** **(** :ref:`int<class_int>` "
"idx **)** const"
msgstr ""

#: ../../classes/class_graphnode.rst:218
msgid "Return the (integer) type of left (input) 'idx' slot."
msgstr ""

#: ../../classes/class_graphnode.rst:222
msgid ""
":ref:`int<class_int>` **get_slot_type_right** **(** :ref:`int<class_int>`"
" idx **)** const"
msgstr ""

#: ../../classes/class_graphnode.rst:224
msgid "Return the (integer) type of right (output) 'idx' slot."
msgstr ""

#: ../../classes/class_graphnode.rst:228
msgid ""
":ref:`bool<class_bool>` **is_slot_enabled_left** **(** "
":ref:`int<class_int>` idx **)** const"
msgstr ""

#: ../../classes/class_graphnode.rst:230
msgid "Return true if left (input) slot 'idx' is enabled. False otherwise."
msgstr ""

#: ../../classes/class_graphnode.rst:234
msgid ""
":ref:`bool<class_bool>` **is_slot_enabled_right** **(** "
":ref:`int<class_int>` idx **)** const"
msgstr ""

#: ../../classes/class_graphnode.rst:236
msgid "Return true if right (output) slot 'idx' is enabled. False otherwise."
msgstr ""

#: ../../classes/class_graphnode.rst:240
msgid ""
"void **set_slot** **(** :ref:`int<class_int>` idx, "
":ref:`bool<class_bool>` enable_left, :ref:`int<class_int>` type_left, "
":ref:`Color<class_color>` color_left, :ref:`bool<class_bool>` "
"enable_right, :ref:`int<class_int>` type_right, :ref:`Color<class_color>`"
" color_right, :ref:`Texture<class_texture>` custom_left=null, "
":ref:`Texture<class_texture>` custom_right=null **)**"
msgstr ""

