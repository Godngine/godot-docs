# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot
# community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-28 16:44-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../classes/class_node.rst:8
msgid "Node"
msgstr ""

#: ../../classes/class_node.rst:10
msgid "**Inherits:** :ref:`Object<class_object>`"
msgstr ""

#: ../../classes/class_node.rst:12
msgid ""
"**Inherited By:** :ref:`Viewport<class_viewport>`, "
":ref:`AudioStreamPlayer<class_audiostreamplayer>`, "
":ref:`EditorFileSystem<class_editorfilesystem>`, "
":ref:`CanvasLayer<class_canvaslayer>`, :ref:`Spatial<class_spatial>`, "
":ref:`AnimationPlayer<class_animationplayer>`, "
":ref:`EditorPlugin<class_editorplugin>`, "
":ref:`ResourcePreloader<class_resourcepreloader>`, "
":ref:`AnimationTreePlayer<class_animationtreeplayer>`, "
":ref:`WorldEnvironment<class_worldenvironment>`, "
":ref:`InstancePlaceholder<class_instanceplaceholder>`, "
":ref:`HTTPRequest<class_httprequest>`, "
":ref:`EditorInterface<class_editorinterface>`, "
":ref:`EditorResourcePreview<class_editorresourcepreview>`, "
":ref:`CanvasItem<class_canvasitem>`, :ref:`Timer<class_timer>`, "
":ref:`Tween<class_tween>`"
msgstr ""

#: ../../classes/class_node.rst:14
msgid "**Category:** Core"
msgstr ""

#: ../../classes/class_node.rst:17
msgid "Brief Description"
msgstr ""

#: ../../classes/class_node.rst:19
msgid "Base class for all *scene* objects."
msgstr ""

#: ../../classes/class_node.rst:22
msgid "Member Functions"
msgstr ""

#: ../../classes/class_node.rst:25 ../../classes/class_node.rst:27
#: ../../classes/class_node.rst:29 ../../classes/class_node.rst:31
#: ../../classes/class_node.rst:33 ../../classes/class_node.rst:35
#: ../../classes/class_node.rst:37 ../../classes/class_node.rst:39
#: ../../classes/class_node.rst:41 ../../classes/class_node.rst:43
#: ../../classes/class_node.rst:45 ../../classes/class_node.rst:117
#: ../../classes/class_node.rst:119 ../../classes/class_node.rst:121
#: ../../classes/class_node.rst:123 ../../classes/class_node.rst:125
#: ../../classes/class_node.rst:127 ../../classes/class_node.rst:129
#: ../../classes/class_node.rst:131 ../../classes/class_node.rst:133
#: ../../classes/class_node.rst:135 ../../classes/class_node.rst:137
#: ../../classes/class_node.rst:139 ../../classes/class_node.rst:143
#: ../../classes/class_node.rst:151 ../../classes/class_node.rst:153
#: ../../classes/class_node.rst:155 ../../classes/class_node.rst:157
#: ../../classes/class_node.rst:159 ../../classes/class_node.rst:161
#: ../../classes/class_node.rst:163 ../../classes/class_node.rst:165
#: ../../classes/class_node.rst:167 ../../classes/class_node.rst:169
#: ../../classes/class_node.rst:171 ../../classes/class_node.rst:173
#: ../../classes/class_node.rst:175 ../../classes/class_node.rst:177
#: ../../classes/class_node.rst:179
msgid "void"
msgstr ""

#: ../../classes/class_node.rst:25
msgid ":ref:`_enter_tree<class_Node__enter_tree>` **(** **)** virtual"
msgstr ""

#: ../../classes/class_node.rst:27
msgid ":ref:`_exit_tree<class_Node__exit_tree>` **(** **)** virtual"
msgstr ""

#: ../../classes/class_node.rst:29
msgid ""
":ref:`_input<class_Node__input>` **(** "
":ref:`InputEvent<class_inputevent>` event **)** virtual"
msgstr ""

#: ../../classes/class_node.rst:31
msgid ""
":ref:`_physics_process<class_Node__physics_process>` **(** "
":ref:`float<class_float>` delta **)** virtual"
msgstr ""

#: ../../classes/class_node.rst:33
msgid ""
":ref:`_process<class_Node__process>` **(** :ref:`float<class_float>` "
"delta **)** virtual"
msgstr ""

#: ../../classes/class_node.rst:35
msgid ":ref:`_ready<class_Node__ready>` **(** **)** virtual"
msgstr ""

#: ../../classes/class_node.rst:37
msgid ""
":ref:`_unhandled_input<class_Node__unhandled_input>` **(** "
":ref:`InputEvent<class_inputevent>` event **)** virtual"
msgstr ""

#: ../../classes/class_node.rst:39
msgid ""
":ref:`_unhandled_key_input<class_Node__unhandled_key_input>` **(** "
":ref:`InputEventKey<class_inputeventkey>` event **)** virtual"
msgstr ""

#: ../../classes/class_node.rst:41
msgid ""
":ref:`add_child<class_Node_add_child>` **(** :ref:`Node<class_node>` "
"node, :ref:`bool<class_bool>` legible_unique_name=false **)**"
msgstr ""

#: ../../classes/class_node.rst:43
msgid ""
":ref:`add_child_below_node<class_Node_add_child_below_node>` **(** "
":ref:`Node<class_node>` node, :ref:`Node<class_node>` child_node, "
":ref:`bool<class_bool>` legible_unique_name=false **)**"
msgstr ""

#: ../../classes/class_node.rst:45
msgid ""
":ref:`add_to_group<class_Node_add_to_group>` **(** "
":ref:`String<class_string>` group, :ref:`bool<class_bool>` "
"persistent=false **)**"
msgstr ""

#: ../../classes/class_node.rst:47 ../../classes/class_node.rst:81
#: ../../classes/class_node.rst:87 ../../classes/class_node.rst:89
#: ../../classes/class_node.rst:91 ../../classes/class_node.rst:93
#: ../../classes/class_node.rst:95 ../../classes/class_node.rst:97
#: ../../classes/class_node.rst:99 ../../classes/class_node.rst:101
#: ../../classes/class_node.rst:103 ../../classes/class_node.rst:105
#: ../../classes/class_node.rst:107 ../../classes/class_node.rst:109
#: ../../classes/class_node.rst:111 ../../classes/class_node.rst:113
#: ../../classes/class_node.rst:115
msgid ":ref:`bool<class_bool>`"
msgstr ""

#: ../../classes/class_node.rst:47
msgid ":ref:`can_process<class_Node_can_process>` **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:49 ../../classes/class_node.rst:51
#: ../../classes/class_node.rst:53 ../../classes/class_node.rst:65
#: ../../classes/class_node.rst:69
msgid ":ref:`Node<class_node>`"
msgstr ""

#: ../../classes/class_node.rst:49
msgid ""
":ref:`duplicate<class_Node_duplicate>` **(** :ref:`int<class_int>` "
"flags=15 **)** const"
msgstr ""

#: ../../classes/class_node.rst:51
msgid ""
":ref:`find_node<class_Node_find_node>` **(** :ref:`String<class_string>` "
"mask, :ref:`bool<class_bool>` recursive=true, :ref:`bool<class_bool>` "
"owned=true **)** const"
msgstr ""

#: ../../classes/class_node.rst:53
msgid ""
":ref:`get_child<class_Node_get_child>` **(** :ref:`int<class_int>` idx "
"**)** const"
msgstr ""

#: ../../classes/class_node.rst:55 ../../classes/class_node.rst:61
#: ../../classes/class_node.rst:63 ../../classes/class_node.rst:77
msgid ":ref:`int<class_int>`"
msgstr ""

#: ../../classes/class_node.rst:55
msgid ":ref:`get_child_count<class_Node_get_child_count>` **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:57 ../../classes/class_node.rst:59
#: ../../classes/class_node.rst:67
msgid ":ref:`Array<class_array>`"
msgstr ""

#: ../../classes/class_node.rst:57
msgid ":ref:`get_children<class_Node_get_children>` **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:59
msgid ":ref:`get_groups<class_Node_get_groups>` **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:61
msgid ":ref:`get_index<class_Node_get_index>` **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:63
msgid ":ref:`get_network_master<class_Node_get_network_master>` **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:65
msgid ""
":ref:`get_node<class_Node_get_node>` **(** "
":ref:`NodePath<class_nodepath>` path **)** const"
msgstr ""

#: ../../classes/class_node.rst:67
msgid ""
":ref:`get_node_and_resource<class_Node_get_node_and_resource>` **(** "
":ref:`NodePath<class_nodepath>` path **)**"
msgstr ""

#: ../../classes/class_node.rst:69
msgid ":ref:`get_parent<class_Node_get_parent>` **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:71 ../../classes/class_node.rst:73
msgid ":ref:`NodePath<class_nodepath>`"
msgstr ""

#: ../../classes/class_node.rst:71
msgid ":ref:`get_path<class_Node_get_path>` **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:73
msgid ""
":ref:`get_path_to<class_Node_get_path_to>` **(** :ref:`Node<class_node>` "
"node **)** const"
msgstr ""

#: ../../classes/class_node.rst:75 ../../classes/class_node.rst:79
msgid ":ref:`float<class_float>`"
msgstr ""

#: ../../classes/class_node.rst:75
msgid ""
":ref:`get_physics_process_delta_time<class_Node_get_physics_process_delta_time>`"
" **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:77
msgid ""
":ref:`get_position_in_parent<class_Node_get_position_in_parent>` **(** "
"**)** const"
msgstr ""

#: ../../classes/class_node.rst:79
msgid ""
":ref:`get_process_delta_time<class_Node_get_process_delta_time>` **(** "
"**)** const"
msgstr ""

#: ../../classes/class_node.rst:81
msgid ""
":ref:`get_scene_instance_load_placeholder<class_Node_get_scene_instance_load_placeholder>`"
" **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:83
msgid ":ref:`SceneTree<class_scenetree>`"
msgstr ""

#: ../../classes/class_node.rst:83
msgid ":ref:`get_tree<class_Node_get_tree>` **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:85
msgid ":ref:`Viewport<class_viewport>`"
msgstr ""

#: ../../classes/class_node.rst:85
msgid ":ref:`get_viewport<class_Node_get_viewport>` **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:87
msgid ""
":ref:`has_node<class_Node_has_node>` **(** "
":ref:`NodePath<class_nodepath>` path **)** const"
msgstr ""

#: ../../classes/class_node.rst:89
msgid ""
":ref:`has_node_and_resource<class_Node_has_node_and_resource>` **(** "
":ref:`NodePath<class_nodepath>` path **)** const"
msgstr ""

#: ../../classes/class_node.rst:91
msgid ""
":ref:`is_a_parent_of<class_Node_is_a_parent_of>` **(** "
":ref:`Node<class_node>` node **)** const"
msgstr ""

#: ../../classes/class_node.rst:93
msgid ""
":ref:`is_displayed_folded<class_Node_is_displayed_folded>` **(** **)** "
"const"
msgstr ""

#: ../../classes/class_node.rst:95
msgid ""
":ref:`is_greater_than<class_Node_is_greater_than>` **(** "
":ref:`Node<class_node>` node **)** const"
msgstr ""

#: ../../classes/class_node.rst:97
msgid ""
":ref:`is_in_group<class_Node_is_in_group>` **(** "
":ref:`String<class_string>` group **)** const"
msgstr ""

#: ../../classes/class_node.rst:99
msgid ":ref:`is_inside_tree<class_Node_is_inside_tree>` **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:101
msgid ":ref:`is_network_master<class_Node_is_network_master>` **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:103
msgid ""
":ref:`is_physics_processing<class_Node_is_physics_processing>` **(** "
"**)** const"
msgstr ""

#: ../../classes/class_node.rst:105
msgid ""
":ref:`is_physics_processing_internal<class_Node_is_physics_processing_internal>`"
" **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:107
msgid ":ref:`is_processing<class_Node_is_processing>` **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:109
msgid ""
":ref:`is_processing_input<class_Node_is_processing_input>` **(** **)** "
"const"
msgstr ""

#: ../../classes/class_node.rst:111
msgid ""
":ref:`is_processing_internal<class_Node_is_processing_internal>` **(** "
"**)** const"
msgstr ""

#: ../../classes/class_node.rst:113
msgid ""
":ref:`is_processing_unhandled_input<class_Node_is_processing_unhandled_input>`"
" **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:115
msgid ""
":ref:`is_processing_unhandled_key_input<class_Node_is_processing_unhandled_key_input>`"
" **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:117
msgid ""
":ref:`move_child<class_Node_move_child>` **(** :ref:`Node<class_node>` "
"child_node, :ref:`int<class_int>` to_position **)**"
msgstr ""

#: ../../classes/class_node.rst:119
msgid ":ref:`print_stray_nodes<class_Node_print_stray_nodes>` **(** **)**"
msgstr ""

#: ../../classes/class_node.rst:121
msgid ":ref:`print_tree<class_Node_print_tree>` **(** **)**"
msgstr ""

#: ../../classes/class_node.rst:123
msgid ""
":ref:`propagate_call<class_Node_propagate_call>` **(** "
":ref:`String<class_string>` method, :ref:`Array<class_array>` args=[  ], "
":ref:`bool<class_bool>` parent_first=false **)**"
msgstr ""

#: ../../classes/class_node.rst:125
msgid ""
":ref:`propagate_notification<class_Node_propagate_notification>` **(** "
":ref:`int<class_int>` what **)**"
msgstr ""

#: ../../classes/class_node.rst:127
msgid ":ref:`queue_free<class_Node_queue_free>` **(** **)**"
msgstr ""

#: ../../classes/class_node.rst:129
msgid ":ref:`raise<class_Node_raise>` **(** **)**"
msgstr ""

#: ../../classes/class_node.rst:131
msgid ":ref:`remove_and_skip<class_Node_remove_and_skip>` **(** **)**"
msgstr ""

#: ../../classes/class_node.rst:133
msgid ""
":ref:`remove_child<class_Node_remove_child>` **(** "
":ref:`Node<class_node>` node **)**"
msgstr ""

#: ../../classes/class_node.rst:135
msgid ""
":ref:`remove_from_group<class_Node_remove_from_group>` **(** "
":ref:`String<class_string>` group **)**"
msgstr ""

#: ../../classes/class_node.rst:137
msgid ""
":ref:`replace_by<class_Node_replace_by>` **(** :ref:`Node<class_node>` "
"node, :ref:`bool<class_bool>` keep_data=false **)**"
msgstr ""

#: ../../classes/class_node.rst:139
msgid ":ref:`request_ready<class_Node_request_ready>` **(** **)**"
msgstr ""

#: ../../classes/class_node.rst:141 ../../classes/class_node.rst:145
#: ../../classes/class_node.rst:147 ../../classes/class_node.rst:149
msgid ":ref:`Variant<class_variant>`"
msgstr ""

#: ../../classes/class_node.rst:141
msgid ""
":ref:`rpc<class_Node_rpc>` **(** :ref:`String<class_string>` method **)**"
" vararg"
msgstr ""

#: ../../classes/class_node.rst:143
msgid ""
":ref:`rpc_config<class_Node_rpc_config>` **(** "
":ref:`String<class_string>` method, :ref:`int<class_int>` mode **)**"
msgstr ""

#: ../../classes/class_node.rst:145
msgid ""
":ref:`rpc_id<class_Node_rpc_id>` **(** :ref:`int<class_int>` peer_id, "
":ref:`String<class_string>` method **)** vararg"
msgstr ""

#: ../../classes/class_node.rst:147
msgid ""
":ref:`rpc_unreliable<class_Node_rpc_unreliable>` **(** "
":ref:`String<class_string>` method **)** vararg"
msgstr ""

#: ../../classes/class_node.rst:149
msgid ""
":ref:`rpc_unreliable_id<class_Node_rpc_unreliable_id>` **(** "
":ref:`int<class_int>` peer_id, :ref:`String<class_string>` method **)** "
"vararg"
msgstr ""

#: ../../classes/class_node.rst:151
msgid ""
":ref:`rset<class_Node_rset>` **(** :ref:`String<class_string>` property, "
":ref:`Variant<class_variant>` value **)**"
msgstr ""

#: ../../classes/class_node.rst:153
msgid ""
":ref:`rset_config<class_Node_rset_config>` **(** "
":ref:`String<class_string>` property, :ref:`int<class_int>` mode **)**"
msgstr ""

#: ../../classes/class_node.rst:155
msgid ""
":ref:`rset_id<class_Node_rset_id>` **(** :ref:`int<class_int>` peer_id, "
":ref:`String<class_string>` property, :ref:`Variant<class_variant>` value"
" **)**"
msgstr ""

#: ../../classes/class_node.rst:157
msgid ""
":ref:`rset_unreliable<class_Node_rset_unreliable>` **(** "
":ref:`String<class_string>` property, :ref:`Variant<class_variant>` value"
" **)**"
msgstr ""

#: ../../classes/class_node.rst:159
msgid ""
":ref:`rset_unreliable_id<class_Node_rset_unreliable_id>` **(** "
":ref:`int<class_int>` peer_id, :ref:`String<class_string>` property, "
":ref:`Variant<class_variant>` value **)**"
msgstr ""

#: ../../classes/class_node.rst:161
msgid ""
":ref:`set_display_folded<class_Node_set_display_folded>` **(** "
":ref:`bool<class_bool>` fold **)**"
msgstr ""

#: ../../classes/class_node.rst:163
msgid ""
":ref:`set_network_master<class_Node_set_network_master>` **(** "
":ref:`int<class_int>` id, :ref:`bool<class_bool>` recursive=true **)**"
msgstr ""

#: ../../classes/class_node.rst:165
msgid ""
":ref:`set_physics_process<class_Node_set_physics_process>` **(** "
":ref:`bool<class_bool>` enable **)**"
msgstr ""

#: ../../classes/class_node.rst:167
msgid ""
":ref:`set_physics_process_internal<class_Node_set_physics_process_internal>`"
" **(** :ref:`bool<class_bool>` enable **)**"
msgstr ""

#: ../../classes/class_node.rst:169
msgid ""
":ref:`set_process<class_Node_set_process>` **(** :ref:`bool<class_bool>` "
"enable **)**"
msgstr ""

#: ../../classes/class_node.rst:171
msgid ""
":ref:`set_process_input<class_Node_set_process_input>` **(** "
":ref:`bool<class_bool>` enable **)**"
msgstr ""

#: ../../classes/class_node.rst:173
msgid ""
":ref:`set_process_internal<class_Node_set_process_internal>` **(** "
":ref:`bool<class_bool>` enable **)**"
msgstr ""

#: ../../classes/class_node.rst:175
msgid ""
":ref:`set_process_unhandled_input<class_Node_set_process_unhandled_input>`"
" **(** :ref:`bool<class_bool>` enable **)**"
msgstr ""

#: ../../classes/class_node.rst:177
msgid ""
":ref:`set_process_unhandled_key_input<class_Node_set_process_unhandled_key_input>`"
" **(** :ref:`bool<class_bool>` enable **)**"
msgstr ""

#: ../../classes/class_node.rst:179
msgid ""
":ref:`set_scene_instance_load_placeholder<class_Node_set_scene_instance_load_placeholder>`"
" **(** :ref:`bool<class_bool>` load_placeholder **)**"
msgstr ""

#: ../../classes/class_node.rst:183
msgid "Signals"
msgstr ""

#: ../../classes/class_node.rst:187
msgid "**renamed** **(** **)**"
msgstr ""

#: ../../classes/class_node.rst:189
msgid "Emitted when the node is renamed."
msgstr ""

#: ../../classes/class_node.rst:193
msgid "**tree_entered** **(** **)**"
msgstr ""

#: ../../classes/class_node.rst:195
msgid "Emitted when the node enters the tree."
msgstr ""

#: ../../classes/class_node.rst:199
msgid "**tree_exited** **(** **)**"
msgstr ""

#: ../../classes/class_node.rst:201
msgid "Emitted after the node exits the tree and is no longer active."
msgstr ""

#: ../../classes/class_node.rst:205
msgid "**tree_exiting** **(** **)**"
msgstr ""

#: ../../classes/class_node.rst:207
msgid ""
"Emitted when the node is still active but about to exit the tree. This is"
" the right place for de-initialization."
msgstr ""

#: ../../classes/class_node.rst:211
msgid "Member Variables"
msgstr ""

#: ../../classes/class_node.rst:215
msgid ""
":ref:`String<class_string>` **filename** - When a scene is instanced from"
" a file, its topmost node contains the filename from which it was loaded."
msgstr ""

#: ../../classes/class_node.rst:219
msgid ""
":ref:`String<class_string>` **name** - The name of the node. This name is"
" unique among the siblings (other child nodes from the same parent)."
msgstr ""

#: ../../classes/class_node.rst:221
msgid "When set to an existing name, the node will be automatically renamed"
msgstr ""

#: ../../classes/class_node.rst:225
msgid ""
":ref:`Node<class_node>` **owner** - The node owner. A node can have any "
"other node as owner (as long as it is a valid parent, grandparent, etc. "
"ascending in the tree). When saving a node (using SceneSaver) all the "
"nodes it owns will be saved with it. This allows for the creation of "
"complex :ref:`SceneTree<class_scenetree>`\\ s, with instancing and "
"subinstancing."
msgstr ""

#: ../../classes/class_node.rst:229
msgid ":ref:`PauseMode<enum_node_pausemode>` **pause_mode**"
msgstr ""

#: ../../classes/class_node.rst:233
msgid "Numeric Constants"
msgstr ""

#: ../../classes/class_node.rst:235
msgid ""
"**NOTIFICATION_ENTER_TREE** = **10** --- Notification received when the "
"node enters a :ref:`SceneTree<class_scenetree>`."
msgstr ""

#: ../../classes/class_node.rst:236
msgid ""
"**NOTIFICATION_EXIT_TREE** = **11** --- Notification received when the "
"node is about to exit a :ref:`SceneTree<class_scenetree>`."
msgstr ""

#: ../../classes/class_node.rst:237
msgid ""
"**NOTIFICATION_MOVED_IN_PARENT** = **12** --- Notification received when "
"the node is moved in the parent."
msgstr ""

#: ../../classes/class_node.rst:238
msgid ""
"**NOTIFICATION_READY** = **13** --- Notification received when the node "
"is ready. See :ref:`_ready<class_Node__ready>`."
msgstr ""

#: ../../classes/class_node.rst:239
msgid ""
"**NOTIFICATION_PAUSED** = **14** --- Notification received when the node "
"is paused."
msgstr ""

#: ../../classes/class_node.rst:240
msgid ""
"**NOTIFICATION_UNPAUSED** = **15** --- Notification received when the "
"node is unpaused."
msgstr ""

#: ../../classes/class_node.rst:241
msgid ""
"**NOTIFICATION_PHYSICS_PROCESS** = **16** --- Notification received every"
" frame when the physics process flag is set (see "
":ref:`set_physics_process<class_Node_set_physics_process>`)."
msgstr ""

#: ../../classes/class_node.rst:242
msgid ""
"**NOTIFICATION_PROCESS** = **17** --- Notification received every frame "
"when the process flag is set (see "
":ref:`set_process<class_Node_set_process>`)."
msgstr ""

#: ../../classes/class_node.rst:243
msgid ""
"**NOTIFICATION_PARENTED** = **18** --- Notification received when a node "
"is set as a child of another node. Note that this doesn't mean that a "
"node entered the Scene Tree."
msgstr ""

#: ../../classes/class_node.rst:244
msgid ""
"**NOTIFICATION_UNPARENTED** = **19** --- Notification received when a "
"node is unparented (parent removed it from the list of children)."
msgstr ""

#: ../../classes/class_node.rst:245
msgid ""
"**NOTIFICATION_INSTANCED** = **20** --- Notification received when the "
"node is instanced."
msgstr ""

#: ../../classes/class_node.rst:246
msgid ""
"**NOTIFICATION_DRAG_BEGIN** = **21** --- Notification received when a "
"drag begins."
msgstr ""

#: ../../classes/class_node.rst:247
msgid ""
"**NOTIFICATION_DRAG_END** = **22** --- Notification received when a drag "
"ends."
msgstr ""

#: ../../classes/class_node.rst:248
msgid ""
"**NOTIFICATION_PATH_CHANGED** = **23** --- Notification received when the"
" node's :ref:`NodePath<class_nodepath>` changed."
msgstr ""

#: ../../classes/class_node.rst:249
msgid "**NOTIFICATION_TRANSLATION_CHANGED** = **24**"
msgstr ""

#: ../../classes/class_node.rst:250
msgid "**NOTIFICATION_INTERNAL_PROCESS** = **25**"
msgstr ""

#: ../../classes/class_node.rst:251
msgid "**NOTIFICATION_INTERNAL_PHYSICS_PROCESS** = **26**"
msgstr ""

#: ../../classes/class_node.rst:254
msgid "Enums"
msgstr ""

#: ../../classes/class_node.rst:258
msgid "enum **PauseMode**"
msgstr ""

#: ../../classes/class_node.rst:260
msgid ""
"**PAUSE_MODE_INHERIT** = **0** --- Inherits pause mode from parent. For "
"root node, it is equivalent to PAUSE_MODE_STOP."
msgstr ""

#: ../../classes/class_node.rst:261
msgid "**PAUSE_MODE_STOP** = **1** --- Stop processing when SceneTree is paused."
msgstr ""

#: ../../classes/class_node.rst:262
msgid ""
"**PAUSE_MODE_PROCESS** = **2** --- Continue to process regardless of "
"SceneTree pause state."
msgstr ""

#: ../../classes/class_node.rst:266
msgid "enum **RPCMode**"
msgstr ""

#: ../../classes/class_node.rst:268
msgid "**RPC_MODE_DISABLED** = **0**"
msgstr ""

#: ../../classes/class_node.rst:269
msgid "**RPC_MODE_REMOTE** = **1** --- Call a method remotely."
msgstr ""

#: ../../classes/class_node.rst:270
msgid "**RPC_MODE_SYNC** = **2** --- Call a method both remotely and locally."
msgstr ""

#: ../../classes/class_node.rst:271
msgid "**RPC_MODE_MASTER** = **3** --- Call a method if the Node is Master."
msgstr ""

#: ../../classes/class_node.rst:272
msgid "**RPC_MODE_SLAVE** = **4** --- Call a method if the Node is Slave."
msgstr ""

#: ../../classes/class_node.rst:276
msgid "enum **DuplicateFlags**"
msgstr ""

#: ../../classes/class_node.rst:278
msgid "**DUPLICATE_SIGNALS** = **1** --- Duplicate the node's signals."
msgstr ""

#: ../../classes/class_node.rst:279
msgid "**DUPLICATE_GROUPS** = **2** --- Duplicate the node's groups."
msgstr ""

#: ../../classes/class_node.rst:280
msgid "**DUPLICATE_SCRIPTS** = **4** --- Duplicate the node's scripts."
msgstr ""

#: ../../classes/class_node.rst:281
msgid "**DUPLICATE_USE_INSTANCING** = **8** --- Duplicate using instancing."
msgstr ""

#: ../../classes/class_node.rst:285
msgid "Description"
msgstr ""

#: ../../classes/class_node.rst:287
msgid ""
"Nodes are Godot's building blocks. They can be assigned as the child of "
"another node, resulting in a tree arrangement. A given node can contain "
"any number of nodes as children with the requirement that all siblings "
"(direct children of a node) should have unique names."
msgstr ""

#: ../../classes/class_node.rst:289
msgid ""
"A tree of nodes is called a *scene*. Scenes can be saved to the disk and "
"then instanced into other scenes. This allows for very high flexibility "
"in the architecture and data model of Godot projects. Nodes can also "
"optionally be added to groups. This makes it possible to access a number "
"of nodes from code (an \"enemies\" group, for example) to perform grouped"
" actions."
msgstr ""

#: ../../classes/class_node.rst:291
msgid ""
"**Scene tree:** The :ref:`SceneTree<class_scenetree>` contains the active"
" tree of nodes. When a node is added to the scene tree, it receives the "
"NOTIFICATION_ENTER_TREE notification and its "
":ref:`_enter_tree<class_Node__enter_tree>` callback is triggered. Child "
"nodes are always added *after* their parent node, i.e. the "
":ref:`_enter_tree<class_Node__enter_tree>` callback of a parent node will"
" be triggered before its child's."
msgstr ""

#: ../../classes/class_node.rst:293
msgid ""
"Once all nodes have been added in the scene tree, they receive the "
"NOTIFICATION_READY notification and their respective "
":ref:`_ready<class_Node__ready>` callbacks are triggered. For groups of "
"nodes, the :ref:`_ready<class_Node__ready>` callback is called in reverse"
" order, starting with the children and moving up to the parent nodes."
msgstr ""

#: ../../classes/class_node.rst:295
msgid ""
"This means that when adding a node to the scene tree, the following order"
" will be used for the callbacks: "
":ref:`_enter_tree<class_Node__enter_tree>` of the parent, "
":ref:`_enter_tree<class_Node__enter_tree>` of the children, "
":ref:`_ready<class_Node__ready>` of the children and finally "
":ref:`_ready<class_Node__ready>` of the parent (recursively for the "
"entire scene tree)."
msgstr ""

#: ../../classes/class_node.rst:297
msgid ""
"**Processing:** Nodes can override the \"process\" state, so that they "
"receive a callback on each frame requesting them to process (do "
"something). Normal processing (callback "
":ref:`_process<class_Node__process>`, toggled with "
":ref:`set_process<class_Node_set_process>`) happens as fast as possible "
"and is dependent on the frame rate, so the processing time *delta* is "
"passed as an argument. Physics processing (callback "
":ref:`_physics_process<class_Node__physics_process>`, toggled with "
":ref:`set_physics_process<class_Node_set_physics_process>`) happens a "
"fixed number of times per second (60 by default) and is useful for code "
"related to the physics engine."
msgstr ""

#: ../../classes/class_node.rst:299
msgid ""
"Nodes can also process input events. When present, the "
":ref:`_input<class_Node__input>` function will be called for each input "
"that the program receives. In many cases, this can be overkill (unless "
"used for simple projects), and the "
":ref:`_unhandled_input<class_Node__unhandled_input>` function might be "
"preferred; it is called when the input event was not handled by anyone "
"else (typically, GUI :ref:`Control<class_control>` nodes), ensuring that "
"the node only receives the events that were meant for it."
msgstr ""

#: ../../classes/class_node.rst:301
msgid ""
"To keep track of the scene hierarchy (especially when instancing scenes "
"into other scenes), an \"owner\" can be set for the node with "
":ref:`set_owner<class_Node_set_owner>`. This keeps track of who instanced"
" what. This is mostly useful when writing editors and tools, though."
msgstr ""

#: ../../classes/class_node.rst:303
msgid ""
"Finally, when a node is freed with :ref:`free<class_Node_free>` or "
":ref:`queue_free<class_Node_queue_free>`, it will also free all its "
"children."
msgstr ""

#: ../../classes/class_node.rst:305
msgid ""
"**Networking with nodes:** After connecting to a server (or making one, "
"see :ref:`NetworkedMultiplayerENet<class_networkedmultiplayerenet>`) it "
"is possible to use the built-in RPC (remote procedure call) system to "
"communicate over the network. By calling :ref:`rpc<class_Node_rpc>` with "
"a method name, it will be called locally and in all connected peers "
"(peers = clients and the server that accepts connections), with behaviour"
" varying depending on the network mode "
"(:ref:`set_network_mode<class_Node_set_network_mode>`) of the receiving "
"peer. To identify which node receives the RPC call Godot will use its "
":ref:`NodePath<class_nodepath>` (make sure node names are the same on all"
" peers)."
msgstr ""

#: ../../classes/class_node.rst:308
msgid "Member Function Description"
msgstr ""

#: ../../classes/class_node.rst:312
msgid "void **_enter_tree** **(** **)** virtual"
msgstr ""

#: ../../classes/class_node.rst:314
msgid ""
"Called when the node enters the :ref:`SceneTree<class_scenetree>` (e.g. "
"upon instancing, scene changing, or after calling "
":ref:`add_child<class_Node_add_child>` in a script). If the node has "
"children, its :ref:`_enter_tree<class_Node__enter_tree>` callback will be"
" called first, and then that of the children."
msgstr ""

#: ../../classes/class_node.rst:316
msgid ""
"Corresponds to the NOTIFICATION_ENTER_TREE notification in "
":ref:`Object._notification<class_Object__notification>`."
msgstr ""

#: ../../classes/class_node.rst:320
msgid "void **_exit_tree** **(** **)** virtual"
msgstr ""

#: ../../classes/class_node.rst:322
msgid ""
"Called when the node is about to leave the "
":ref:`SceneTree<class_scenetree>` (e.g. upon freeing, scene changing, or "
"after calling :ref:`remove_child<class_Node_remove_child>` in a script). "
"If the node has children, its :ref:`_exit_tree<class_Node__exit_tree>` "
"callback will be called last, after all its children have left the tree."
msgstr ""

#: ../../classes/class_node.rst:324
msgid ""
"Corresponds to the NOTIFICATION_EXIT_TREE notification in "
":ref:`Object._notification<class_Object__notification>` and signal "
":ref:`tree_exiting<class_Node_tree_exiting>`. To get notified when the "
"node has already left the active tree, connect to the "
":ref:`tree_exited<class_Node_tree_exited>`"
msgstr ""

#: ../../classes/class_node.rst:328
msgid ""
"void **_input** **(** :ref:`InputEvent<class_inputevent>` event **)** "
"virtual"
msgstr ""

#: ../../classes/class_node.rst:330
msgid ""
"Called when there is an input event. The input event propagates through "
"the node tree until a node consumes it."
msgstr ""

#: ../../classes/class_node.rst:332
msgid ""
"It is only called if input processing is enabled, which is done "
"automatically if this method is overridden, and can be toggled with "
":ref:`set_process_input<class_Node_set_process_input>`."
msgstr ""

#: ../../classes/class_node.rst:336
msgid ""
"void **_physics_process** **(** :ref:`float<class_float>` delta **)** "
"virtual"
msgstr ""

#: ../../classes/class_node.rst:338
msgid ""
"Called during the physics processing step of the main loop. Physics "
"processing means that the frame rate is synced to the physics, i.e. the "
"``delta`` variable should be constant."
msgstr ""

#: ../../classes/class_node.rst:340
msgid ""
"It is only called if physics processing is enabled, which is done "
"automatically if this method is overridden, and can be toggled with "
":ref:`set_physics_process<class_Node_set_physics_process>`."
msgstr ""

#: ../../classes/class_node.rst:342
msgid ""
"Corresponds to the NOTIFICATION_PHYSICS_PROCESS notification in "
":ref:`Object._notification<class_Object__notification>`."
msgstr ""

#: ../../classes/class_node.rst:346
msgid "void **_process** **(** :ref:`float<class_float>` delta **)** virtual"
msgstr ""

#: ../../classes/class_node.rst:348
msgid ""
"Called during the processing step of the main loop. Processing happens at"
" every frame and as fast as possible, so the ``delta`` time since the "
"previous frame is not constant."
msgstr ""

#: ../../classes/class_node.rst:350
msgid ""
"It is only called if processing is enabled, which is done automatically "
"if this method is overridden, and can be toggled with "
":ref:`set_process<class_Node_set_process>`."
msgstr ""

#: ../../classes/class_node.rst:352
msgid ""
"Corresponds to the NOTIFICATION_PROCESS notification in "
":ref:`Object._notification<class_Object__notification>`."
msgstr ""

#: ../../classes/class_node.rst:356
msgid "void **_ready** **(** **)** virtual"
msgstr ""

#: ../../classes/class_node.rst:358
msgid ""
"Called when the node is \"ready\", i.e. when both the node and its "
"children have entered the scene tree. If the node has children, their "
":ref:`_ready<class_Node__ready>` callbacks get triggered first, and the "
"parent node will receive the ready notification afterwards."
msgstr ""

#: ../../classes/class_node.rst:360
msgid ""
"Corresponds to the NOTIFICATION_READY notification in "
":ref:`Object._notification<class_Object__notification>`."
msgstr ""

#: ../../classes/class_node.rst:364
msgid ""
"void **_unhandled_input** **(** :ref:`InputEvent<class_inputevent>` event"
" **)** virtual"
msgstr ""

#: ../../classes/class_node.rst:366
msgid ""
"Propagated to all nodes when the previous InputEvent is not consumed by "
"any nodes."
msgstr ""

#: ../../classes/class_node.rst:368
msgid ""
"It is only called if unhandled input processing is enabled, which is done"
" automatically if this method is overridden, and can be toggled with "
":ref:`set_process_unhandled_input<class_Node_set_process_unhandled_input>`."
msgstr ""

#: ../../classes/class_node.rst:372
msgid ""
"void **_unhandled_key_input** **(** "
":ref:`InputEventKey<class_inputeventkey>` event **)** virtual"
msgstr ""

#: ../../classes/class_node.rst:376
msgid ""
"void **add_child** **(** :ref:`Node<class_node>` node, "
":ref:`bool<class_bool>` legible_unique_name=false **)**"
msgstr ""

#: ../../classes/class_node.rst:378
msgid ""
"Adds a child node. Nodes can have any number of children, but every child"
" must have a unique name. Child nodes are automatically deleted when the "
"parent node is deleted, so an entire scene can be removed by deleting its"
" topmost node."
msgstr ""

#: ../../classes/class_node.rst:380 ../../classes/class_node.rst:388
msgid ""
"Setting \"legible_unique_name\" ``true`` creates child nodes with human-"
"readable names, based on the name of the node being instanced instead of "
"its type."
msgstr ""

#: ../../classes/class_node.rst:384
msgid ""
"void **add_child_below_node** **(** :ref:`Node<class_node>` node, "
":ref:`Node<class_node>` child_node, :ref:`bool<class_bool>` "
"legible_unique_name=false **)**"
msgstr ""

#: ../../classes/class_node.rst:386
msgid ""
"Adds a child node. The child is placed below the given node in the list "
"of children."
msgstr ""

#: ../../classes/class_node.rst:392
msgid ""
"void **add_to_group** **(** :ref:`String<class_string>` group, "
":ref:`bool<class_bool>` persistent=false **)**"
msgstr ""

#: ../../classes/class_node.rst:394
msgid ""
"Adds the node to a group. Groups are helpers to name and organize a "
"subset of nodes, for example \"enemies\" or \"collectables\". A node can "
"be in any number of groups. Nodes can be assigned a group at any time, "
"but will not be added until they are inside the scene tree (see "
":ref:`is_inside_tree<class_Node_is_inside_tree>`)."
msgstr ""

#: ../../classes/class_node.rst:398
msgid ":ref:`bool<class_bool>` **can_process** **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:400
msgid ""
"Returns ``true`` if the node can process while the scene tree is paused "
"(see :ref:`set_pause_mode<class_Node_set_pause_mode>`). Always returns "
"``true`` if the scene tree is not paused, and ``false`` if the node is "
"not in the tree. FIXME: Why FAIL_COND?"
msgstr ""

#: ../../classes/class_node.rst:404
msgid ""
":ref:`Node<class_node>` **duplicate** **(** :ref:`int<class_int>` "
"flags=15 **)** const"
msgstr ""

#: ../../classes/class_node.rst:406
msgid "Duplicates the node, returning a new node."
msgstr ""

#: ../../classes/class_node.rst:408
msgid ""
"You can fine-tune the behavior using the ``flags``. See DUPLICATE\\_\\* "
"constants."
msgstr ""

#: ../../classes/class_node.rst:412
msgid ""
":ref:`Node<class_node>` **find_node** **(** :ref:`String<class_string>` "
"mask, :ref:`bool<class_bool>` recursive=true, :ref:`bool<class_bool>` "
"owned=true **)** const"
msgstr ""

#: ../../classes/class_node.rst:414
msgid ""
"Finds a descendant of this node whose name matches ``mask`` as in "
":ref:`String.match<class_String_match>` (i.e. case sensitive, but '\\*' "
"matches zero or more characters and '?' matches any single character "
"except '.'). Note that it does not match against the full path, just "
"against individual node names."
msgstr ""

#: ../../classes/class_node.rst:418
msgid ""
":ref:`Node<class_node>` **get_child** **(** :ref:`int<class_int>` idx "
"**)** const"
msgstr ""

#: ../../classes/class_node.rst:420
msgid ""
"Returns a child node by its index (see "
":ref:`get_child_count<class_Node_get_child_count>`). This method is often"
" used for iterating all children of a node."
msgstr ""

#: ../../classes/class_node.rst:424
msgid ":ref:`int<class_int>` **get_child_count** **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:426
msgid "Returns the number of child nodes."
msgstr ""

#: ../../classes/class_node.rst:430
msgid ":ref:`Array<class_array>` **get_children** **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:432
msgid "Returns an array of references to node's children."
msgstr ""

#: ../../classes/class_node.rst:436
msgid ":ref:`Array<class_array>` **get_groups** **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:438
msgid "Returns an array listing the groups that the node is a member of."
msgstr ""

#: ../../classes/class_node.rst:442
msgid ":ref:`int<class_int>` **get_index** **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:444
msgid ""
"Returns the node's index, i.e. its position among the siblings of its "
"parent."
msgstr ""

#: ../../classes/class_node.rst:448
msgid ":ref:`int<class_int>` **get_network_master** **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:450
msgid "Returns the peer ID of the network master for this node."
msgstr ""

#: ../../classes/class_node.rst:454
msgid ""
":ref:`Node<class_node>` **get_node** **(** "
":ref:`NodePath<class_nodepath>` path **)** const"
msgstr ""

#: ../../classes/class_node.rst:456
msgid ""
"Fetches a node. The :ref:`NodePath<class_nodepath>` can be either a "
"relative path (from the current node) or an absolute path (in the scene "
"tree) to a node. If the path does not exist, a ``null instance`` is "
"returned and attempts to access it will result in an \"Attempt to call "
"<method> on a null instance.\" error."
msgstr ""

#: ../../classes/class_node.rst:458
msgid ""
"Note: fetching absolute paths only works when the node is inside the "
"scene tree (see :ref:`is_inside_tree<class_Node_is_inside_tree>`)."
msgstr ""

#: ../../classes/class_node.rst:460
msgid "*Example:* Assume your current node is Character and the following tree:"
msgstr ""

#: ../../classes/class_node.rst:473
msgid "Possible paths are:"
msgstr ""

#: ../../classes/class_node.rst:484
msgid ""
":ref:`Array<class_array>` **get_node_and_resource** **(** "
":ref:`NodePath<class_nodepath>` path **)**"
msgstr ""

#: ../../classes/class_node.rst:488
msgid ":ref:`Node<class_node>` **get_parent** **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:490
msgid ""
"Returns the parent node of the current node, or an empty ``Node`` if the "
"node lacks a parent."
msgstr ""

#: ../../classes/class_node.rst:494
msgid ":ref:`NodePath<class_nodepath>` **get_path** **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:496
msgid ""
"Returns the absolute path of the current node. This only works if the "
"current node is inside the scene tree (see "
":ref:`is_inside_tree<class_Node_is_inside_tree>`)."
msgstr ""

#: ../../classes/class_node.rst:500
msgid ""
":ref:`NodePath<class_nodepath>` **get_path_to** **(** "
":ref:`Node<class_node>` node **)** const"
msgstr ""

#: ../../classes/class_node.rst:502
msgid ""
"Returns the relative path from the current node to the specified node in "
"\"node\" argument. Both nodes must be in the same scene, or the function "
"will fail."
msgstr ""

#: ../../classes/class_node.rst:506
msgid ""
":ref:`float<class_float>` **get_physics_process_delta_time** **(** **)** "
"const"
msgstr ""

#: ../../classes/class_node.rst:508
msgid ""
"Returns the time elapsed since the last physics-bound frame (see "
":ref:`_physics_process<class_Node__physics_process>`). This is always a "
"constant value in physics processing unless the frames per second is "
"changed in :ref:`OS<class_os>`."
msgstr ""

#: ../../classes/class_node.rst:512
msgid ":ref:`int<class_int>` **get_position_in_parent** **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:514
msgid ""
"Returns the node's order in the scene tree branch. For example, if called"
" on the first child node the position is ``0``."
msgstr ""

#: ../../classes/class_node.rst:518
msgid ":ref:`float<class_float>` **get_process_delta_time** **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:520
msgid ""
"Returns the time elapsed (in seconds) since the last process callback. "
"This value may vary from frame to frame."
msgstr ""

#: ../../classes/class_node.rst:524
msgid ""
":ref:`bool<class_bool>` **get_scene_instance_load_placeholder** **(** "
"**)** const"
msgstr ""

#: ../../classes/class_node.rst:528
msgid ":ref:`SceneTree<class_scenetree>` **get_tree** **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:530
msgid "Returns the :ref:`SceneTree<class_scenetree>` that contains this node."
msgstr ""

#: ../../classes/class_node.rst:534
msgid ":ref:`Viewport<class_viewport>` **get_viewport** **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:536
msgid "Returns the node's :ref:`Viewport<class_viewport>`."
msgstr ""

#: ../../classes/class_node.rst:540
msgid ""
":ref:`bool<class_bool>` **has_node** **(** "
":ref:`NodePath<class_nodepath>` path **)** const"
msgstr ""

#: ../../classes/class_node.rst:542
msgid ""
"Returns ``true`` if the node that the :ref:`NodePath<class_nodepath>` "
"points to exists."
msgstr ""

#: ../../classes/class_node.rst:546
msgid ""
":ref:`bool<class_bool>` **has_node_and_resource** **(** "
":ref:`NodePath<class_nodepath>` path **)** const"
msgstr ""

#: ../../classes/class_node.rst:550
msgid ""
":ref:`bool<class_bool>` **is_a_parent_of** **(** :ref:`Node<class_node>` "
"node **)** const"
msgstr ""

#: ../../classes/class_node.rst:552
msgid ""
"Returns ``true`` if the given node is a direct or indirect child of the "
"current node."
msgstr ""

#: ../../classes/class_node.rst:556
msgid ":ref:`bool<class_bool>` **is_displayed_folded** **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:558
msgid "Returns ``true`` if the node is folded (collapsed) in the Scene dock."
msgstr ""

#: ../../classes/class_node.rst:562
msgid ""
":ref:`bool<class_bool>` **is_greater_than** **(** :ref:`Node<class_node>`"
" node **)** const"
msgstr ""

#: ../../classes/class_node.rst:564
msgid ""
"Returns ``true`` if the given node occurs later in the scene hierarchy "
"than the current node."
msgstr ""

#: ../../classes/class_node.rst:568
msgid ""
":ref:`bool<class_bool>` **is_in_group** **(** :ref:`String<class_string>`"
" group **)** const"
msgstr ""

#: ../../classes/class_node.rst:570
msgid "Returns ``true`` if this node is in the specified group."
msgstr ""

#: ../../classes/class_node.rst:574
msgid ":ref:`bool<class_bool>` **is_inside_tree** **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:576
msgid ""
"Returns ``true`` if this node is currently inside a "
":ref:`SceneTree<class_scenetree>`."
msgstr ""

#: ../../classes/class_node.rst:580
msgid ":ref:`bool<class_bool>` **is_network_master** **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:584
msgid ":ref:`bool<class_bool>` **is_physics_processing** **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:586
msgid ""
"Returns ``true`` if physics processing is enabled (see "
":ref:`set_physics_process<class_Node_set_physics_process>`)."
msgstr ""

#: ../../classes/class_node.rst:590
msgid ""
":ref:`bool<class_bool>` **is_physics_processing_internal** **(** **)** "
"const"
msgstr ""

#: ../../classes/class_node.rst:594
msgid ":ref:`bool<class_bool>` **is_processing** **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:596
msgid ""
"Returns ``true`` if processing is enabled (see "
":ref:`set_process<class_Node_set_process>`)."
msgstr ""

#: ../../classes/class_node.rst:600
msgid ":ref:`bool<class_bool>` **is_processing_input** **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:602
msgid ""
"Returns ``true`` if the node is processing input (see "
":ref:`set_process_input<class_Node_set_process_input>`)."
msgstr ""

#: ../../classes/class_node.rst:606
msgid ":ref:`bool<class_bool>` **is_processing_internal** **(** **)** const"
msgstr ""

#: ../../classes/class_node.rst:610
msgid ""
":ref:`bool<class_bool>` **is_processing_unhandled_input** **(** **)** "
"const"
msgstr ""

#: ../../classes/class_node.rst:612
msgid ""
"Returns ``true`` if the node is processing unhandled input (see "
":ref:`set_process_unhandled_input<class_Node_set_process_unhandled_input>`)."
msgstr ""

#: ../../classes/class_node.rst:616
msgid ""
":ref:`bool<class_bool>` **is_processing_unhandled_key_input** **(** **)**"
" const"
msgstr ""

#: ../../classes/class_node.rst:618
msgid ""
"Returns ``true`` if the node is processing unhandled key input (see "
":ref:`set_process_unhandled_key_input<class_Node_set_process_unhandled_key_input>`)."
msgstr ""

#: ../../classes/class_node.rst:622
msgid ""
"void **move_child** **(** :ref:`Node<class_node>` child_node, "
":ref:`int<class_int>` to_position **)**"
msgstr ""

#: ../../classes/class_node.rst:624
msgid ""
"Moves a child node to a different position (order) amongst the other "
"children. Since calls, signals, etc are performed by tree order, changing"
" the order of children nodes may be useful."
msgstr ""

#: ../../classes/class_node.rst:628
msgid "void **print_stray_nodes** **(** **)**"
msgstr ""

#: ../../classes/class_node.rst:632
msgid "void **print_tree** **(** **)**"
msgstr ""

#: ../../classes/class_node.rst:634
msgid "Prints the scene to stdout. Used mainly for debugging purposes."
msgstr ""

#: ../../classes/class_node.rst:638
msgid ""
"void **propagate_call** **(** :ref:`String<class_string>` method, "
":ref:`Array<class_array>` args=[  ], :ref:`bool<class_bool>` "
"parent_first=false **)**"
msgstr ""

#: ../../classes/class_node.rst:640
msgid ""
"Calls the given method (if present) with the arguments given in ``args`` "
"on this node and recursively on all its children. If the parent_first "
"argument is ``true`` then the method will be called on the current node "
"first, then on all children. If it is ``false`` then the children will be"
" called first."
msgstr ""

#: ../../classes/class_node.rst:644
msgid "void **propagate_notification** **(** :ref:`int<class_int>` what **)**"
msgstr ""

#: ../../classes/class_node.rst:646
msgid ""
"Notifies the current node and all its children recursively by calling "
"notification() on all of them."
msgstr ""

#: ../../classes/class_node.rst:650
msgid "void **queue_free** **(** **)**"
msgstr ""

#: ../../classes/class_node.rst:652
msgid ""
"Queues a node for deletion at the end of the current frame. When deleted,"
" all of its child nodes will be deleted as well. This method ensures it's"
" safe to delete the node, contrary to "
":ref:`Object.free<class_Object_free>`. Use "
":ref:`Object.is_queued_for_deletion<class_Object_is_queued_for_deletion>`"
" to check whether a node will be deleted at the end of the frame."
msgstr ""

#: ../../classes/class_node.rst:656
msgid "void **raise** **(** **)**"
msgstr ""

#: ../../classes/class_node.rst:658
msgid ""
"Moves this node to the top of the array of nodes of the parent node. This"
" is often useful in GUIs (:ref:`Control<class_control>` nodes), because "
"their order of drawing depends on their order in the tree."
msgstr ""

#: ../../classes/class_node.rst:662
msgid "void **remove_and_skip** **(** **)**"
msgstr ""

#: ../../classes/class_node.rst:664
msgid ""
"Removes a node and sets all its children as children of the parent node "
"(if it exists). All event subscriptions that pass by the removed node "
"will be unsubscribed."
msgstr ""

#: ../../classes/class_node.rst:668
msgid "void **remove_child** **(** :ref:`Node<class_node>` node **)**"
msgstr ""

#: ../../classes/class_node.rst:670
msgid ""
"Removes a child node. The node is NOT deleted and must be deleted "
"manually."
msgstr ""

#: ../../classes/class_node.rst:674
msgid "void **remove_from_group** **(** :ref:`String<class_string>` group **)**"
msgstr ""

#: ../../classes/class_node.rst:676
msgid "Removes a node from a group."
msgstr ""

#: ../../classes/class_node.rst:680
msgid ""
"void **replace_by** **(** :ref:`Node<class_node>` node, "
":ref:`bool<class_bool>` keep_data=false **)**"
msgstr ""

#: ../../classes/class_node.rst:682
msgid ""
"Replaces a node in a scene by the given one. Subscriptions that pass "
"through this node will be lost."
msgstr ""

#: ../../classes/class_node.rst:686
msgid "void **request_ready** **(** **)**"
msgstr ""

#: ../../classes/class_node.rst:688
msgid "Requests that ``_ready`` be called again."
msgstr ""

#: ../../classes/class_node.rst:692
msgid ""
":ref:`Variant<class_variant>` **rpc** **(** :ref:`String<class_string>` "
"method **)** vararg"
msgstr ""

#: ../../classes/class_node.rst:694
msgid ""
"Sends a remote procedure call request to all peers on the network (and "
"locally), optionally sending additional data as arguments. Call request "
"will be received by nodes with the same :ref:`NodePath<class_nodepath>`."
msgstr ""

#: ../../classes/class_node.rst:698
msgid ""
"void **rpc_config** **(** :ref:`String<class_string>` method, "
":ref:`int<class_int>` mode **)**"
msgstr ""

#: ../../classes/class_node.rst:700
msgid "Changes the method's RPC mode (one of RPC_MODE\\_\\* constants)."
msgstr ""

#: ../../classes/class_node.rst:704
msgid ""
":ref:`Variant<class_variant>` **rpc_id** **(** :ref:`int<class_int>` "
"peer_id, :ref:`String<class_string>` method **)** vararg"
msgstr ""

#: ../../classes/class_node.rst:706
msgid ""
"Sends a :ref:`rpc<class_Node_rpc>` to a specific peer identified by "
"*peer_id*."
msgstr ""

#: ../../classes/class_node.rst:710
msgid ""
":ref:`Variant<class_variant>` **rpc_unreliable** **(** "
":ref:`String<class_string>` method **)** vararg"
msgstr ""

#: ../../classes/class_node.rst:712
msgid "Sends a :ref:`rpc<class_Node_rpc>` using an unreliable protocol."
msgstr ""

#: ../../classes/class_node.rst:716
msgid ""
":ref:`Variant<class_variant>` **rpc_unreliable_id** **(** "
":ref:`int<class_int>` peer_id, :ref:`String<class_string>` method **)** "
"vararg"
msgstr ""

#: ../../classes/class_node.rst:718
msgid ""
"Sends a :ref:`rpc<class_Node_rpc>` to a specific peer identified by "
"*peer_id* using an unreliable protocol."
msgstr ""

#: ../../classes/class_node.rst:722
msgid ""
"void **rset** **(** :ref:`String<class_string>` property, "
":ref:`Variant<class_variant>` value **)**"
msgstr ""

#: ../../classes/class_node.rst:724
msgid "Remotely changes property's value on other peers (and locally)."
msgstr ""

#: ../../classes/class_node.rst:728
msgid ""
"void **rset_config** **(** :ref:`String<class_string>` property, "
":ref:`int<class_int>` mode **)**"
msgstr ""

#: ../../classes/class_node.rst:730
msgid "Changes the property's RPC mode (one of RPC_MODE\\_\\* constants)."
msgstr ""

#: ../../classes/class_node.rst:734
msgid ""
"void **rset_id** **(** :ref:`int<class_int>` peer_id, "
":ref:`String<class_string>` property, :ref:`Variant<class_variant>` value"
" **)**"
msgstr ""

#: ../../classes/class_node.rst:736
msgid ""
"Remotely changes property's value on a specific peer identified by "
"*peer_id*."
msgstr ""

#: ../../classes/class_node.rst:740
msgid ""
"void **rset_unreliable** **(** :ref:`String<class_string>` property, "
":ref:`Variant<class_variant>` value **)**"
msgstr ""

#: ../../classes/class_node.rst:742
msgid ""
"Remotely changes property's value on other peers (and locally) using an "
"unreliable protocol."
msgstr ""

#: ../../classes/class_node.rst:746
msgid ""
"void **rset_unreliable_id** **(** :ref:`int<class_int>` peer_id, "
":ref:`String<class_string>` property, :ref:`Variant<class_variant>` value"
" **)**"
msgstr ""

#: ../../classes/class_node.rst:748
msgid ""
"Remotely changes property's value on a specific peer identified by "
"*peer_id* using an unreliable protocol."
msgstr ""

#: ../../classes/class_node.rst:752
msgid "void **set_display_folded** **(** :ref:`bool<class_bool>` fold **)**"
msgstr ""

#: ../../classes/class_node.rst:754
msgid "Sets the folded state of the node in the Scene dock."
msgstr ""

#: ../../classes/class_node.rst:758
msgid ""
"void **set_network_master** **(** :ref:`int<class_int>` id, "
":ref:`bool<class_bool>` recursive=true **)**"
msgstr ""

#: ../../classes/class_node.rst:760
msgid ""
"Sets the node network master to the peer with the given peer ID. The "
"network master is the peer that has authority over it on the network. "
"Inherited from the parent node by default, which ultimately defaults to "
"peer ID 1 (the server)."
msgstr ""

#: ../../classes/class_node.rst:764
msgid "void **set_physics_process** **(** :ref:`bool<class_bool>` enable **)**"
msgstr ""

#: ../../classes/class_node.rst:766
msgid ""
"Enables or disables physics (i.e. fixed framerate) processing. When a "
"node is being processed, it will receive a NOTIFICATION_PHYSICS_PROCESS "
"at a fixed (usually 60 fps, see :ref:`OS<class_os>` to change) interval "
"(and the :ref:`_physics_process<class_Node__physics_process>` callback "
"will be called if exists). Enabled automatically if "
":ref:`_physics_process<class_Node__physics_process>` is overridden. Any "
"calls to this before :ref:`_ready<class_Node__ready>` will be ignored."
msgstr ""

#: ../../classes/class_node.rst:770
msgid ""
"void **set_physics_process_internal** **(** :ref:`bool<class_bool>` "
"enable **)**"
msgstr ""

#: ../../classes/class_node.rst:774
msgid "void **set_process** **(** :ref:`bool<class_bool>` enable **)**"
msgstr ""

#: ../../classes/class_node.rst:776
msgid ""
"Enables or disables processing. When a node is being processed, it will "
"receive a NOTIFICATION_PROCESS on every drawn frame (and the "
":ref:`_process<class_Node__process>` callback will be called if exists). "
"Enabled automatically if :ref:`_process<class_Node__process>` is "
"overridden. Any calls to this before :ref:`_ready<class_Node__ready>` "
"will be ignored."
msgstr ""

#: ../../classes/class_node.rst:780
msgid "void **set_process_input** **(** :ref:`bool<class_bool>` enable **)**"
msgstr ""

#: ../../classes/class_node.rst:782
msgid ""
"Enables or disables input processing. This is not required for GUI "
"controls! Enabled automatically if :ref:`_input<class_Node__input>` is "
"overridden. Any calls to this before :ref:`_ready<class_Node__ready>` "
"will be ignored."
msgstr ""

#: ../../classes/class_node.rst:786
msgid "void **set_process_internal** **(** :ref:`bool<class_bool>` enable **)**"
msgstr ""

#: ../../classes/class_node.rst:790
msgid ""
"void **set_process_unhandled_input** **(** :ref:`bool<class_bool>` enable"
" **)**"
msgstr ""

#: ../../classes/class_node.rst:792
msgid ""
"Enables unhandled input processing. This is not required for GUI "
"controls! It enables the node to receive all input that was not "
"previously handled (usually by a :ref:`Control<class_control>`). Enabled "
"automatically if :ref:`_unhandled_input<class_Node__unhandled_input>` is "
"overridden. Any calls to this before :ref:`_ready<class_Node__ready>` "
"will be ignored."
msgstr ""

#: ../../classes/class_node.rst:796
msgid ""
"void **set_process_unhandled_key_input** **(** :ref:`bool<class_bool>` "
"enable **)**"
msgstr ""

#: ../../classes/class_node.rst:798
msgid ""
"Enables unhandled key input processing. Enabled automatically if "
":ref:`_unhandled_key_input<class_Node__unhandled_key_input>` is "
"overridden. Any calls to this before :ref:`_ready<class_Node__ready>` "
"will be ignored."
msgstr ""

#: ../../classes/class_node.rst:802
msgid ""
"void **set_scene_instance_load_placeholder** **(** "
":ref:`bool<class_bool>` load_placeholder **)**"
msgstr ""

