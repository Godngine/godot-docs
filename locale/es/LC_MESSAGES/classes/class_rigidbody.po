# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot
# community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-28 16:44-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../classes/class_rigidbody.rst:8
msgid "RigidBody"
msgstr ""

#: ../../classes/class_rigidbody.rst:10
msgid ""
"**Inherits:** :ref:`PhysicsBody<class_physicsbody>` **<** "
":ref:`CollisionObject<class_collisionobject>` **<** "
":ref:`Spatial<class_spatial>` **<** :ref:`Node<class_node>` **<** "
":ref:`Object<class_object>`"
msgstr ""

#: ../../classes/class_rigidbody.rst:12
msgid "**Inherited By:** :ref:`VehicleBody<class_vehiclebody>`"
msgstr ""

#: ../../classes/class_rigidbody.rst:14
msgid "**Category:** Core"
msgstr ""

#: ../../classes/class_rigidbody.rst:17
msgid "Brief Description"
msgstr ""

#: ../../classes/class_rigidbody.rst:19
msgid ""
"Physics Body whose position is determined through physics simulation in "
"3D space."
msgstr ""

#: ../../classes/class_rigidbody.rst:22
msgid "Member Functions"
msgstr ""

#: ../../classes/class_rigidbody.rst:25 ../../classes/class_rigidbody.rst:27
#: ../../classes/class_rigidbody.rst:31
msgid "void"
msgstr ""

#: ../../classes/class_rigidbody.rst:25
msgid ""
":ref:`_integrate_forces<class_RigidBody__integrate_forces>` **(** "
":ref:`PhysicsDirectBodyState<class_physicsdirectbodystate>` state **)** "
"virtual"
msgstr ""

#: ../../classes/class_rigidbody.rst:27
msgid ""
":ref:`apply_impulse<class_RigidBody_apply_impulse>` **(** "
":ref:`Vector3<class_vector3>` position, :ref:`Vector3<class_vector3>` "
"impulse **)**"
msgstr ""

#: ../../classes/class_rigidbody.rst:29
msgid ":ref:`Array<class_array>`"
msgstr ""

#: ../../classes/class_rigidbody.rst:29
msgid ""
":ref:`get_colliding_bodies<class_RigidBody_get_colliding_bodies>` **(** "
"**)** const"
msgstr ""

#: ../../classes/class_rigidbody.rst:31
msgid ""
":ref:`set_axis_velocity<class_RigidBody_set_axis_velocity>` **(** "
":ref:`Vector3<class_vector3>` axis_velocity **)**"
msgstr ""

#: ../../classes/class_rigidbody.rst:35
msgid "Signals"
msgstr ""

#: ../../classes/class_rigidbody.rst:39
msgid "**body_entered** **(** :ref:`Object<class_object>` body **)**"
msgstr ""

#: ../../classes/class_rigidbody.rst:41 ../../classes/class_rigidbody.rst:53
msgid ""
"Emitted when a body enters into contact with this one. Contact monitor "
"and contacts reported must be enabled for this to work."
msgstr ""

#: ../../classes/class_rigidbody.rst:45
msgid "**body_exited** **(** :ref:`Object<class_object>` body **)**"
msgstr ""

#: ../../classes/class_rigidbody.rst:47 ../../classes/class_rigidbody.rst:61
msgid ""
"Emitted when a body shape exits contact with this one. Contact monitor "
"and contacts reported must be enabled for this to work."
msgstr ""

#: ../../classes/class_rigidbody.rst:51
msgid ""
"**body_shape_entered** **(** :ref:`int<class_int>` body_id, "
":ref:`Object<class_object>` body, :ref:`int<class_int>` body_shape, "
":ref:`int<class_int>` local_shape **)**"
msgstr ""

#: ../../classes/class_rigidbody.rst:55
msgid ""
"This signal not only receives the body that collided with this one, but "
"also its :ref:`RID<class_rid>` (body_id), the shape index from the "
"colliding body (body_shape), and the shape index from this body "
"(local_shape) the other body collided with."
msgstr ""

#: ../../classes/class_rigidbody.rst:59
msgid ""
"**body_shape_exited** **(** :ref:`int<class_int>` body_id, "
":ref:`Object<class_object>` body, :ref:`int<class_int>` body_shape, "
":ref:`int<class_int>` local_shape **)**"
msgstr ""

#: ../../classes/class_rigidbody.rst:63
msgid ""
"This signal not only receives the body that stopped colliding with this "
"one, but also its :ref:`RID<class_rid>` (body_id), the shape index from "
"the colliding body (body_shape), and the shape index from this body "
"(local_shape) the other body stopped colliding with."
msgstr ""

#: ../../classes/class_rigidbody.rst:67
msgid "**sleeping_state_changed** **(** **)**"
msgstr ""

#: ../../classes/class_rigidbody.rst:69
msgid ""
"Emitted when the body changes its sleeping state. Either by sleeping or "
"waking up."
msgstr ""

#: ../../classes/class_rigidbody.rst:73
msgid "Member Variables"
msgstr ""

#: ../../classes/class_rigidbody.rst:77
msgid ""
":ref:`float<class_float>` **angular_damp** - Damps RigidBody's rotational"
" forces."
msgstr ""

#: ../../classes/class_rigidbody.rst:81
msgid ""
":ref:`Vector3<class_vector3>` **angular_velocity** - RigidBody's "
"rotational velocity."
msgstr ""

#: ../../classes/class_rigidbody.rst:85
msgid ":ref:`bool<class_bool>` **axis_lock_angular_x**"
msgstr ""

#: ../../classes/class_rigidbody.rst:89
msgid ":ref:`bool<class_bool>` **axis_lock_angular_y**"
msgstr ""

#: ../../classes/class_rigidbody.rst:93
msgid ":ref:`bool<class_bool>` **axis_lock_angular_z**"
msgstr ""

#: ../../classes/class_rigidbody.rst:97
msgid ":ref:`bool<class_bool>` **axis_lock_linear_x**"
msgstr ""

#: ../../classes/class_rigidbody.rst:101
msgid ":ref:`bool<class_bool>` **axis_lock_linear_y**"
msgstr ""

#: ../../classes/class_rigidbody.rst:105
msgid ":ref:`bool<class_bool>` **axis_lock_linear_z**"
msgstr ""

#: ../../classes/class_rigidbody.rst:109
msgid ":ref:`float<class_float>` **bounce** - RigidBody's bounciness."
msgstr ""

#: ../../classes/class_rigidbody.rst:113
msgid ""
":ref:`bool<class_bool>` **can_sleep** - If ``true`` the RigidBody will "
"not calculate forces and will act as a static body while there is no "
"movement. It will wake up when forces are applied through other "
"collisions or when the ``apply_impulse`` method is used."
msgstr ""

#: ../../classes/class_rigidbody.rst:117
msgid ""
":ref:`bool<class_bool>` **contact_monitor** - If true, the RigidBody will"
" emit signals when it collides with another RigidBody."
msgstr ""

#: ../../classes/class_rigidbody.rst:121
msgid ""
":ref:`int<class_int>` **contacts_reported** - The maximum contacts to "
"report. Bodies can keep a log of the contacts with other bodies, this is "
"enabled by setting the maximum amount of contacts reported to a number "
"greater than 0."
msgstr ""

#: ../../classes/class_rigidbody.rst:125
msgid ""
":ref:`bool<class_bool>` **continuous_cd** - If ``true`` continuous "
"collision detection is used."
msgstr ""

#: ../../classes/class_rigidbody.rst:127
msgid ""
"Continuous collision detection tries to predict where a moving body will "
"collide, instead of moving it and correcting its movement if it collided."
" Continuous collision detection is more precise, and misses less impacts "
"by small, fast-moving objects. Not using continuous collision detection "
"is faster to compute, but can miss small, fast-moving objects."
msgstr ""

#: ../../classes/class_rigidbody.rst:131
msgid ""
":ref:`bool<class_bool>` **custom_integrator** - If ``true`` internal "
"force integration will be disabled (like gravity or air friction) for "
"this body. Other than collision response, the body will only move as "
"determined by the "
":ref:`_integrate_forces<class_RigidBody__integrate_forces>` function, if "
"defined."
msgstr ""

#: ../../classes/class_rigidbody.rst:135
msgid ""
":ref:`float<class_float>` **friction** - The body friction, from 0 "
"(frictionless) to 1 (max friction)."
msgstr ""

#: ../../classes/class_rigidbody.rst:139
msgid ""
":ref:`float<class_float>` **gravity_scale** - This is multiplied by the "
"global 3D gravity setting found in \"Project > Project Settings > Physics"
" > 3d\" to produce RigidBody's gravity. E.g. a value of 1 will be normal "
"gravity, 2 will apply double gravity, and 0.5 will apply half gravity to "
"this object."
msgstr ""

#: ../../classes/class_rigidbody.rst:143
msgid ""
":ref:`float<class_float>` **linear_damp** - RigidBody's linear damp. "
"Default value: -1, cannot be less than -1. If this value is different "
"from -1, any linear damp derived from the world or areas will be "
"overridden."
msgstr ""

#: ../../classes/class_rigidbody.rst:147
msgid ""
":ref:`Vector3<class_vector3>` **linear_velocity** - RigidBody's linear "
"velocity. Can be used sporadically, but **DON'T SET THIS IN EVERY "
"FRAME**, because physics may run in another thread and runs at a "
"different granularity. Use "
":ref:`_integrate_forces<class_RigidBody__integrate_forces>` as your "
"process loop for precise control of the body state."
msgstr ""

#: ../../classes/class_rigidbody.rst:151
msgid ":ref:`float<class_float>` **mass** - RigidBody's mass."
msgstr ""

#: ../../classes/class_rigidbody.rst:155
msgid ""
":ref:`Mode<enum_rigidbody_mode>` **mode** - The body mode from the "
"MODE\\_\\* enum. Modes include: MODE_STATIC, MODE_KINEMATIC, MODE_RIGID, "
"and MODE_CHARACTER."
msgstr ""

#: ../../classes/class_rigidbody.rst:159
msgid ""
":ref:`bool<class_bool>` **sleeping** - If ``true`` RigidBody is sleeping "
"and will not calculate forces until woken up by a collision or the "
"``apply_impulse`` method."
msgstr ""

#: ../../classes/class_rigidbody.rst:163
msgid ""
":ref:`float<class_float>` **weight** - RigidBody's weight based on its "
"mass and the global 3D gravity. Global values are set in \"Project > "
"Project Settings > Physics > 3d\"."
msgstr ""

#: ../../classes/class_rigidbody.rst:167
msgid "Enums"
msgstr ""

#: ../../classes/class_rigidbody.rst:171
msgid "enum **Mode**"
msgstr ""

#: ../../classes/class_rigidbody.rst:173
msgid ""
"**MODE_RIGID** = **0** --- Rigid body. This is the \"natural\" state of a"
" rigid body. It is affected by forces, and can move, rotate, and be "
"affected by user code."
msgstr ""

#: ../../classes/class_rigidbody.rst:174
msgid ""
"**MODE_STATIC** = **1** --- Static mode. The body behaves like a "
":ref:`StaticBody<class_staticbody>`, and can only move by user code."
msgstr ""

#: ../../classes/class_rigidbody.rst:175
msgid ""
"**MODE_CHARACTER** = **2** --- Character body. This behaves like a rigid "
"body, but can not rotate."
msgstr ""

#: ../../classes/class_rigidbody.rst:176
msgid ""
"**MODE_KINEMATIC** = **3** --- Kinematic body. The body behaves like a "
":ref:`KinematicBody<class_kinematicbody>`, and can only move by user "
"code."
msgstr ""

#: ../../classes/class_rigidbody.rst:180
msgid "Description"
msgstr ""

#: ../../classes/class_rigidbody.rst:182
msgid ""
"This is the node that implements full 3D physics. This means that you do "
"not control a RigidBody directly. Instead you can apply forces to it "
"(gravity, impulses, etc.), and the physics simulation will calculate the "
"resulting movement, collision, bouncing, rotating, etc."
msgstr ""

#: ../../classes/class_rigidbody.rst:184
msgid ""
"This node can use custom force integration, for writing complex physics "
"motion behavior per node."
msgstr ""

#: ../../classes/class_rigidbody.rst:186
msgid ""
"This node can shift state between regular Rigid body, Kinematic, "
"Character or Static."
msgstr ""

#: ../../classes/class_rigidbody.rst:188
msgid "Character mode forbids this node from being rotated."
msgstr ""

#: ../../classes/class_rigidbody.rst:190
msgid ""
"As a warning, don't change RigidBody's position every frame or very "
"often. Sporadic changes work fine, but physics runs at a different "
"granularity (fixed hz) than usual rendering (process callback) and maybe "
"even in a separate thread, so changing this from a process loop will "
"yield strange behavior."
msgstr ""

#: ../../classes/class_rigidbody.rst:193
msgid "Member Function Description"
msgstr ""

#: ../../classes/class_rigidbody.rst:197
msgid ""
"void **_integrate_forces** **(** "
":ref:`PhysicsDirectBodyState<class_physicsdirectbodystate>` state **)** "
"virtual"
msgstr ""

#: ../../classes/class_rigidbody.rst:199
msgid ""
"Called during physics processing, allowing you to read and safely modify "
"the simulation state for the object. By default it works in addition to "
"the usual physics behavior, but "
":ref:`set_use_custom_integrator<class_RigidBody_set_use_custom_integrator>`"
" allows you to disable the default behavior and do fully custom force "
"integration for a body."
msgstr ""

#: ../../classes/class_rigidbody.rst:203
msgid ""
"void **apply_impulse** **(** :ref:`Vector3<class_vector3>` position, "
":ref:`Vector3<class_vector3>` impulse **)**"
msgstr ""

#: ../../classes/class_rigidbody.rst:205
msgid ""
"Apply a positioned impulse (which will be affected by the body mass and "
"shape). This is the equivalent of hitting a billiard ball with a cue: a "
"force that is applied once, and only once. Both the impulse and the "
"position are in global coordinates, and the position is relative to the "
"object's origin."
msgstr ""

#: ../../classes/class_rigidbody.rst:209
msgid ":ref:`Array<class_array>` **get_colliding_bodies** **(** **)** const"
msgstr ""

#: ../../classes/class_rigidbody.rst:211
msgid ""
"Return a list of the bodies colliding with this one. By default, number "
"of max contacts reported is at 0 , see "
":ref:`set_max_contacts_reported<class_RigidBody_set_max_contacts_reported>`"
" to increase it.  Note that the result of this test is not immediate "
"after moving objects. For performance, list of collisions is updated once"
" per frame and before the physics step. Consider using signals instead."
msgstr ""

#: ../../classes/class_rigidbody.rst:215
msgid ""
"void **set_axis_velocity** **(** :ref:`Vector3<class_vector3>` "
"axis_velocity **)**"
msgstr ""

#: ../../classes/class_rigidbody.rst:217
msgid ""
"Set an axis velocity. The velocity in the given vector axis will be set "
"as the given vector length. This is useful for jumping behavior."
msgstr ""

