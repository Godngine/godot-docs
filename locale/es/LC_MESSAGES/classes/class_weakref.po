# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot
# community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-28 16:44-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../classes/class_weakref.rst:8
msgid "WeakRef"
msgstr ""

#: ../../classes/class_weakref.rst:10
msgid ""
"**Inherits:** :ref:`Reference<class_reference>` **<** "
":ref:`Object<class_object>`"
msgstr ""

#: ../../classes/class_weakref.rst:12
msgid "**Category:** Core"
msgstr ""

#: ../../classes/class_weakref.rst:15
msgid "Brief Description"
msgstr ""

#: ../../classes/class_weakref.rst:17
msgid ""
"Holds an :ref:`Object<class_object>`, but does not contribute to the "
"reference count if the object is a reference."
msgstr ""

#: ../../classes/class_weakref.rst:20
msgid "Member Functions"
msgstr ""

#: ../../classes/class_weakref.rst:23
msgid ":ref:`Variant<class_variant>`"
msgstr ""

#: ../../classes/class_weakref.rst:23
msgid ":ref:`get_ref<class_WeakRef_get_ref>` **(** **)** const"
msgstr ""

#: ../../classes/class_weakref.rst:27
msgid "Description"
msgstr ""

#: ../../classes/class_weakref.rst:29
msgid ""
"A weakref can hold a :ref:`Reference<class_reference>`, without "
"contributing to the reference counter. A weakref can be created from an "
":ref:`Object<class_object>` using "
":ref:`@GDScript.weakref<class_@GDScript_weakref>`. If this object is not "
"a reference, weakref still works, however, it does not have any effect on"
" the object. Weakrefs are useful in cases where multiple classes have "
"variables that refer to each other. Without weakrefs, using these classes"
" could lead to memory leaks, since both references keep each other from "
"being released. Making part of the variables a weakref can prevent this "
"cyclic dependency, and allows the references to be released."
msgstr ""

#: ../../classes/class_weakref.rst:32
msgid "Member Function Description"
msgstr ""

#: ../../classes/class_weakref.rst:36
msgid ":ref:`Variant<class_variant>` **get_ref** **(** **)** const"
msgstr ""

#: ../../classes/class_weakref.rst:38
msgid "Returns the :ref:`Object<class_object>` this weakref is referring to."
msgstr ""

