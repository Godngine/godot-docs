# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot
# community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-28 16:44-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../classes/class_regex.rst:8
msgid "RegEx"
msgstr ""

#: ../../classes/class_regex.rst:10
msgid ""
"**Inherits:** :ref:`Reference<class_reference>` **<** "
":ref:`Object<class_object>`"
msgstr ""

#: ../../classes/class_regex.rst:12
msgid "**Category:** Core"
msgstr ""

#: ../../classes/class_regex.rst:15
msgid "Brief Description"
msgstr ""

#: ../../classes/class_regex.rst:17
msgid "Class for searching text for patterns using regular expressions."
msgstr ""

#: ../../classes/class_regex.rst:20
msgid "Member Functions"
msgstr ""

#: ../../classes/class_regex.rst:23
msgid "void"
msgstr ""

#: ../../classes/class_regex.rst:23
msgid ":ref:`clear<class_RegEx_clear>` **(** **)**"
msgstr ""

#: ../../classes/class_regex.rst:25 ../../classes/class_regex.rst:27
msgid ":ref:`int<class_int>`"
msgstr ""

#: ../../classes/class_regex.rst:25
msgid ""
":ref:`compile<class_RegEx_compile>` **(** :ref:`String<class_string>` "
"pattern **)**"
msgstr ""

#: ../../classes/class_regex.rst:27
msgid ":ref:`get_group_count<class_RegEx_get_group_count>` **(** **)** const"
msgstr ""

#: ../../classes/class_regex.rst:29 ../../classes/class_regex.rst:37
msgid ":ref:`Array<class_array>`"
msgstr ""

#: ../../classes/class_regex.rst:29
msgid ":ref:`get_names<class_RegEx_get_names>` **(** **)** const"
msgstr ""

#: ../../classes/class_regex.rst:31 ../../classes/class_regex.rst:39
msgid ":ref:`String<class_string>`"
msgstr ""

#: ../../classes/class_regex.rst:31
msgid ":ref:`get_pattern<class_RegEx_get_pattern>` **(** **)** const"
msgstr ""

#: ../../classes/class_regex.rst:33
msgid ":ref:`bool<class_bool>`"
msgstr ""

#: ../../classes/class_regex.rst:33
msgid ":ref:`is_valid<class_RegEx_is_valid>` **(** **)** const"
msgstr ""

#: ../../classes/class_regex.rst:35
msgid ":ref:`RegExMatch<class_regexmatch>`"
msgstr ""

#: ../../classes/class_regex.rst:35
msgid ""
":ref:`search<class_RegEx_search>` **(** :ref:`String<class_string>` "
"subject, :ref:`int<class_int>` offset=0, :ref:`int<class_int>` end=-1 "
"**)** const"
msgstr ""

#: ../../classes/class_regex.rst:37
msgid ""
":ref:`search_all<class_RegEx_search_all>` **(** "
":ref:`String<class_string>` subject, :ref:`int<class_int>` offset=0, "
":ref:`int<class_int>` end=-1 **)** const"
msgstr ""

#: ../../classes/class_regex.rst:39
msgid ""
":ref:`sub<class_RegEx_sub>` **(** :ref:`String<class_string>` subject, "
":ref:`String<class_string>` replacement, :ref:`bool<class_bool>` "
"all=false, :ref:`int<class_int>` offset=0, :ref:`int<class_int>` end=-1 "
"**)** const"
msgstr ""

#: ../../classes/class_regex.rst:43
msgid "Description"
msgstr ""

#: ../../classes/class_regex.rst:45
msgid ""
"Regular Expression (or regex) is a compact programming language that can "
"be used to recognise strings that follow a specific pattern, such as "
"URLs, email addresses, complete sentences, etc. For instance, a regex of "
"``ab[0-9]`` would find any string that is ``ab`` followed by any number "
"from ``0`` to ``9``. For a more in-depth look, you can easily find "
"various tutorials and detailed explainations on the Internet."
msgstr ""

#: ../../classes/class_regex.rst:47
msgid ""
"To begin, the RegEx object needs to be compiled with the search pattern "
"using :ref:`compile<class_RegEx_compile>` before it can be used."
msgstr ""

#: ../../classes/class_regex.rst:54
msgid ""
"The search pattern must be escaped first for gdscript before it is "
"escaped for the expression. For example, ``compile(\"\\\\d+\")`` would be"
" read by RegEx as ``\\d+``. Similarly, "
"``compile(\"\\\"(?:\\\\\\\\.|[^\\\"])*\\\"\")`` would be read as "
"``\"(?:\\\\.|[^\"])*\"``"
msgstr ""

#: ../../classes/class_regex.rst:56
msgid ""
"Using :ref:`search<class_RegEx_search>` you can find the pattern within "
"the given text. If a pattern is found, "
":ref:`RegExMatch<class_regexmatch>` is returned and you can retrieve "
"details of the results using fuctions such as "
":ref:`RegExMatch.get_string<class_RegExMatch_get_string>` and "
":ref:`RegExMatch.get_start<class_RegExMatch_get_start>`."
msgstr ""

#: ../../classes/class_regex.rst:66
msgid ""
"The results of capturing groups ``()`` can be retrieved by passing the "
"group number to the various functions in "
":ref:`RegExMatch<class_regexmatch>`. Group 0 is the default and would "
"always refer to the entire pattern. In the above example, calling "
"``result.get_string(1)`` would give you ``0123``."
msgstr ""

#: ../../classes/class_regex.rst:68
msgid ""
"This version of RegEx also supports named capturing groups, and the names"
" can be used to retrieve the results. If two or more groups have the same"
" name, the name would only refer to the first one with a match."
msgstr ""

#: ../../classes/class_regex.rst:78
msgid ""
"If you need to process multiple results, "
":ref:`search_all<class_RegEx_search_all>` generates a list of all non-"
"overlapping results. This can be combined with a for-loop for "
"convenience."
msgstr ""

#: ../../classes/class_regex.rst:88
msgid "Member Function Description"
msgstr ""

#: ../../classes/class_regex.rst:92
msgid "void **clear** **(** **)**"
msgstr ""

#: ../../classes/class_regex.rst:94
msgid ""
"This method resets the state of the object, as it was freshly created. "
"Namely, it unassigns the regular expression of this object."
msgstr ""

#: ../../classes/class_regex.rst:98
msgid ""
":ref:`int<class_int>` **compile** **(** :ref:`String<class_string>` "
"pattern **)**"
msgstr ""

#: ../../classes/class_regex.rst:100
msgid ""
"Compiles and assign the search pattern to use. Returns OK if the "
"compilation is successful. If an error is encountered the details are "
"printed to STDOUT and FAILED is returned."
msgstr ""

#: ../../classes/class_regex.rst:104
msgid ":ref:`int<class_int>` **get_group_count** **(** **)** const"
msgstr ""

#: ../../classes/class_regex.rst:106
msgid "Returns the number of capturing groups in compiled pattern."
msgstr ""

#: ../../classes/class_regex.rst:110
msgid ":ref:`Array<class_array>` **get_names** **(** **)** const"
msgstr ""

#: ../../classes/class_regex.rst:112
msgid ""
"Returns an array of names of named capturing groups in the compiled "
"pattern. They are ordered by appearance."
msgstr ""

#: ../../classes/class_regex.rst:116
msgid ":ref:`String<class_string>` **get_pattern** **(** **)** const"
msgstr ""

#: ../../classes/class_regex.rst:118
msgid "Returns the original search pattern that was compiled."
msgstr ""

#: ../../classes/class_regex.rst:122
msgid ":ref:`bool<class_bool>` **is_valid** **(** **)** const"
msgstr ""

#: ../../classes/class_regex.rst:124
msgid "Returns whether this object has a valid search pattern assigned."
msgstr ""

#: ../../classes/class_regex.rst:128
msgid ""
":ref:`RegExMatch<class_regexmatch>` **search** **(** "
":ref:`String<class_string>` subject, :ref:`int<class_int>` offset=0, "
":ref:`int<class_int>` end=-1 **)** const"
msgstr ""

#: ../../classes/class_regex.rst:130
msgid ""
"Searches the text for the compiled pattern. Returns a "
":ref:`RegExMatch<class_regexmatch>` container of the first matching "
"result if found, otherwise null. The region to search within can be "
"specified without modifying where the start and end anchor would be."
msgstr ""

#: ../../classes/class_regex.rst:134
msgid ""
":ref:`Array<class_array>` **search_all** **(** "
":ref:`String<class_string>` subject, :ref:`int<class_int>` offset=0, "
":ref:`int<class_int>` end=-1 **)** const"
msgstr ""

#: ../../classes/class_regex.rst:136
msgid ""
"Searches the text for the compiled pattern. Returns an array of "
":ref:`RegExMatch<class_regexmatch>` containers for each non-overlapping "
"result. If no results were found an empty array is returned instead. The "
"region to search within can be specified without modifying where the "
"start and end anchor would be."
msgstr ""

#: ../../classes/class_regex.rst:140
msgid ""
":ref:`String<class_string>` **sub** **(** :ref:`String<class_string>` "
"subject, :ref:`String<class_string>` replacement, :ref:`bool<class_bool>`"
" all=false, :ref:`int<class_int>` offset=0, :ref:`int<class_int>` end=-1 "
"**)** const"
msgstr ""

#: ../../classes/class_regex.rst:142
msgid ""
"Searches the text for the compiled pattern and replaces it with the "
"specified string. Escapes and backreferences such as ``\\1`` and "
"``\\g<name>`` expanded and resolved. By default only the first instance "
"is replaced but it can be changed for all instances (global replacement)."
" The region to search within can be specified without modifying where the"
" start and end anchor would be."
msgstr ""

