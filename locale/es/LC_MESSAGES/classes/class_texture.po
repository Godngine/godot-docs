# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot
# community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-28 16:44-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../classes/class_texture.rst:8
msgid "Texture"
msgstr ""

#: ../../classes/class_texture.rst:10
msgid ""
"**Inherits:** :ref:`Resource<class_resource>` **<** "
":ref:`Reference<class_reference>` **<** :ref:`Object<class_object>`"
msgstr ""

#: ../../classes/class_texture.rst:12
msgid ""
"**Inherited By:** :ref:`CurveTexture<class_curvetexture>`, "
":ref:`AtlasTexture<class_atlastexture>`, "
":ref:`ProxyTexture<class_proxytexture>`, "
":ref:`GradientTexture<class_gradienttexture>`, "
":ref:`ViewportTexture<class_viewporttexture>`, "
":ref:`StreamTexture<class_streamtexture>`, "
":ref:`ImageTexture<class_imagetexture>`, "
":ref:`LargeTexture<class_largetexture>`"
msgstr ""

#: ../../classes/class_texture.rst:14
msgid "**Category:** Core"
msgstr ""

#: ../../classes/class_texture.rst:17
msgid "Brief Description"
msgstr ""

#: ../../classes/class_texture.rst:19
msgid "Texture for 2D and 3D."
msgstr ""

#: ../../classes/class_texture.rst:22
msgid "Member Functions"
msgstr ""

#: ../../classes/class_texture.rst:25 ../../classes/class_texture.rst:27
#: ../../classes/class_texture.rst:29
msgid "void"
msgstr ""

#: ../../classes/class_texture.rst:25
msgid ""
":ref:`draw<class_Texture_draw>` **(** :ref:`RID<class_rid>` canvas_item, "
":ref:`Vector2<class_vector2>` position, :ref:`Color<class_color>` "
"modulate=Color( 1, 1, 1, 1 ), :ref:`bool<class_bool>` transpose=false, "
":ref:`Texture<class_texture>` normal_map=null **)** const"
msgstr ""

#: ../../classes/class_texture.rst:27
msgid ""
":ref:`draw_rect<class_Texture_draw_rect>` **(** :ref:`RID<class_rid>` "
"canvas_item, :ref:`Rect2<class_rect2>` rect, :ref:`bool<class_bool>` "
"tile, :ref:`Color<class_color>` modulate=Color( 1, 1, 1, 1 ), "
":ref:`bool<class_bool>` transpose=false, :ref:`Texture<class_texture>` "
"normal_map=null **)** const"
msgstr ""

#: ../../classes/class_texture.rst:29
msgid ""
":ref:`draw_rect_region<class_Texture_draw_rect_region>` **(** "
":ref:`RID<class_rid>` canvas_item, :ref:`Rect2<class_rect2>` rect, "
":ref:`Rect2<class_rect2>` src_rect, :ref:`Color<class_color>` "
"modulate=Color( 1, 1, 1, 1 ), :ref:`bool<class_bool>` transpose=false, "
":ref:`Texture<class_texture>` normal_map=null, :ref:`bool<class_bool>` "
"clip_uv=true **)** const"
msgstr ""

#: ../../classes/class_texture.rst:31
msgid ":ref:`Image<class_image>`"
msgstr ""

#: ../../classes/class_texture.rst:31
msgid ":ref:`get_data<class_Texture_get_data>` **(** **)** const"
msgstr ""

#: ../../classes/class_texture.rst:33 ../../classes/class_texture.rst:37
msgid ":ref:`int<class_int>`"
msgstr ""

#: ../../classes/class_texture.rst:33
msgid ":ref:`get_height<class_Texture_get_height>` **(** **)** const"
msgstr ""

#: ../../classes/class_texture.rst:35
msgid ":ref:`Vector2<class_vector2>`"
msgstr ""

#: ../../classes/class_texture.rst:35
msgid ":ref:`get_size<class_Texture_get_size>` **(** **)** const"
msgstr ""

#: ../../classes/class_texture.rst:37
msgid ":ref:`get_width<class_Texture_get_width>` **(** **)** const"
msgstr ""

#: ../../classes/class_texture.rst:39
msgid ":ref:`bool<class_bool>`"
msgstr ""

#: ../../classes/class_texture.rst:39
msgid ":ref:`has_alpha<class_Texture_has_alpha>` **(** **)** const"
msgstr ""

#: ../../classes/class_texture.rst:43
msgid "Member Variables"
msgstr ""

#: ../../classes/class_texture.rst:47
msgid ":ref:`int<class_int>` **flags** - The texture's flags."
msgstr ""

#: ../../classes/class_texture.rst:51
msgid "Enums"
msgstr ""

#: ../../classes/class_texture.rst:55
msgid "enum **Flags**"
msgstr ""

#: ../../classes/class_texture.rst:57
msgid ""
"**FLAGS_DEFAULT** = **7** --- Default flags. Generate mipmaps, repeat, "
"and filter are enabled."
msgstr ""

#: ../../classes/class_texture.rst:58
msgid ""
"**FLAG_MIPMAPS** = **1** --- Generate mipmaps, which are smaller versions"
" of the same texture to use when zoomed out, keeping the aspect ratio."
msgstr ""

#: ../../classes/class_texture.rst:59
msgid "**FLAG_REPEAT** = **2** --- Repeats texture (instead of clamp to edge)."
msgstr ""

#: ../../classes/class_texture.rst:60
msgid ""
"**FLAG_FILTER** = **4** --- Magnifying filter, to enable smooth zooming "
"in of the texture."
msgstr ""

#: ../../classes/class_texture.rst:61
msgid ""
"**FLAG_ANISOTROPIC_FILTER** = **8** --- Anisotropic mipmap filtering. "
"Generates smaller versions of the same texture with different aspect "
"ratios."
msgstr ""

#: ../../classes/class_texture.rst:63
msgid ""
"More effective on planes often shown going to the horrizon as those "
"textures (Walls or Ground for example) get squashed in the viewport to "
"different aspect ratios and regular mipmaps keep the aspect ratio so they"
" don't optimize storage that well in those cases. - "
"**FLAG_CONVERT_TO_LINEAR** = **16** --- Converts texture to SRGB color "
"space. - **FLAG_MIRRORED_REPEAT** = **32** --- Repeats texture with "
"alternate sections mirrored. - **FLAG_VIDEO_SURFACE** = **4096** --- "
"Texture is a video surface."
msgstr ""

#: ../../classes/class_texture.rst:70
msgid "Description"
msgstr ""

#: ../../classes/class_texture.rst:72
msgid ""
"A texture works by registering an image in the video hardware, which then"
" can be used in 3D models or 2D :ref:`Sprite<class_sprite>` or GUI "
":ref:`Control<class_control>`."
msgstr ""

#: ../../classes/class_texture.rst:75
msgid "Member Function Description"
msgstr ""

#: ../../classes/class_texture.rst:79
msgid ""
"void **draw** **(** :ref:`RID<class_rid>` canvas_item, "
":ref:`Vector2<class_vector2>` position, :ref:`Color<class_color>` "
"modulate=Color( 1, 1, 1, 1 ), :ref:`bool<class_bool>` transpose=false, "
":ref:`Texture<class_texture>` normal_map=null **)** const"
msgstr ""

#: ../../classes/class_texture.rst:83
msgid ""
"void **draw_rect** **(** :ref:`RID<class_rid>` canvas_item, "
":ref:`Rect2<class_rect2>` rect, :ref:`bool<class_bool>` tile, "
":ref:`Color<class_color>` modulate=Color( 1, 1, 1, 1 ), "
":ref:`bool<class_bool>` transpose=false, :ref:`Texture<class_texture>` "
"normal_map=null **)** const"
msgstr ""

#: ../../classes/class_texture.rst:87
msgid ""
"void **draw_rect_region** **(** :ref:`RID<class_rid>` canvas_item, "
":ref:`Rect2<class_rect2>` rect, :ref:`Rect2<class_rect2>` src_rect, "
":ref:`Color<class_color>` modulate=Color( 1, 1, 1, 1 ), "
":ref:`bool<class_bool>` transpose=false, :ref:`Texture<class_texture>` "
"normal_map=null, :ref:`bool<class_bool>` clip_uv=true **)** const"
msgstr ""

#: ../../classes/class_texture.rst:91
msgid ":ref:`Image<class_image>` **get_data** **(** **)** const"
msgstr ""

#: ../../classes/class_texture.rst:95
msgid ":ref:`int<class_int>` **get_height** **(** **)** const"
msgstr ""

#: ../../classes/class_texture.rst:97
msgid "Return the texture height."
msgstr ""

#: ../../classes/class_texture.rst:101
msgid ":ref:`Vector2<class_vector2>` **get_size** **(** **)** const"
msgstr ""

#: ../../classes/class_texture.rst:103
msgid "Return the texture size."
msgstr ""

#: ../../classes/class_texture.rst:107
msgid ":ref:`int<class_int>` **get_width** **(** **)** const"
msgstr ""

#: ../../classes/class_texture.rst:109
msgid "Return the texture width."
msgstr ""

#: ../../classes/class_texture.rst:113
msgid ":ref:`bool<class_bool>` **has_alpha** **(** **)** const"
msgstr ""

