# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot
# community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-28 16:44-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../classes/class_camera.rst:8
msgid "Camera"
msgstr ""

#: ../../classes/class_camera.rst:10
msgid ""
"**Inherits:** :ref:`Spatial<class_spatial>` **<** :ref:`Node<class_node>`"
" **<** :ref:`Object<class_object>`"
msgstr ""

#: ../../classes/class_camera.rst:12
msgid ""
"**Inherited By:** :ref:`InterpolatedCamera<class_interpolatedcamera>`, "
":ref:`ARVRCamera<class_arvrcamera>`"
msgstr ""

#: ../../classes/class_camera.rst:14
msgid "**Category:** Core"
msgstr ""

#: ../../classes/class_camera.rst:17
msgid "Brief Description"
msgstr ""

#: ../../classes/class_camera.rst:19
msgid "Camera node, displays from a point of view."
msgstr ""

#: ../../classes/class_camera.rst:22
msgid "Member Functions"
msgstr ""

#: ../../classes/class_camera.rst:25 ../../classes/class_camera.rst:31
#: ../../classes/class_camera.rst:41 ../../classes/class_camera.rst:43
msgid "void"
msgstr ""

#: ../../classes/class_camera.rst:25
msgid ":ref:`clear_current<class_Camera_clear_current>` **(** **)**"
msgstr ""

#: ../../classes/class_camera.rst:27
msgid ":ref:`Transform<class_transform>`"
msgstr ""

#: ../../classes/class_camera.rst:27
msgid ""
":ref:`get_camera_transform<class_Camera_get_camera_transform>` **(** "
"**)** const"
msgstr ""

#: ../../classes/class_camera.rst:29
msgid ":ref:`bool<class_bool>`"
msgstr ""

#: ../../classes/class_camera.rst:29
msgid ""
":ref:`is_position_behind<class_Camera_is_position_behind>` **(** "
":ref:`Vector3<class_vector3>` world_point **)** const"
msgstr ""

#: ../../classes/class_camera.rst:31
msgid ":ref:`make_current<class_Camera_make_current>` **(** **)**"
msgstr ""

#: ../../classes/class_camera.rst:33 ../../classes/class_camera.rst:35
#: ../../classes/class_camera.rst:37 ../../classes/class_camera.rst:39
msgid ":ref:`Vector3<class_vector3>`"
msgstr ""

#: ../../classes/class_camera.rst:33
msgid ""
":ref:`project_local_ray_normal<class_Camera_project_local_ray_normal>` "
"**(** :ref:`Vector2<class_vector2>` screen_point **)** const"
msgstr ""

#: ../../classes/class_camera.rst:35
msgid ""
":ref:`project_position<class_Camera_project_position>` **(** "
":ref:`Vector2<class_vector2>` screen_point **)** const"
msgstr ""

#: ../../classes/class_camera.rst:37
msgid ""
":ref:`project_ray_normal<class_Camera_project_ray_normal>` **(** "
":ref:`Vector2<class_vector2>` screen_point **)** const"
msgstr ""

#: ../../classes/class_camera.rst:39
msgid ""
":ref:`project_ray_origin<class_Camera_project_ray_origin>` **(** "
":ref:`Vector2<class_vector2>` screen_point **)** const"
msgstr ""

#: ../../classes/class_camera.rst:41
msgid ""
":ref:`set_orthogonal<class_Camera_set_orthogonal>` **(** "
":ref:`float<class_float>` size, :ref:`float<class_float>` z_near, "
":ref:`float<class_float>` z_far **)**"
msgstr ""

#: ../../classes/class_camera.rst:43
msgid ""
":ref:`set_perspective<class_Camera_set_perspective>` **(** "
":ref:`float<class_float>` fov, :ref:`float<class_float>` z_near, "
":ref:`float<class_float>` z_far **)**"
msgstr ""

#: ../../classes/class_camera.rst:45
msgid ":ref:`Vector2<class_vector2>`"
msgstr ""

#: ../../classes/class_camera.rst:45
msgid ""
":ref:`unproject_position<class_Camera_unproject_position>` **(** "
":ref:`Vector3<class_vector3>` world_point **)** const"
msgstr ""

#: ../../classes/class_camera.rst:49
msgid "Member Variables"
msgstr ""

#: ../../classes/class_camera.rst:53
msgid ""
":ref:`int<class_int>` **cull_mask** - The culling mask that describes "
"which 3D render layers are rendered by this camera."
msgstr ""

#: ../../classes/class_camera.rst:57
msgid ""
":ref:`bool<class_bool>` **current** - If ``true`` the ancestor "
":ref:`Viewport<class_viewport>` is currently using this Camera. Default "
"value: ``false``."
msgstr ""

#: ../../classes/class_camera.rst:61
msgid ""
":ref:`DopplerTracking<enum_camera_dopplertracking>` **doppler_tracking** "
"- If not ``DOPPLER_TRACKING_DISABLED`` this Camera will simulate the "
"Doppler effect for objects changed in particular ``_process`` methods. "
"Default value: ``DOPPLER_TRACKING_DISABLED``."
msgstr ""

#: ../../classes/class_camera.rst:65
msgid ""
":ref:`Environment<class_environment>` **environment** - Set the "
":ref:`Environment<class_environment>` to use for this Camera."
msgstr ""

#: ../../classes/class_camera.rst:69
msgid ""
":ref:`float<class_float>` **far** - The distance to the far culling "
"boundary for this Camera relative to its local z-axis."
msgstr ""

#: ../../classes/class_camera.rst:73
msgid ""
":ref:`float<class_float>` **fov** - The camera's field of view angle (in "
"degrees). Only applicable in perspective mode. Since "
":ref:`keep_aspect<class_Camera_keep_aspect>` locks one axis, ``fov`` sets"
" the other axis' field of view angle."
msgstr ""

#: ../../classes/class_camera.rst:77
msgid ""
":ref:`float<class_float>` **h_offset** - The horizontal (X) offset of the"
" Camear viewport."
msgstr ""

#: ../../classes/class_camera.rst:81
msgid ""
":ref:`KeepAspect<enum_camera_keepaspect>` **keep_aspect** - The axis to "
"lock during :ref:`fov<class_Camera_fov>`/:ref:`size<class_Camera_size>` "
"adjustments."
msgstr ""

#: ../../classes/class_camera.rst:85
msgid ""
":ref:`float<class_float>` **near** - The distance to the near culling "
"boundary for this Camera relative to its local z-axis."
msgstr ""

#: ../../classes/class_camera.rst:89
msgid ""
":ref:`Projection<enum_camera_projection>` **projection** - The camera's "
"projection mode. In ``PROJECTION_PERSPECTIVE`` mode, objects' z-distance "
"from the camera's local space scales their perceived size."
msgstr ""

#: ../../classes/class_camera.rst:93
msgid ""
":ref:`float<class_float>` **size** - The camera's size measured as 1/2 "
"the width or height. Only applicable in orthogonal mode. Since "
":ref:`keep_aspect<class_Camera_keep_aspect>` locks on axis, ``size`` sets"
" the other axis' size length."
msgstr ""

#: ../../classes/class_camera.rst:97
msgid ""
":ref:`float<class_float>` **v_offset** - The horizontal (Y) offset of the"
" Camear viewport."
msgstr ""

#: ../../classes/class_camera.rst:101
msgid "Enums"
msgstr ""

#: ../../classes/class_camera.rst:105
msgid "enum **DopplerTracking**"
msgstr ""

#: ../../classes/class_camera.rst:107
msgid ""
"**DOPPLER_TRACKING_DISABLED** = **0** --- Disable Doppler effect "
"simulation (default)."
msgstr ""

#: ../../classes/class_camera.rst:108
msgid ""
"**DOPPLER_TRACKING_IDLE_STEP** = **1** --- Simulate Doppler effect by "
"tracking positions of objects that are changed in ``_process``. Changes "
"in the relative velocity of this Camera compared to those objects affect "
"how Audio is perceived (changing the Audio's ``pitch shift``)."
msgstr ""

#: ../../classes/class_camera.rst:109
msgid ""
"**DOPPLER_TRACKING_PHYSICS_STEP** = **2** --- Simulate Doppler effect by "
"tracking positions of objects that are changed in ``_physics_process``. "
"Changes in the relative velocity of this Camera compared to those objects"
" affect how Audio is perceived (changing the Audio's ``pitch shift``)."
msgstr ""

#: ../../classes/class_camera.rst:113
msgid "enum **Projection**"
msgstr ""

#: ../../classes/class_camera.rst:115
msgid ""
"**PROJECTION_PERSPECTIVE** = **0** --- Perspective Projection (object's "
"size on the screen becomes smaller when far away)."
msgstr ""

#: ../../classes/class_camera.rst:116
msgid ""
"**PROJECTION_ORTHOGONAL** = **1** --- Orthogonal Projection (objects "
"remain the same size on the screen no matter how far away they are)."
msgstr ""

#: ../../classes/class_camera.rst:120
msgid "enum **KeepAspect**"
msgstr ""

#: ../../classes/class_camera.rst:122
msgid "**KEEP_WIDTH** = **0** --- Preserves the horizontal aspect ratio."
msgstr ""

#: ../../classes/class_camera.rst:123
msgid "**KEEP_HEIGHT** = **1** --- Preserves the vertical aspect ratio."
msgstr ""

#: ../../classes/class_camera.rst:127
msgid "Description"
msgstr ""

#: ../../classes/class_camera.rst:129
msgid ""
"Camera is a special node that displays what is visible from its current "
"location. Cameras register themselves in the nearest "
":ref:`Viewport<class_viewport>` node (when ascending the tree). Only one "
"camera can be active per viewport. If no viewport is available ascending "
"the tree, the Camera will register in the global viewport. In other "
"words, a Camera just provides *3D* display capabilities to a "
":ref:`Viewport<class_viewport>`, and, without one, a scene registered in "
"that :ref:`Viewport<class_viewport>` (or higher viewports) can't be "
"displayed."
msgstr ""

#: ../../classes/class_camera.rst:132
msgid "Member Function Description"
msgstr ""

#: ../../classes/class_camera.rst:136
msgid "void **clear_current** **(** **)**"
msgstr ""

#: ../../classes/class_camera.rst:138
msgid ""
"If this is the current Camera, remove it from being current. If it is "
"inside the node tree, request to make the next Camera current, if any."
msgstr ""

#: ../../classes/class_camera.rst:142
msgid ""
":ref:`Transform<class_transform>` **get_camera_transform** **(** **)** "
"const"
msgstr ""

#: ../../classes/class_camera.rst:144
msgid ""
"Get the camera transform. Subclassed cameras (such as CharacterCamera) "
"may provide different transforms than the :ref:`Node<class_node>` "
"transform."
msgstr ""

#: ../../classes/class_camera.rst:148
msgid ""
":ref:`bool<class_bool>` **is_position_behind** **(** "
":ref:`Vector3<class_vector3>` world_point **)** const"
msgstr ""

#: ../../classes/class_camera.rst:150
msgid "Returns ``true`` if the given position is behind the Camera."
msgstr ""

#: ../../classes/class_camera.rst:154
msgid "void **make_current** **(** **)**"
msgstr ""

#: ../../classes/class_camera.rst:156
msgid ""
"Make this camera the current Camera for the "
":ref:`Viewport<class_viewport>` (see class description). If the Camera "
"Node is outside the scene tree, it will attempt to become current once "
"it's added."
msgstr ""

#: ../../classes/class_camera.rst:160
msgid ""
":ref:`Vector3<class_vector3>` **project_local_ray_normal** **(** "
":ref:`Vector2<class_vector2>` screen_point **)** const"
msgstr ""

#: ../../classes/class_camera.rst:162
msgid ""
"Returns a normal vector from the screen point location directed along the"
" camera. Orthogonal cameras are normalized. Perspective cameras account "
"for perspective, screen width/height, etc."
msgstr ""

#: ../../classes/class_camera.rst:166
msgid ""
":ref:`Vector3<class_vector3>` **project_position** **(** "
":ref:`Vector2<class_vector2>` screen_point **)** const"
msgstr ""

#: ../../classes/class_camera.rst:168
msgid ""
"Returns how a 2D coordinate in the Viewport rectangle maps to a 3D point "
"in worldspace."
msgstr ""

#: ../../classes/class_camera.rst:172
msgid ""
":ref:`Vector3<class_vector3>` **project_ray_normal** **(** "
":ref:`Vector2<class_vector2>` screen_point **)** const"
msgstr ""

#: ../../classes/class_camera.rst:174
msgid ""
"Returns a normal vector in worldspace, that is the result of projecting a"
" point on the :ref:`Viewport<class_viewport>` rectangle by the camera "
"projection. This is useful for casting rays in the form of (origin, "
"normal) for object intersection or picking."
msgstr ""

#: ../../classes/class_camera.rst:178
msgid ""
":ref:`Vector3<class_vector3>` **project_ray_origin** **(** "
":ref:`Vector2<class_vector2>` screen_point **)** const"
msgstr ""

#: ../../classes/class_camera.rst:180
msgid ""
"Returns a 3D position in worldspace, that is the result of projecting a "
"point on the :ref:`Viewport<class_viewport>` rectangle by the camera "
"projection. This is useful for casting rays in the form of (origin, "
"normal) for object intersection or picking."
msgstr ""

#: ../../classes/class_camera.rst:184
msgid ""
"void **set_orthogonal** **(** :ref:`float<class_float>` size, "
":ref:`float<class_float>` z_near, :ref:`float<class_float>` z_far **)**"
msgstr ""

#: ../../classes/class_camera.rst:186
msgid ""
"Set the camera projection to orthogonal mode, by specifying a width and "
"the *near* and *far* clip planes in worldspace units. (As a hint, 2D "
"games often use this projection, with values specified in pixels)"
msgstr ""

#: ../../classes/class_camera.rst:190
msgid ""
"void **set_perspective** **(** :ref:`float<class_float>` fov, "
":ref:`float<class_float>` z_near, :ref:`float<class_float>` z_far **)**"
msgstr ""

#: ../../classes/class_camera.rst:192
msgid ""
"Set the camera projection to perspective mode, by specifying a *FOV* Y "
"angle in degrees (FOV means Field of View), and the *near* and *far* clip"
" planes in worldspace units."
msgstr ""

#: ../../classes/class_camera.rst:196
msgid ""
":ref:`Vector2<class_vector2>` **unproject_position** **(** "
":ref:`Vector3<class_vector3>` world_point **)** const"
msgstr ""

#: ../../classes/class_camera.rst:198
msgid ""
"Returns how a 3D point in worldspace maps to a 2D coordinate in the "
":ref:`Viewport<class_viewport>` rectangle."
msgstr ""

