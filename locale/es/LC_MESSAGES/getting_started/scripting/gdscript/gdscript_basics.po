# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot
# community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-28 16:44-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:4
msgid "GDScript"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:7
msgid "Introduction"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:9
msgid ""
"*GDScript* is a high level, dynamically typed programming language used "
"to create content. It uses a syntax similar to `Python "
"<https://en.wikipedia.org/wiki/Python_%28programming_language%29>`_ "
"(blocks are indent-based and many keywords are similar). Its goal is to "
"be optimized for and tightly integrated with Godot Engine, allowing great"
" flexibility for content creation and integration."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:17
msgid "History"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:19
msgid ""
"In the early days, the engine used the `Lua <http://www.lua.org>`__ "
"scripting language. Lua is fast, but creating bindings to an object "
"oriented system (by using fallbacks) was complex and slow and took an "
"enormous amount of code. After some experiments with `Python "
"<http://www.python.org>`__, it also proved difficult to embed."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:25
msgid ""
"The last third party scripting language that was used for shipped games "
"was `Squirrel <http://squirrel-lang.org>`__, but it was dropped as well. "
"At that point, it became evident that a custom scripting language could "
"more optimally make use of Godot's particular architecture:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:30
msgid ""
"Godot embeds scripts in nodes. Most languages are not designed with this "
"in mind."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:32
msgid ""
"Godot uses several built-in data types for 2D and 3D math. Script "
"languages do not provide this, and binding them is inefficient."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:34
msgid ""
"Godot uses threads heavily for lifting and initializing data from the net"
" or disk. Script interpreters for common languages are not friendly to "
"this."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:37
msgid ""
"Godot already has a memory management model for resources, most script "
"languages provide their own, which results in duplicate effort and bugs."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:40
msgid ""
"Binding code is always messy and results in several failure points, "
"unexpected bugs and generally low maintainability."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:43
msgid ""
"The result of these considerations is *GDScript*. The language and "
"interpreter for GDScript ended up being smaller than the binding code "
"itself for Lua and Squirrel, while having equal functionality. With time,"
" having a built-in language has proven to be a huge advantage."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:49
msgid "Example of GDScript"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:51
msgid ""
"Some people can learn better by just taking a look at the syntax, so "
"here's a simple example of how GDScript looks."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:118
msgid ""
"If you have previous experience with statically typed languages such as "
"C, C++, or C# but never used a dynamically typed one before, it is "
"advised you read this tutorial: :ref:`doc_gdscript_more_efficiently`."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:123
msgid "Language"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:125
msgid ""
"In the following, an overview is given to GDScript. Details, such as "
"which methods are available to arrays or other objects, should be looked "
"up in the linked class descriptions."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:130
msgid "Identifiers"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:132
msgid ""
"Any string that restricts itself to alphabetic characters (``a`` to ``z``"
" and ``A`` to ``Z``), digits (``0`` to ``9``) and ``_`` qualifies as an "
"identifier. Additionally, identifiers must not begin with a digit. "
"Identifiers are case-sensitive (``foo`` is different from ``FOO``)."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:138
msgid "Keywords"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:140
msgid ""
"The following is the list of keywords supported by the language. Since "
"keywords are reserved words (tokens), they can't be used as identifiers."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:144
msgid "Keyword"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:144
msgid "Description"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:146
msgid "if"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:146
#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:148
#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:150
msgid "See `if/else/elif`_."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:148
msgid "elif"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:150
msgid "else"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:152
#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:663
msgid "for"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:152
msgid "See for_."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:154
msgid "do"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:154
msgid "Reserved for future implementation of do...while loops."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:156
#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:652
msgid "while"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:156
msgid "See while_."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:158
#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:692
msgid "match"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:158
msgid "See match_."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:160
msgid "switch"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:160
#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:162
msgid "Reserved for future implementation."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:162
msgid "case"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:164
msgid "break"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:164
msgid "Exits the execution of the current ``for`` or ``while`` loop."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:166
msgid "continue"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:166
msgid "Immediately skips to the next iteration of the ``for`` or ``while`` loop."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:168
msgid "pass"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:168
msgid ""
"Used where a statement is required syntactically but execution of code is"
" undesired, e.g. in empty functions."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:170
msgid "return"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:170
msgid "Returns a value from a function."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:172
msgid "class"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:172
msgid "Defines a class."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:174
msgid "extends"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:174
msgid "Defines what class to extend with the current class."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:176
msgid "is"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:176
msgid "Tests whether a variable extends a given class."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:178
msgid "tool"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:178
msgid "Executes the script in the editor."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:180
msgid "signal"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:180
msgid "Defines a signal."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:182
msgid "func"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:182
msgid "Defines a function."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:184
msgid "static"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:184
msgid "Defines a static function. Static member variables are not allowed."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:186
msgid "const"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:186
msgid "Defines a constant."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:188
msgid "enum"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:188
msgid "Defines an enum."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:190
msgid "var"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:190
msgid "Defines a variable."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:192
msgid "onready"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:192
msgid ""
"Initializes a variable once the Node the script is attached to and its "
"children are part of the scene tree."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:194
msgid "export"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:194
msgid ""
"Saves a variable along with the resource it's attached to and makes it "
"visible and modifiable in the editor."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:196
msgid "setget"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:196
msgid "Defines setter and getter functions for a variable."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:198
msgid "breakpoint"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:198
msgid "Editor helper for debugger breakpoints."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:202
msgid "Operators"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:204
msgid ""
"The following is the list of supported operators and their precedence "
"(TODO, change since this was made to reflect python operators)"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:208
msgid "**Operator**"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:208
msgid "**Description**"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:210
msgid "``x[index]``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:210
msgid "Subscription, Highest Priority"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:212
msgid "``x.attribute``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:212
msgid "Attribute Reference"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:214
msgid "``is``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:214
msgid "Instance Type Checker"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:216
msgid "``~``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:216
msgid "Bitwise NOT"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:218
msgid "``-x``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:218
msgid "Negative"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:220
msgid "``*`` ``/`` ``%``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:220
msgid "Multiplication / Division / Remainder"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:222
msgid ""
"NOTE: The result of these operations depends on the operands types. If "
"both are Integers, then the result will be an Integer. That means 1/10 "
"returns 0 instead of 0.1. If at least one of the operands is a float, "
"then the result is a float: float(1)/10 or 1.0/10 return both 0.1."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:231
msgid "``+`` ``-``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:231
msgid "Addition / Subtraction"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:233
msgid "``<<`` ``>>``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:233
msgid "Bit Shifting"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:235
msgid "``&``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:235
msgid "Bitwise AND"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:237
msgid "``^``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:237
msgid "Bitwise XOR"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:239
msgid "``|``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:239
msgid "Bitwise OR"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:241
msgid "``<`` ``>`` ``==`` ``!=`` ``>=`` ``<=``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:241
msgid "Comparisons"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:243
msgid "``in``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:243
msgid "Content Test"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:245
msgid "``!`` ``not``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:245
msgid "Boolean NOT"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:247
msgid "``and`` ``&&``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:247
msgid "Boolean AND"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:249
msgid "``or`` ``||``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:249
msgid "Boolean OR"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:251
msgid "``if x else``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:251
msgid "Ternary if/else"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:253
msgid "``=`` ``+=`` ``-=`` ``*=`` ``/=`` ``%=`` ``&=`` ``|=``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:253
msgid "Assignment, Lowest Priority"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:257
msgid "Literals"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:260
msgid "**Literal**"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:260
msgid "**Type**"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:262
msgid "``45``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:262
msgid "Base 10 integer"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:264
msgid "``0x8F51``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:264
msgid "Base 16 (hex) integer"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:266
msgid "``3.14``, ``58.1e-10``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:266
msgid "Floating point number (real)"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:268
msgid "``\"Hello\"``, ``\"Hi\"``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:268
msgid "Strings"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:270
msgid "``\"\"\"Hello, Dude\"\"\"``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:270
msgid "Multiline string"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:272
msgid "``@\"Node/Label\"``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:272
msgid "NodePath or StringName"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:276
msgid "Comments"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:278
msgid ""
"Anything from a ``#`` to the end of the line is ignored and is considered"
" a comment."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:297
msgid "Built-in types"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:300
msgid "Basic built-in types"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:302
msgid "A variable in GDScript can be assigned to several built-in types."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:305
msgid "null"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:307
msgid ""
"``null`` is an empty data type that contains no information and can not "
"be assigned any other value."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:311
msgid "bool"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:313
msgid "The Boolean data type can only contain ``true`` or ``false``."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:316
msgid "int"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:318
msgid ""
"The integer data type can only contain integer numbers, (both negative "
"and positive)."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:322
msgid "float"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:324
msgid "Used to contain a floating point value (real numbers)."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:327
msgid ":ref:`String <class_String>`"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:329
msgid ""
"A sequence of characters in `Unicode format "
"<https://en.wikipedia.org/wiki/Unicode>`_. Strings can contain the "
"`standard C escape sequences "
"<https://en.wikipedia.org/wiki/Escape_sequences_in_C>`_. GDScript "
"supports :ref:`format strings aka printf functionality "
"<doc_gdscript_printf>`."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:335
msgid "Vector built-in types"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:338
msgid ":ref:`Vector2 <class_Vector2>`"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:340
msgid ""
"2D vector type containing ``x`` and ``y`` fields. Can also be accessed as"
" array."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:344
msgid ":ref:`Rect2 <class_Rect2>`"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:346
msgid ""
"2D Rectangle type containing two vectors fields: ``position`` and "
"``size``. Alternatively contains an ``end`` field which is "
"``position+size``."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:350
msgid ":ref:`Vector3 <class_Vector3>`"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:352
msgid ""
"3D vector type containing ``x``, ``y`` and ``z`` fields. This can also be"
" accessed as an array."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:356
msgid ":ref:`Transform2D <class_Transform2D>`"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:358
msgid "3x2 matrix used for 2D transforms."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:361
msgid ":ref:`Plane <class_Plane>`"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:363
msgid ""
"3D Plane type in normalized form that contains a ``normal`` vector field "
"and a ``d`` scalar distance."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:367
msgid ":ref:`Quat <class_Quat>`"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:369
msgid ""
"Quaternion is a datatype used for representing a 3D rotation. It's useful"
" for interpolating rotations."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:373
msgid ":ref:`AABB <class_AABB>`"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:375
msgid ""
"Axis-aligned bounding box (or 3D box) contains 2 vectors fields: "
"``position`` and ``size``. Alternatively contains an ``end`` field which "
"is ``position+size``."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:380
msgid ":ref:`Basis <class_Basis>`"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:382
msgid ""
"3x3 matrix used for 3D rotation and scale. It contains 3 vector fields "
"(``x``, ``y`` and ``z``) and can also be accessed as an array of 3D "
"vectors."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:387
msgid ":ref:`Transform <class_Transform>`"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:389
msgid ""
"3D Transform contains a Basis field ``basis`` and a Vector3 field "
"``origin``."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:393
msgid "Engine built-in types"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:396
msgid ":ref:`Color <class_Color>`"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:398
msgid ""
"Color data type contains ``r``, ``g``, ``b``, and ``a`` fields. It can "
"also be accessed as ``h``, ``s``, and ``v`` for hue/saturation/value."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:402
msgid ":ref:`NodePath <class_NodePath>`"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:404
msgid ""
"Compiled path to a node used mainly in the scene system. It can be easily"
" assigned to, and from, a String."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:408
msgid ":ref:`RID <class_RID>`"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:410
msgid "Resource ID (RID). Servers use generic RIDs to reference opaque data."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:413
msgid ":ref:`Object <class_Object>`"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:415
msgid "Base class for anything that is not a built-in type."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:418
msgid "Container built-in types"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:421
msgid ":ref:`Array <class_Array>`"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:423
msgid ""
"Generic sequence of arbitrary object types, including other arrays or "
"dictionaries (see below). The array can resize dynamically. Arrays are "
"indexed starting from index ``0``. Starting with Godot 2.1, indices may "
"be negative like in Python, to count from the end."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:437
msgid ""
"GDScript arrays are allocated linearly in memory for speed. Very large "
"arrays (more than tens of thousands of elements) may however cause memory"
" fragmentation. If this is a concern special types of arrays are "
"available. These only accept a single data type. They avoid memory "
"fragmentation and also use less memory but are atomic and tend to run "
"slower than generic arrays. They are therefore only recommended to use "
"for very large data sets:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:444
msgid ""
":ref:`PoolByteArray <class_PoolByteArray>`: An array of bytes (integers "
"from 0 to 255)."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:445
msgid ":ref:`PoolIntArray <class_PoolIntArray>`: An array of integers."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:446
msgid ":ref:`PoolRealArray <class_PoolRealArray>`: An array of floats."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:447
msgid ":ref:`PoolStringArray <class_PoolStringArray>`: An array of strings."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:448
msgid ""
":ref:`PoolVector2Array <class_PoolVector2Array>`: An array of "
":ref:`Vector2 <class_Vector2>` objects."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:449
msgid ""
":ref:`PoolVector3Array <class_PoolVector3Array>`: An array of "
":ref:`Vector3 <class_Vector3>` objects."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:450
msgid ""
":ref:`PoolColorArray <class_PoolColorArray>`: An array of :ref:`Color "
"<class_Color>` objects."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:453
msgid ":ref:`Dictionary <class_Dictionary>`"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:455
msgid "Associative container which contains values referenced by unique keys."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:468
msgid ""
"Lua-style table syntax is also supported. Lua-style uses ``=`` instead of"
" ``:`` and doesn't use quotes to mark string keys (making for slightly "
"less to write). Note however that like any GDScript identifier, keys "
"written in this form cannot start with a digit."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:482
msgid ""
"To add a key to an existing dictionary, access it like an existing key "
"and assign to it::"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:491
msgid "Data"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:494
msgid "Variables"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:496
msgid ""
"Variables can exist as class members or local to functions. They are "
"created with the ``var`` keyword and may, optionally, be assigned a value"
" upon initialization."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:508
msgid "Constants"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:510
msgid ""
"Constants are similar to variables, but must be constants or constant "
"expressions and must be assigned on initialization."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:524
msgid "Enums"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:526
msgid ""
"Enums are basically a shorthand for constants, and are pretty useful if "
"you want to assign consecutive integers to some constant."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:529
msgid ""
"If you pass a name to the enum, it would also put all the values inside a"
" constant dictionary of that name."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:550
msgid "Functions"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:552
msgid ""
"Functions always belong to a `class <Classes_>`_. The scope priority for "
"variable look-up is: local → class member → global. The ``self`` variable"
" is always available and is provided as an option for accessing class "
"members, but is not always required (and should *not* be sent as the "
"function's first argument, unlike Python)."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:565
msgid ""
"A function can ``return`` at any point. The default return value is "
"``null``."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:568
msgid "Referencing Functions"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:570
msgid ""
"To call a function in a *base class* (i.e. one ``extend``-ed in your "
"current class), prepend ``.`` to the function name:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:577
msgid ""
"Contrary to Python, functions are *not* first class objects in GDScript. "
"This means they cannot be stored in variables, passed as an argument to "
"another function or be returned from other functions. This is for "
"performance reasons."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:581
msgid ""
"To reference a function by name at runtime, (e.g. to store it in a "
"variable, or pass it to another function as an argument) one must use the"
" ``call`` or ``funcref`` helpers::"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:594
msgid ""
"Remember that default functions like  ``_init``, and most notifications "
"such as ``_enter_tree``, ``_exit_tree``, ``_process``, "
"``_physics_process``, etc. are called in all base classes automatically. "
"So there is only a need to call the function explicitly when overloading "
"them in some way."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:602
msgid "Static functions"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:604
msgid ""
"A function can be declared static. When a function is static it has no "
"access to the instance member variables or ``self``. This is mainly "
"useful to make libraries of helper functions:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:615
msgid "Statements and control flow"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:617
msgid ""
"Statements are standard and can be assignments, function calls, control "
"flow structures, etc (see below). ``;`` as a statement separator is "
"entirely optional."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:622
msgid "if/else/elif"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:624
msgid ""
"Simple conditions are created by using the ``if``/``else``/``elif`` "
"syntax. Parenthesis around conditions are allowed, but not required. "
"Given the nature of the tab-based indentation, ``elif`` can be used "
"instead of ``else``/``if`` to maintain a level of indentation."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:638
msgid "Short statements can be written on the same line as the condition::"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:645
msgid ""
"Sometimes you might want to assign a different initial value based on a "
"boolean expression. In this case ternary-if expressions come in handy::"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:654
msgid ""
"Simple loops are created by using ``while`` syntax. Loops can be broken "
"using ``break`` or continued using ``continue``:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:665
msgid ""
"To iterate through a range, such as an array or table, a *for* loop is "
"used. When iterating over an array, the current array element is stored "
"in the loop variable. When iterating over a dictionary, the *index* is "
"stored in the loop variable."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:694
msgid ""
"A ``match`` statement is used to branch execution of a program. It's the "
"equivalent of the ``switch`` statement found in many other languages but "
"offers some additional features."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:697
msgid "Basic syntax:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:710
msgid "**Crash-course for people who are familiar to switch statements**:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:712
msgid "Replace ``switch`` with ``match``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:713
msgid "Remove ``case``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:714
msgid ""
"Remove any ``break``'s. If you don't want to ``break`` by default you can"
" use ``continue`` for a fallthrough."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:715
msgid "Change ``default`` to a single underscore."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:718
msgid "**Control flow**:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:720
msgid ""
"The patterns are matched from top to bottom. If a pattern matches, the "
"corresponding block will be executed. After that, the execution continues"
" below the ``match`` statement. If you want to have a fallthrough you can"
" use ``continue`` to stop execution in the current block and check the "
"ones below it."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:724
msgid "There are 6 pattern types:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:736
msgid "constant pattern"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:727
msgid "constant primitives, like numbers and strings ::"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:748
msgid "variable pattern"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:739
msgid "matches the contents of a variable/enum ::"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:762
msgid "wildcard pattern"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:751
msgid "This pattern matches everything. It's written as a single underscore."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:753
msgid ""
"It can be used as the equivalent of the ``default`` in a ``switch`` "
"statement in other languages. ::"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:775
msgid "binding pattern"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:765
msgid ""
"A binding pattern introduces a new variable. Like the wildcard pattern, "
"it matches everything - and also gives that value a name. It's especially"
" useful in array and dictionary patterns. ::"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:794
msgid "array pattern"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:778
msgid ""
"matches an array. Every single element of the array pattern is a pattern "
"itself so you can nest them."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:780
msgid ""
"The length of the array is tested first, it has to be the same size as "
"the pattern, otherwise the pattern don't match."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:782
msgid ""
"**Open-ended array**: An array can be bigger than the pattern by making "
"the last subpattern ``..``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:784
msgid "Every subpattern has to be comma separated. ::"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:819
msgid "dictionary pattern"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:797
msgid ""
"Works in the same way as the array pattern. Every key has to be a "
"constant pattern."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:799
msgid ""
"The size of the dictionary is tested first, it has to be the same size as"
" the pattern, otherwise the pattern don't match."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:801
msgid ""
"**Open-ended dictionary**: A dictionary can be bigger than the pattern by"
" making the last subpattern ``..``"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:803
msgid "Every subpattern has to be comma separated."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:805
msgid ""
"If you don't specify a value, then only the existence of the key is "
"checked."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:807
msgid "A value pattern is separated from the key pattern with a ``:`` ::"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:830
msgid "Multipatterns:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:822
msgid ""
"You can also specify multiple patterns separated by a comma. These "
"patterns aren't allowed to have any bindings in them. ::"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:833
msgid "Classes"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:835
msgid ""
"By default, the body of a script file is an unnamed class and it can only"
" be referenced externally as a resource or file. Class syntax is meant to"
" be very compact and can only contain member variables or functions. "
"Static functions are allowed, but not static members (this is in the "
"spirit of thread safety, since scripts can be initialized in separate "
"threads without the user knowing). In the same way, member variables "
"(including arrays and dictionaries) are initialized every time an "
"instance is created."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:844
msgid "Below is an example of a class file."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:856
msgid "Inheritance"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:858
msgid "A class (stored as a file) can inherit from"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:860
msgid "A global class"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:861
msgid "Another class file"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:862
msgid "An inner class inside another class file."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:864
msgid "Multiple inheritance is not allowed."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:866
msgid "Inheritance uses the ``extends`` keyword:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:880
msgid ""
"To check if a given instance inherits from a given class the ``is`` "
"keyword can be used:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:895
msgid "Class Constructor"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:897
msgid ""
"The class constructor, called on class instantiation, is named ``_init``."
" As mentioned earlier, the constructors of parent classes are called "
"automatically when inheriting a class. So there is usually no need to "
"call ``._init()`` explicitly."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:901
msgid "If a parent constructor takes arguments, they are passed like this:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:909
msgid "Inner classes"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:911
msgid ""
"A class file can contain inner classes. Inner classes are defined using "
"the ``class`` keyword. They are instanced using the ``ClassName.new()`` "
"function."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:931
msgid "Classes as resources"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:933
msgid ""
"Classes stored as files are treated as :ref:`resources <class_GDScript>`."
" They must be loaded from disk to access them in other classes. This is "
"done using either the ``load`` or ``preload`` functions (see below). "
"Instancing of a loaded class resource is done by calling the ``new`` "
"function on the class object::"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:949
msgid "Exports"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:951
msgid ""
"Class members can be exported. This means their value gets saved along "
"with the resource (e.g. the :ref:`scene <class_PackedScene>`) they're "
"attached to. They will also be available for editing in the property "
"editor. Exporting is done by using the ``export`` keyword::"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:960
msgid ""
"An exported variable must be initialized to a constant expression or have"
" an export hint in the form of an argument to the export keyword (see "
"below)."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:963
msgid ""
"One of the fundamental benefits of exporting member variables is to have "
"them visible and editable in the editor. This way artists and game "
"designers can modify values that later influence how the program runs. "
"For this, a special export syntax is provided."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1043
msgid ""
"It must be noted that even if the script is not being run while at the "
"editor, the exported properties are still editable (see below for "
"\"tool\")."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1048
msgid "Exporting bit flags"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1050
msgid ""
"Integers used as bit flags can store multiple ``true``/``false`` "
"(boolean) values in one property. By using the export hint ``int, "
"FLAGS``, they can be set from the editor:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1059
msgid ""
"Restricting the flags to a certain number of named flags is also "
"possible. The syntax is very similar to the enumeration syntax:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1067
msgid ""
"In this example, ``Fire`` has value 1, ``Water`` has value 2, ``Earth`` "
"has value 4 and ``Wind`` corresponds to value 8. Usually, constants "
"should be defined accordingly (e.g. ``const ELEMENT_WIND = 8`` and so "
"on)."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1072
msgid ""
"Using bit flags requires some understanding of bitwise operations. If in "
"doubt, boolean variables should be exported instead."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1076
msgid "Exporting arrays"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1078
msgid ""
"Exporting arrays works but with an important caveat: While regular arrays"
" are created local to every class instance, exported arrays are *shared* "
"between all instances. This means that editing them in one instance will "
"cause them to change in all other instances. Exported arrays can have "
"initializers, but they must be constant expressions."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1104
msgid "Setters/getters"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1106
msgid ""
"It is often useful to know when a class' member variable changes for "
"whatever reason. It may also be desired to encapsulate its access in some"
" way."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1109
msgid ""
"For this, GDScript provides a *setter/getter* syntax using the ``setget``"
" keyword. It is used directly after a variable definition:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1116
msgid ""
"Whenever the value of ``variable`` is modified by an *external* source "
"(i.e. not from local usage in the class), the *setter* function "
"(``setterfunc`` above) will be called. This happens *before* the value is"
" changed. The *setter* must decide what to do with the new value. Vice-"
"versa, when ``variable`` is accessed, the *getter* function "
"(``getterfunc`` above) must ``return`` the desired value. Below is an "
"example:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1133
msgid "Either of the *setter* or *getter* functions can be omitted:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1142
msgid ""
"Get/Setters are especially useful when exporting variables to editor in "
"tool scripts or plugins, for validating input."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1145
msgid ""
"As said *local* access will *not* trigger the setter and getter. Here is "
"an illustration of this:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1160
msgid "Tool mode"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1162
msgid ""
"Scripts, by default, don't run inside the editor and only the exported "
"properties can be changed. In some cases it is desired that they do run "
"inside the editor (as long as they don't execute game code or manually "
"avoid doing so). For this, the ``tool`` keyword exists and must be placed"
" at the top of the file:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1177
msgid "Memory management"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1179
msgid ""
"If a class inherits from :ref:`class_Reference`, then instances will be "
"freed when no longer in use. No garbage collector exists, just simple "
"reference counting. By default, all classes that don't define inheritance"
" extend **Reference**. If this is not desired, then a class must inherit "
":ref:`class_Object` manually and must call instance.free(). To avoid "
"reference cycles that can't be freed, a ``weakref`` function is provided "
"for creating weak references."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1189
msgid "Signals"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1191
msgid ""
"It is often desired to send a notification that something happened in an "
"instance. GDScript supports creation of built-in Godot signals. Declaring"
" a signal in GDScript is easy using the `signal` keyword."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1202
msgid ""
"These signals, just like regular signals, can be connected in the editor "
"or from code. Just take the instance of a class where the signal was "
"declared and connect it to the method of another instance:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1218
msgid ""
"It is also possible to bind arguments to a signal that lacks them with "
"your custom values:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1226
msgid ""
"This is very useful when a signal from many objects is connected to a "
"single callback and the sender must be identified:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1238
msgid ""
"Finally, emitting a custom signal is done by using the Object.emit_signal"
" method:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1249
msgid "Coroutines"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1251
msgid ""
"GDScript offers support for `coroutines "
"<https://en.wikipedia.org/wiki/Coroutine>`_ via the ``yield`` built-in "
"function. Calling ``yield()`` will immediately return from the current "
"function, with the current frozen state of the same function as the "
"return value. Calling ``resume`` on this resulting object will continue "
"execution and return whatever the function returns. Once resumed the "
"state object becomes invalid. Here is an example:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1273
#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1297
msgid "Will print:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1281
msgid ""
"It is also possible to pass values between yield() and resume(), for "
"example:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1306
msgid "Coroutines & signals"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1308
msgid ""
"The real strength of using ``yield`` is when combined with signals. "
"``yield`` can accept two parameters, an object and a signal. When the "
"signal is received, execution will recommence. Here are some examples:"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1324
msgid "Onready keyword"
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1326
msgid ""
"When using nodes, it's very common to desire to keep references to parts "
"of the scene in a variable. As scenes are only warranted to be configured"
" when entering the active scene tree, the sub-nodes can only be obtained "
"when a call to Node._ready() is made."
msgstr ""

#: ../../getting_started/scripting/gdscript/gdscript_basics.rst:1338
msgid ""
"This can get a little cumbersome, especially when nodes and external "
"references pile up. For this, GDScript has the ``onready`` keyword, that "
"defers initialization of a member variable until _ready is called. It can"
" replace the above code with a single line:"
msgstr ""

