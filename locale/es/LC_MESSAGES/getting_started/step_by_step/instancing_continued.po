# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot
# community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-28 16:44-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../getting_started/step_by_step/instancing_continued.rst:4
msgid "Instancing (continued)"
msgstr ""

#: ../../getting_started/step_by_step/instancing_continued.rst:7
msgid "Recap"
msgstr ""

#: ../../getting_started/step_by_step/instancing_continued.rst:9
msgid "Instancing has many handy uses. At a glance, with instancing you have:"
msgstr ""

#: ../../getting_started/step_by_step/instancing_continued.rst:11
msgid "The ability to subdivide scenes and make them easier to manage."
msgstr ""

#: ../../getting_started/step_by_step/instancing_continued.rst:12
msgid ""
"A more flexible alternative to prefabs (and much more powerful given that"
" instances can be nested)."
msgstr ""

#: ../../getting_started/step_by_step/instancing_continued.rst:14
msgid ""
"A way to organize and embed complex game flows or even UIs (in Godot, UI "
"Elements are nodes, too)."
msgstr ""

#: ../../getting_started/step_by_step/instancing_continued.rst:18
msgid "Design language"
msgstr ""

#: ../../getting_started/step_by_step/instancing_continued.rst:20
msgid ""
"But the greatest strength that comes with instancing scenes is that it "
"works as an excellent design language. This is pretty much what "
"distinguishes Godot from all the other engines out there. Godot was "
"designed from the ground up around this concept."
msgstr ""

#: ../../getting_started/step_by_step/instancing_continued.rst:25
msgid ""
"When making games with Godot, the recommended approach is to dismiss most"
" common design patterns, such as MVC or Entity-Relationship diagrams, and"
" instead think about your scenes in a more natural way. Start by "
"imagining the visible elements in your game, the ones that can be named "
"not just by a programmer, but by anyone."
msgstr ""

#: ../../getting_started/step_by_step/instancing_continued.rst:31
msgid "For example, here's how a simple shooter game could be imagined:"
msgstr ""

#: ../../getting_started/step_by_step/instancing_continued.rst:35
msgid ""
"It's pretty easy to come up with a diagram like this for almost any kind "
"of game. Just write down the parts of the game that you can visualize, "
"and then add arrows to represent ownership of one component by another."
msgstr ""

#: ../../getting_started/step_by_step/instancing_continued.rst:39
msgid ""
"Once you have a diagram like this, the recommended process for making a "
"game is to create a scene for each element listed in the diagram. You'll "
"use instancing (either by code or directly in the editor) for the "
"ownership relationships."
msgstr ""

#: ../../getting_started/step_by_step/instancing_continued.rst:43
msgid ""
"A lot of time spent in programming games (or software in general) is on "
"designing an architecture and fitting game components to that "
"architecture. Designing based on scenes replaces that approach and makes "
"development much faster and more straightforward, allowing you to "
"concentrate on the game logic itself. Because most game components map "
"directly to a scene, using a design-based on scene instantiation means "
"little other architectural code is needed."
msgstr ""

#: ../../getting_started/step_by_step/instancing_continued.rst:49
msgid ""
"Let's take a look at one more, somewhat more complex, example of an open-"
"world type game with lots of assets and nested elements:"
msgstr ""

#: ../../getting_started/step_by_step/instancing_continued.rst:54
msgid ""
"Take a look at the room element. Let's say we started there. We could "
"make a couple of different room scenes, with different arrangements of "
"furniture (also scenes) in them. Later, we could make a house scene, "
"connecting rooms to make up its interior."
msgstr ""

#: ../../getting_started/step_by_step/instancing_continued.rst:59
msgid ""
"Then, we could make a citadel scene, which is made out of many instanced "
"houses. Then, we could start working on the world map terrain, adding the"
" citadel onto it."
msgstr ""

#: ../../getting_started/step_by_step/instancing_continued.rst:63
msgid ""
"Later, we could create scenes that represent guards (and other NPCs) and "
"add them to the citadel as well. As a result, they would be indirectly "
"added to the overall game world."
msgstr ""

#: ../../getting_started/step_by_step/instancing_continued.rst:67
msgid ""
"With Godot, it's easy to iterate on your game like this, as all you need "
"to do is create and instance more scenes. Furthermore, the editor UI is "
"designed to be user friendly for programmers and non-programmers alike. A"
" typical team development process can involve 2D or 3D artists, level "
"designers, game designers, and animators, all working with the editor "
"interface."
msgstr ""

#: ../../getting_started/step_by_step/instancing_continued.rst:74
msgid "Information overload!"
msgstr ""

#: ../../getting_started/step_by_step/instancing_continued.rst:76
msgid ""
"This has been a lot of high level information dropped on you all at once."
" However, the important part of this tutorial was to create an awareness "
"of how scenes and instancing are used in real projects."
msgstr ""

#: ../../getting_started/step_by_step/instancing_continued.rst:80
msgid ""
"Everything discussed here will become second nature to you once you start"
" making games and putting these concepts into practice. For now, don't "
"worry about it too much, and just go on to the next tutorial!"
msgstr ""

