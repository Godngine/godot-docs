# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot
# community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-28 16:44-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../tutorials/3d/lights_and_shadows.rst:4
msgid "Lights And Shadows"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:7
msgid "Introduction"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:9
msgid ""
"Lights emit light that mix with the materials and produces a visible "
"result. Light can come from several types of sources in a scene:"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:12
msgid ""
"From the Material itself, in the form of the emission color (though it "
"does not affect nearby objects unless baked)."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:14
msgid "Light Nodes: Directional, Omni and Spot."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:15
msgid "Ambient Light in the :ref:`Environment <class_Environment>`."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:17
msgid "Baked Light (read :ref:`doc_baked_lightmaps`)."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:19
msgid ""
"The emission color is a material property. You can read more about it in "
"the :ref:`doc_spatial_material` tutorial."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:23
msgid "Light nodes"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:25
msgid ""
"As mentioned before, there are three types of light nodes: Directional, "
"Omni and Spot. Each has different uses and will be described in detail "
"below, but first let's take a look at the common parameters for lights:"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:32
msgid "Each one has a specific function:"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:34
msgid "**Color**: Base color for emitted light."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:35
msgid ""
"**Energy**: Energy multiplier. This is useful to saturate lights or "
"working with :ref:`doc_high_dynamic_range`."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:36
msgid ""
"**Indirect Energy**: Secondary multiplier used with indirect light (light"
" bounces). This works in baked light or GIProbe."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:37
msgid ""
"**Negative**: Light becomes substractive instead of additive. It's "
"sometimes useful to manually compensate some dark corners."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:38
msgid ""
"**Specular**: Affects the intensity of the specular blob in objects "
"affected by this light. At zero, this light becomes a pure diffuse light."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:39
msgid ""
"**Cull Mask**: Objects that are in the selected layers below will be "
"affected by this light."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:42
msgid "Shadow Mapping"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:44
msgid ""
"Lights can optionally cast shadows. This gives them greater realism "
"(light does not reach occluded areas), but it can incur a bigger "
"performance cost. There is a list of generic shadow parameters, each also"
" has a specific function:"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:47
msgid "**Enabled**: Check to enable shadow mapping in this light."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:48
msgid ""
"**Color**: Areas occluded are multiplied by this color. It is black by "
"default, but it can be changed to tint shadows."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:49
msgid ""
"**Bias**: When this parameter is too small, self shadowing occurs. When "
"too large, shadows separate from the casters. Tweak to what works best "
"for you."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:50
msgid ""
"**Contact**: Performs a short screen-space raycast to reduce the gap "
"generated by the bias."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:51
msgid ""
"**Reverse Cull Faces**: Some scenes work better when shadow mapping is "
"rendered with face-culling inverted."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:53
msgid ""
"Below is an image of how tweaking bias looks like. Default values work "
"for most cases, but in general it depends on the size and complexity of "
"geometry."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:57
msgid "Finally, if gaps can't be solved, the **Contact** option can help:"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:61
msgid ""
"Any sort of bias issues can always be fixed by increasing the shadow map "
"resolution, although that may lead to decreased peformance on low-end "
"hardware."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:64
msgid "Directional light"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:66
msgid ""
"This is the most common type of light and represents a light source very "
"far away (such as the sun). It is also the cheapest light to compute and "
"should be used whenever possible (although it's not the cheapest shadow-"
"map to compute, but more on that later)."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:70
msgid ""
"Directional light models an infinite number of parallel light rays "
"covering the whole scene. The directional light node is represented by a "
"big arrow, which indicates the direction of the light rays. However, the "
"position of the node does not affect the lighting at all, and can be "
"anywhere."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:77
msgid ""
"Every face whose front-side is hit by the light rays is lit, the others "
"stay dark. Most light types have specific parameters but directional "
"lights are pretty simple in nature so they don't."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:81
msgid "Directional Shadow Mapping"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:83
msgid ""
"To compute shadow maps, the scene is rendered (only depth) from an "
"orthogonal point of view that covers the whole scene (or up to the max "
"distance). There is, however, a problem with this approach because "
"objects closer to the camera receive blocky shadows."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:89
msgid ""
"To fix this, a technique named \"Parallel Split Shadow Maps\" (or PSSM) "
"is used. This splits the view frustum in 2 or 4 areas. Each area gets "
"it's own shadow map. This allows small, close areas to the viewer to have"
" the same shadow resolution as a huge, far-away area."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:94
msgid "With this, shadows become more detailed:"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:98
msgid "To control PSSM, a number of parameters are exposed:"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:102
msgid ""
"Each split distance is controlled relative to the camera far (or shadow "
"**Max Distance** if greater than zero), so *0.0* is the eye position and "
"*1.0* is where the shadow ends at a distance. Splits are in-between. "
"Default values generally work well, but tweaking the first split a bit is"
" common to give more detail to close objects (like a character in a third"
" person game)."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:105
msgid ""
"Always make sure to set a shadow *Max Distance* according to what the "
"scene needs. The closer the max distance, the higher quality they shadows"
" will have."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:107
msgid ""
"Sometimes, the transition between a split and the next can look bad. To "
"fix this, the **\"Blend Splits\"** option can be turned own, which "
"sacrifices detail in exchange for smoother transitions:"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:112
msgid ""
"The **\"Normal Bias\"** parameter can be used to fix special cases of "
"self shadowing when objects are perpendicular to the light. The only "
"downside is that it makes the shadow a bit thinner."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:117
msgid ""
"The **\"Bias Split Scale\"** parameter can control extra bias for the "
"splits that are far away. If self shadowing occurs only on the splits far"
" away, this value can fix them."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:119
msgid "Finally, the **\"Depth Range\"** has to settings:"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:121
msgid ""
"**Stable**: Keeps the shadow stable while the camera moves, the blocks "
"that appear in the outline when close to the shadow edges remain in-"
"place. This is the default and generally desired, but it reduces the "
"effective shadow resolution."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:122
msgid ""
"**Optimized**: Triest to achieve the maximum resolution available at any "
"given time. This may result in a \"moving saw\" effect on shadow edges, "
"but at the same time the shadow looks more detailed (so this effect may "
"be subtle enough to be forgiven)."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:124
msgid "Just experiment which setting works better for your scene."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:126
msgid ""
"Shadowmap size for directional lights can be changed in Project Settings "
"-> Rendering -> Quality:"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:130
msgid ""
"Increasing it can solve bias problems, but reduce performance. Shadow "
"mapping is an art of tweaking."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:133
msgid "Omni light"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:135
msgid ""
"Omni light is a point source that emits light spherically in all "
"directions up to a given radius ."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:140
msgid ""
"In real life, light attenuation is an inverse function, which means omni "
"lights don't really have a radius. This is a problem, because it means "
"computing several omni lights would become really demanding."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:143
msgid ""
"To solve this, a *Range* is introduced, together with an attenuation "
"function."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:147
msgid ""
"These two parameters allow tweaking how this works visually, in order to "
"find aesthetically pleasing results."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:153
msgid "Omni Shadow Mapping"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:155
msgid ""
"Omni light shadow mapping is relatively straightforward, as it just "
"works. The main issue that needs to be considered is the algorithm used "
"to render it."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:158
msgid ""
"Omni Shadows can be rendered as either **\"Dual Paraboloid\" or \"Cube "
"Mapped\"**. The former renders very quickly but can cause deformations, "
"while the later is more correct but more costly."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:163
msgid ""
"If the objects being renderer are mostly irregular, Dual Paraboloid is "
"usually enough. In any case, as these shadows are cached in a shadow "
"atlas (more on that at the end), it may not make a difference in "
"performance for most scenes."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:168
msgid "Spot light"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:170
msgid ""
"Spot lights are similar to omni lights, except they emit light only into "
"a cone (or \"cutoff\"). They are useful to simulate flashlights, car "
"lights, reflectors, spots, etc. This type of light is also attenuated "
"towards the opposite direction it points to."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:177
msgid ""
"Spot lights share the same **Range** and **Attenuation** as "
"**OmniLight**, and add two extra parameters:"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:179
msgid "**Angle**: The aperture angle of the light"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:180
msgid ""
"**Angle Attenuation**: The cone attenuation, which helps soften the cone "
"borders."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:184
msgid "Spot Shadow Mapping"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:186
msgid ""
"Spots don't need any parameters for shadow mapping, they should just "
"work. Keep in mind that, at more than 89 degrees of aperture, shadows "
"stop functioning for spots, and you should consider using an Omni light."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:190
msgid "Shadow Atlas"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:192
msgid ""
"Unlike Directional lights, which have their own shadow texture, Omni and "
"Spot lights are assigned to slots of a shadow atlas. This atlas can be "
"configured in Project Settings -> Rendering -> Quality -> Shadow Atlas."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:197
msgid ""
"The resolution applies to the whole Shadow Atlas. This atlas is divided "
"in four quadrants:"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:201
msgid ""
"Each quadrant, can be subdivided to allocate any number of shadow maps, "
"following is the default subdivision:"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:205
msgid ""
"The allocation logic is simple, the biggest shadow map size (when no "
"subdivision is used) represents a light the size of the screen (or "
"bigger). Subdivisions (smaller maps) represent shadows for lights that "
"are further away from view and proportionally smaller."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:208
msgid "Every frame, the following logic is done for all lights:"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:210
msgid ""
"Check if the light is on a slot of the right size, if not, re-render it "
"and move it to a larger/smaller slot."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:211
msgid ""
"Check if any object affecting the shadow map has changed, if it did, re-"
"render the light."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:212
msgid ""
"If neither of the above has happened, nothing is done and the shadow is "
"left untouched."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:214
msgid ""
"If the slots in a quadrant are full, lights are pushed back to smaller "
"slots depending on size and distance."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:216
msgid ""
"This allocation strategy works for most games, but you may to use a "
"separate one in some cases (as example, a top-down game where all lights "
"are around the same size and quadrands may have all the same "
"subdivision)."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:220
msgid "Shadow Filter Quality"
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:222
msgid ""
"The filter quality of shadows can be tweaked. This can be found in "
"Project Settings -> Rendering -> Quality -> Shadows. Godot supports no "
"filter, PCF5 and PCF13."
msgstr ""

#: ../../tutorials/3d/lights_and_shadows.rst:226
msgid "It affects the blockyness of the shadow outline:"
msgstr ""

