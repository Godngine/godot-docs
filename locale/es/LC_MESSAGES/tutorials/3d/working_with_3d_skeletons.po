# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot
# community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-28 16:44-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../tutorials/3d/working_with_3d_skeletons.rst:4
msgid "Working with 3D skeletons"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:6
msgid ""
"Godot 3D skeleton support is currently quite rudimentary. The "
":ref:`class_Skeleton` node and class were designed mainly to support "
"importing skeletal animations as a set of transformation matrices."
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:11
msgid "Skeleton node"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:13
msgid ""
"Skeleton node can be directly added anywhere you want on scene. Usually "
"mesh is a child of Skeleton, as it easier to manipulate this way, as "
"Transforms within skeleton are relative to where Skeleton is. But you can"
" specify Skeleton node in every MeshInstance."
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:18
msgid ""
"Being obvious, Skeleton is intended to deform meshes, and consists of "
"structures called \"bones\". Each \"bone\" is represented as Transform, "
"which is applied to a group of vertices within a mesh. You can directly "
"control a group of vertices from Godot. For that please reference "
":ref:`class_MeshDataTool` class, method :ref:`set_vertex_bones "
"<class_MeshDataTool_set_vertex_bones>`. This class is very powerful."
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:25
msgid ""
"The \"bones\" are organized in hierarchy, every bone, except for root "
"bone(s) have parent. Every bone have associated name you can use to refer"
" to it (e.g. \"root\" or \"hand.L\", etc.). Also bones are all numbered, "
"these numbers are bone IDs. Bone parents are referred by their numbered "
"IDs."
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:31
msgid "For the rest of the article we consider the following scene:"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:39
msgid ""
"This scene is imported from Blender. It contains arm mesh with 2 bones - "
"upperarm and lowerarm, with lowerarm parented to upperarm."
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:43
msgid "Skeleton class"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:45
msgid ""
"You can view Godot internal help for descriptions of every function. "
"Basically all operations on bones are done using their numeric ID. You "
"can convert from name to numeric ID and vise versa."
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:49
msgid "**To find number of bones in skeleton we use get_bone_count() function**"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:64
msgid "**to find ID for the bone, use find_bone() function**"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:76
msgid ""
"Now, we want to do something interesting with ID except for printing it. "
"Also, we might need additional information - to find bone parents to "
"complete chain, etc. This all is done with get/set_bone\\_\\* functions."
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:80
msgid "**To find bone parent we use get_bone_parent(id) function**"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:94
msgid ""
"Bone transforms is the thing why we're here at all. There are 3 kind of "
"transforms - local, global, custom."
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:97
msgid "**To find bone local Transform we use get_bone_pose(id) function**"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:113
msgid ""
"So we see 3x4 matrix there, with first column of 1s. What can we do about"
" that? It is a Transform, so we can do everything we can do with "
"Transform, basically translate, rotate and scale. Also we can multiply "
"transforms to have complex transforms. Remember, \"bones\" in Godot are "
"just Transforms over a group of vertices. Also we can copy Transforms of "
"other objects there. So lets rotate our \"upperarm\" bone:"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:141
msgid ""
"Now we can rotate individual bones. The same happens for scale and "
"translate - try these on your own and see results."
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:144
msgid ""
"What we used now was local pose. By default all bones are not modified. "
"But this Transform tells us nothing about relationship between bones. "
"This information is needed for quite a number of tasks. How can we get "
"it? Here comes global transform:"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:149
msgid "**To find bone global Transform we use get_bone_global_pose(id) function**"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:152
msgid "We will find global Transform for lowerarm bone:"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:168
msgid ""
"As you see, this transform is not zeroed. While being called global, it "
"is actually relative to Skeleton origin. For root bone, origin is always "
"at 0 if not modified. Lets print origin for our lowerarm bone:"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:186
msgid ""
"You will see a number. What does this number mean? It is a rotation point"
" of Transform. So it is base part of the bone. In Blender you can go to "
"Pose mode and try there to rotate bones - they will rotate around their "
"origin. But what about tip? We can't know things like bone length, which "
"we need for many things, without knowing tip location. For all bones in "
"chain except for last one we can calculate tip location - it is simply a "
"child bone origin. Yes, there are situations when this is not true, for "
"non-connected bones. But that is OK for us for now, as it is not "
"important regarding Transforms. But the leaf bone tip is nowhere to be "
"found. Leaf bone is a bone without children. So you don't have any "
"information about its tip. But this is not a showstopper. You can "
"overcome this by either adding extra bone to the chain or just "
"calculating leaf bone length in Blender and store the value in your "
"script."
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:202
msgid "Using 3D \"bones\" for mesh control"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:204
msgid ""
"Now as you know basics we can apply these to make full FK-control of our "
"arm (FK is forward-kinematics)"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:207
msgid "To fully control our arm we need the following parameters:"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:209
msgid "Upperarm angle x, y, z"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:210
msgid "Lowerarm angle x, y, z"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:212
msgid "All of these parameters can be set, incremented and decremented."
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:214
msgid "Create the following node tree:"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:223
msgid ""
"Set up Camera so that arm is properly visible. Rotate DirectionLight so "
"that arm is properly lit while in scene play mode."
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:226
msgid "Now we need to create new script under main:"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:228
msgid "First we setup parameters:"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:235
msgid "Now we need to setup a way to change them. Let us use keys for that."
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:237
msgid "Please create 7 actions under project settings:"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:239
msgid "**selext_x** - bind to X key"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:240
msgid "**selext_y** - bind to Y key"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:241
msgid "**selext_z** - bind to Z key"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:242
msgid "**select_upperarm** - bind to key 1"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:243
msgid "**select_lowerarm** - bind to key 2"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:244
msgid "**increment** - bind to key numpad +"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:245
msgid "**decrement** - bind to key numpad -"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:247
msgid ""
"So now we want to adjust the above parameters. Therefore we create code "
"which does that:"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:273
msgid "The full code for arm control is this:"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:323
msgid ""
"Pressing keys 1/2 select upperarm/lowerarm, select axis by pressing x, y,"
" z, rotate using numpad \"+\"/\"-\""
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:326
msgid ""
"This way you fully control your arm in FK mode using 2 bones. You can add"
" additional bones and/or improve \"feel\" of the interface by using "
"coefficients for the change. I recommend you play with this example a lot"
" before going to next part."
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:331
msgid "You can clone the demo code for this chapter using"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:338
msgid "Or you can browse it using web-interface:"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:340
msgid "https://github.com/slapin/godot-skel3d"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:343
msgid "Using 3D \"bones\" to implement Inverse Kinematics"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:345
msgid "See :ref:`doc_inverse_kinematics`."
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:348
msgid "Using 3D \"bones\" to implement ragdoll-like physics"
msgstr ""

#: ../../tutorials/3d/working_with_3d_skeletons.rst:350
msgid "TODO."
msgstr ""

