# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot
# community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-28 16:44-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../tutorials/3d/fps_tutorial/part_three.rst:4
msgid "Part 3"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:7
msgid "Part Overview"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:9
msgid ""
"In this part we will be limiting our guns by giving them ammo. We will "
"also be giving the player the ability to reload, and we will be adding "
"sounds when the guns fire."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:15
msgid ""
"By the end of this part, the player will have limited ammo, the ability "
"to reload, and sounds will play when the player fires and changes "
"weapons."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:18
msgid ""
"You are assumed to have finished :ref:`doc_fps_tutorial_part_two` before "
"moving on to this part of the tutorial."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:20
msgid "Let's get started!"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:24
msgid "Changing levels"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:26
msgid ""
"Now that we have a fully working FPS, let's move to a more FPS like "
"level. Open up ``Test_Level.tscn``. ``Test_Level.tscn`` is a complete "
"custom FPS level created for the purpose of this tutorial. Press ``F6`` "
"to play the open scene, or press the \"play current scene button\", and "
"give it a whirl."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:30
msgid ""
"There will (likely) be the occasional random freeze as you go through the"
" level. This is a known issue."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:33
msgid ""
"If you find any way to solve it, please let me know on the Github "
"repository, the Godot forums, or on Twitter! Be sure to include "
"``@TwistedTwigleg`` so I will have a greater chance of seeing it!"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:36
msgid ""
"You might have noticed there are several boxes and cylinders placed "
"throughout the level. They are :ref:`RigidBody <class_RigidBody>` nodes "
"we can place ``RigidBody_hit_test.gd`` on and then they will react to "
"being hit with bullets, so lets do that!"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:39
msgid ""
"Select ``Center_room`` and open it up. From there select "
"``Physics_objects`` and open that up. You'll find there are ``6`` crates "
"in a seemingly random order. Go select one of them and press the \"Open "
"in Editor\" button. It's the one that looks like a little movie slide."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:43
msgid ""
"The reason the objects seem to be placed in a random order is because all"
" of the objects were copied and pasted around in the Godot editor to save"
" on time. If you want to move any of the nodes around, it is highly "
"suggested to just left click inside the editor viewport to get the node "
"you want, and then move it around with the :ref:`Spatial <class_Spatial>`"
" gizmo."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:47
msgid ""
"This will bring you to the crate's scene. From there, select the "
"``Crate`` :ref:`RigidBody <class_RigidBody>` (the one that is the root of"
" the scene) and scroll down in the inspector until you get to the script "
"section. From there, click the drop down and select \"Load\". Chose "
"``RigidBody_hit_test.gd`` and then return to ``Test_Level.tscn``."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:51
msgid ""
"Now open ``Upper_room``, select ``Physics_objects``, and chose one of the"
" cylinder :ref:`RigidBody <class_RigidBody>` nodes. Press the \"Open in "
"Editor\" button beside one of the cylinders. This will bring you to the "
"cylinder's scene."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:54
msgid ""
"From there, select the ``Cylinder`` :ref:`RigidBody <class_RigidBody>` "
"(the one that is the root of the scene) and scroll down in the inspector "
"until you get to the script section. From there, click the drop down and "
"select \"Load\". Chose ``RigidBody_hit_test.gd`` and then return to "
"``Test_Level.tscn``."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:58
msgid ""
"Now you can fire at the boxes and cylinders and they will react to your "
"bullets just like the cubes in ``Testing_Area.tscn``!"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:62
msgid "Adding ammo"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:64
msgid "Now that we've got working guns, lets give them a limited amount of ammo."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:66
msgid ""
"Lets define some more global variables in ``Player.gd``, ideally nearby "
"the other gun related variables:"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:75
msgid "Here is what these variables will be doing for us:"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:77
msgid ""
"``ammo_for_guns``: The amount of ammo we have in reserve for each "
"weapon/gun."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:78
msgid "``ammo_in_guns``: The amount of ammo currently inside the weapon/gun."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:79
msgid "``AMMO_IN_MAGS``: How much ammo is in a fully filled weapon/gun."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:81
msgid ""
"There is no reason we've included ammo for the knife, so feel free to "
"remove the knife's ammo if you desire."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:84
msgid ""
"Depending on how you program melee weapons, you may need to define an "
"ammo count even if the weapon does not use ammo. Some games use extremely"
" short range 'guns' as their melee weapons, and in those cases you may "
"need to define ammo for your melee weapons."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:90
msgid "Now we need to add a few ``if`` checks to ``_physics_process``."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:92
msgid ""
"We need to make sure we have ammo in our gun before we try to fire a "
"bullet. Go find the line that checks for the fire action being pressed "
"and add the following new bits of code:"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:115
msgid ""
"These two additional ``if`` checks make sure we have a bullet to fire "
"before setting our firing animation."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:117
msgid ""
"While we're still in ``_physics_process``, let's also add a way to track "
"how much ammo we have. Find the line that has ``UI_status_label.text = "
"\"HEALTH: \" + str(health)`` in ``_physics_process`` and replace it with "
"the following:"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:129
msgid ""
"Did you now that you can combine two lines using ``\\``? We're using it "
"here so we do not have a extremely long line of code all on one line by "
"splitting it into two lines!"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:133
msgid ""
"This will show the player how much ammo they currently have and how much "
"ammo they currently have in reserve, only for the appropriate weapons "
"(not unarmed or the knife). Regardless of the currently selected "
"weapon/gun, we will always show how much health the player has"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:137
msgid ""
"we cannot just add ``ammo_for_guns[current_gun]`` or "
"``ammo_in_guns[current_gun]`` to the ``string`` we are passing in to the "
":ref:`Label <class_Label>`. Instead we have to cast them from ``floats`` "
"to ``strings``, which is what we are doing by using ``str()``."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:141
msgid ""
"For more information on casting, see this page from wiki books: "
"https://en.wikibooks.org/wiki/Computer_Programming/Type_conversion"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:144
msgid ""
"We are currently not using the player's health just yet in the tutorial. "
"We will start using health for the player and objects when we include "
"turrets and targets in later parts."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:148
msgid ""
"Now we need to remove a bullet from the gun when we fire. To do that, we "
"just need to add a few lines in ``fire_bullet``:"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:191
msgid ""
"Go play the project again! Now you'll lose ammo as you fire, until you "
"reach zero and cannot fire anymore."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:195
msgid "Adding reloading"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:197
msgid "Now that we can empty our gun, we need a way to refill it!"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:199
msgid ""
"First, let's start by adding another global variable. Add ``var "
"reloading_gun = false`` somewhere along with your other global variables,"
" preferably near the other gun related variables."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:205
msgid "Now we need to add several things to ``_physics_process``."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:207
msgid ""
"First, let's make sure we cannot change guns while reloading. We need to "
"change the weapon changing code to include the following:"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:227
msgid "Now the player cannot change guns while reloading."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:231
msgid ""
"Ideally we want the player to be able to reload when they chose, so lets "
"given them the ability to reload when they press the ``reload`` action. "
"Add the following somewhere in ``_physics_process``, ideally nearby your "
"other input related code:"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:244
msgid ""
"First we see if the player is already reloading. If they are not, then we"
" check if they've pressed the reloading action. If they have pressed the "
"``reload`` action, we then check if they are using a weapon that has the "
"ability to be reloaded. Finally, we make sure they are not already in a "
"reloading animation. If they are not, we set ``reloading_gun`` to "
"``true``."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:249
msgid ""
"We do not want to do our reloading processing here with the input in an "
"effort to keep game logic separate from input logic. Keeping them "
"separate makes the code easier to debug, and as a bonus it keeps the "
"input logic from being overly bloated."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:255
msgid ""
"Finally, we need to add the code that actually handles reloading. Add the"
" following code to ``_physics_process``, ideally somewhere underneath the"
" reloading input code you just inputted:"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:300
msgid "Lets go over what this code does."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:304
msgid ""
"First we check if ``reloading_gun`` is ``true``. If it is we then go "
"through a series of checks to see if we can reload or not. We use "
"``can_reload`` as a variable to track whether or not it is possible to "
"reload."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:308
msgid ""
"We go through series of checks for each weapon. For the pistol and the "
"rifle we check if we're in an idle state or not. If we are, then we set "
"``can_reload`` to ``true``."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:311
msgid ""
"For the knife we do not want to reload, because you cannot reload a "
"knife, so we set ``can_reload`` and ``reloading_gun`` to ``false``. If we"
" are using a weapon that we do not have a ``if`` or ``elif`` check for, "
"we set ``can_reload`` and ``reloading_gun`` to ``false``, as we do not "
"want to be able to reload a weapon we are unaware of."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:315
msgid ""
"Next we check if we have ammo in reserve for the gun in question. We also"
" check to make sure the gun we are trying to reload is not already full "
"of ammo. If the gun does not have ammo in reserve or the gun is already "
"full, we set ``can_reload`` and ``reloading_gun`` to ``false``."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:319
msgid ""
"If we've made it through all those checks and we can reload, then we have"
" a few more steps to take."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:321
msgid ""
"First we assign the ammo we are needing to fill the gun fully to the "
"``ammo_needed`` variable. We just subtract the amount of ammo we "
"currently have in our gun by the amount of ammo in a full magazine."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:324
msgid ""
"Then we check if have enough ammo in reserves to fill the gun fully. If "
"we do, we subtract the amount of ammo we need to refill our gun from the "
"reserves, and we set the amount of ammo in the gun to full."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:327
msgid ""
"If we do not have enough ammo in reserves to fill the gun, we add all of "
"the ammo left in reserves to our gun and then set the ammo in reserves to"
" zero, making it empty."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:330
msgid ""
"Regardless of how much ammo we've added to the gun, we set our animation "
"to the reloading animation for the current gun."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:332
msgid ""
"Finally, we set ``reloading_gun`` to false because we have finished "
"reloading the gun."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:336
msgid ""
"Go test the project again, and you'll find you can reload your gun when "
"it is not full and when there is ammo left in the ammo reserves."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:341
msgid ""
"Personally, I like the guns to automatically start reloading if we try to"
" fire them when they have no ammo in them, so lets add that! Add the "
"following code to the input code for firing the guns:"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:369
msgid ""
"Now whenever the player tries to fire the gun when it's empty, we "
"automatically set ``reloading_gun`` to true, which will reload the gun if"
" possible."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:373
msgid "Adding sounds"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:375
msgid ""
"Finally, let's add some sounds that play when we are reloading, changing "
"guns, and when we are firing them."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:378
msgid ""
"There are no game sounds provided in this tutorial (for legal reasons). "
"https://gamesounds.xyz/ is a collection of **\"royalty free or public "
"domain music and sounds suitable for games\"**. I used Gamemaster's Gun "
"Sound Pack, which can be found in the Sonniss.com GDC 2017 Game Audio "
"Bundle."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:382
msgid ""
"The video tutorial will briefly show how to edit the audio files for use "
"in the tutorial."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:384
msgid ""
"Open up ``SimpleAudioPlayer.tscn``. It is simply a :ref:`Spatial "
"<class_Spatial>` with a :ref:'AudioStreamPlayer "
"<class_AudioStreamPlayer>' as it's child."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:386
msgid ""
"The reason this is called a 'simple' audio player is because we are not "
"taking performance into account and because the code is designed to "
"provide sound in the simplest way possible. This will likely change in a "
"future part."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:390
msgid ""
"If you want to use 3D audio, so it sounds like it's coming from a "
"location in 3D space, right click the :ref:'AudioStreamPlayer "
"<class_AudioStreamPlayer>' and select \"Change type\"."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:393
msgid ""
"This will open the node browser. Navigate to :ref:'AudioStreamPlayer3D "
"<class_AudioStreamPlayer3D>' and select \"change\". In the source for "
"this tutorial, we will be using :ref:'AudioStreamPlayer "
"<class_AudioStreamPlayer>', but you can optionally use "
":ref:'AudioStreamPlayer3D <class_AudioStreamPlayer3D>' if you desire, and"
" the code provided below will work regardless of which one you chose."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:398
msgid ""
"Create a new script and call it \"SimpleAudioPlayer.gd\". Attach it to "
"the :ref:`Spatial <class_Spatial>` in ``SimpleAudioPlayer.tscn`` and "
"insert the following code:"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:443
msgid ""
"By setting ``position`` to ``null`` by default in ``play_sound``, we are "
"making it an optional argument, meaning position doesn't necessarily have"
" to be passed in to call the ``play_sound``."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:446
msgid "Let's go over what's happening here:"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:450
msgid ""
"In ``_ready`` we get the :ref:'AudioStreamPlayer "
"<class_AudioStreamPlayer>' and connect it's ``finished`` signal to "
"ourselves. It doesn't matter if it's :ref:'AudioStreamPlayer "
"<class_AudioStreamPlayer>' or :ref:'AudioStreamPlayer3D "
"<class_AudioStreamPlayer3D>' node, as they both have the finished signal."
" To make sure it is not playing any sounds, we call ``stop`` on the "
":ref:'AudioStreamPlayer <class_AudioStreamPlayer>'."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:454
msgid ""
"Make sure your sound files are **not** set to loop! If it is set to loop "
"the sounds will continue to play infinitely and the script will not work!"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:457
msgid ""
"The ``play_sound`` function is what we will be calling from "
"``Player.gd``. We check if the sound is one of the three possible sounds,"
" and if it is we set the audio stream for our :ref:'AudioStreamPlayer "
"<class_AudioStreamPlayer>' to the correct sound."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:461
msgid ""
"If it is an unknown sound, we print an error message to the console and "
"free ourselves."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:463
msgid ""
"If you are using a :ref:'AudioStreamPlayer3D "
"<class_AudioStreamPlayer3D>', remove the ``#`` to set the position of the"
" audio player node so it plays at the correct position."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:466
msgid ""
"Finally, we tell the :ref:'AudioStreamPlayer <class_AudioStreamPlayer>' "
"to play."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:468
msgid ""
"When the :ref:'AudioStreamPlayer <class_AudioStreamPlayer>' is finished "
"playing the sound, it will call ``destroy_self`` because we connected the"
" ``finished`` signal in ``_ready``. We stop the :ref:'AudioStreamPlayer "
"<class_AudioStreamPlayer>' and free ourself to save on resources."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:472
msgid ""
"This system is extremely simple and has some major flaws: One flaw is we "
"have to pass in a string value to play a sound. While it is relatively "
"simple to remember the names of the three sounds, it can be increasingly "
"complex when you have more sounds. Ideally we'd place these sounds in "
"some sort of container with exposed variables so we do not have to "
"remember the name(s) of each sound effect we want to play."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:478
msgid ""
"Another flaw is we cannot play looping sounds effects, nor background "
"music easily with this system. Because we cannot play looping sounds, "
"certain effects like footstep sounds are harder to accomplish because we "
"then have to keep track of whether or not there is a sound effect *and* "
"whether or not we need to continue playing it."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:485
msgid ""
"With that done, lets open up ``Player.gd`` again. First we need to load "
"the ``SimpleAudioPlayer.tscn``. Place the following code in your global "
"variables:"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:492
msgid ""
"Now we just need to instance the simple audio player when we need it, and"
" then call it's ``play_sound`` function and pass the name of the sound we"
" want to play. To make the process simpler, let's create a "
"``create_sound`` function:"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:504
msgid "Lets walk through what this function does:"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:508
msgid ""
"The first line instances the ``simple_audio_player.tscn`` scene and "
"assigns it to a variable, named ``audio_clone``."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:511
msgid ""
"The second line gets the scene root, using one large assumption. We first"
" get this node's :ref:`SceneTree <class_SceneTree>`, and then access the "
"root node, which in this case is the :ref:`Viewport <class_Viewport>` "
"this entire game is running under. Then we get the first child of the "
":ref:`Viewport <class_Viewport>`, which in our case happens to be the "
"root node in ``Test_Area.tscn`` or ``Test_Level.tscn``. We are making a "
"huge assumption that the first child of the root is the root node that "
"our player is under, which could not always be the case."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:517
msgid ""
"If this doesn't make sense to you, don't worry too much about it. The "
"second line of code only doesn't work reliably if you have multiple "
"scenes loaded as childs to the root node at a time, which will rarely "
"happen for most projects. This is really only potentially a issue "
"depending on how you handle scene loading."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:521
msgid ""
"The third line adds our newly created ``SimpleAudioPlayer`` scene to be a"
" child of the scene root. This works exactly the same as when we are "
"spawning bullets."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:524
msgid ""
"Finally, we call the ``play_sound`` function and pass in the arguments "
"we're given. This will call ``SimpleAudioPlayer.gd``'s ``play_sound`` "
"function with the passed in arguments."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:529
msgid ""
"Now all that is left is playing the sounds when we want to. First, let's "
"play the shooting sounds when a bullet is fired. Go to ``fire_bullet`` "
"and add the following:"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:573
msgid ""
"Now we will play the shooting noise for both the pistol and the rifle "
"when a bullet is created."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:575
msgid ""
"We are passing in the positions of the ends of the guns using the bullet "
"object's global :ref:`Transform <class_transform>` and the :ref:`Raycast "
"<class_raycast>`'s global :ref:`Transform <class_transform>`. If you are "
"not using a :ref:`AudioStreamPlayer3D <class_AudioStreamPlayer3D>` node, "
"you can optionally leave the positions out and only pass in the name of "
"the sound you want to play."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:580
msgid ""
"Finally, lets play the sound of a gun being cocked when we reload and "
"when we change weapons. Add the following to our reloading logic section "
"of ``_physics_process``:"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:625
msgid "And add this code to the changing weapons section of ``_physics_process``:"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:666
msgid ""
"Now whatever sound you have assigned to \"Gun_cock\" will play when you "
"reload and when you change to either the pistol or the rifle."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:671
msgid "Final notes"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:675
msgid "Now you have a fully working single player FPS!"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:677
msgid ""
"You can find the completed project here: "
":download:`Godot_FPS_Finished.zip <files/Godot_FPS_Finished.zip>`"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:679
msgid ""
"The finished project source is hosted on Github as well: "
"https://github.com/TwistedTwigleg/Godot_FPS_Tutorial"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:681
msgid ""
"You can also download all of the ``.blend`` files used here: "
":download:`Godot_FPS_BlenderFiles.zip <files/Godot_FPS_BlenderFiles.zip>`"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:683
msgid ""
"The finished project source files contain the same exact code, just "
"written in a different order. This is because the finished project source"
" files are what the tutorial is based on."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:686
msgid ""
"The finished project code was written in the order that features were "
"created, not necessarily in a order that is ideal for learning."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:689
msgid ""
"Other than that, the source is exactly the same, just with helpful "
"comments explaining what each part does."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:692
msgid ""
"The skybox is created by **StumpyStrust** and can be found at "
"OpenGameArt.org. https://opengameart.org/content/space-skyboxes-0"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:694
msgid ""
"The font used is **Titillium-Regular**, and is licensed under the SIL "
"Open Font License, Version 1.1."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:696
msgid ""
"The skybox was convert to a 360 equirectangular image using this tool: "
"https://www.360toolkit.co/convert-cubemap-to-spherical-"
"equirectangular.html"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:698
msgid ""
"While no sounds are provided, you can find many game ready sounds at "
"https://gamesounds.xyz/"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:700
msgid ""
"OpenGameArt.org, 360toolkit.co, the creator(s) of Titillium-Regular, and "
"GameSounds.xyz are in no way involved in this tutorial."
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:704
msgid "In future parts we will be adding the following:"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:706
msgid "Adding a spawning system"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:707
msgid "Adding grenades"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:708
msgid "Adding turrets and targets"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:709
msgid "Adding a sound manager"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:710
msgid "Adding ammo and health pickups"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:711
msgid "Refining and cleaning up the code"
msgstr ""

#: ../../tutorials/3d/fps_tutorial/part_three.rst:713
msgid "All plans are subject to change without warning!"
msgstr ""

