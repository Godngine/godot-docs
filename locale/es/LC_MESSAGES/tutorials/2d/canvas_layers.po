# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot
# community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-28 16:44-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../tutorials/2d/canvas_layers.rst:4
msgid "Canvas layers"
msgstr ""

#: ../../tutorials/2d/canvas_layers.rst:7
msgid "Viewport and Canvas items"
msgstr ""

#: ../../tutorials/2d/canvas_layers.rst:9
msgid ""
"Regular 2D nodes, such as :ref:`Node2D <class_Node2D>` or :ref:`Control "
"<class_Control>` both inherit from :ref:`CanvasItem <class_CanvasItem>`, "
"which is the base for all 2D nodes. CanvasItems can be arranged in trees "
"and they will inherit their transform. This means that when moving the "
"parent, the children will be moved too."
msgstr ""

#: ../../tutorials/2d/canvas_layers.rst:16
msgid ""
"These nodes are placed as direct or indirect children to a :ref:`Viewport"
" <class_Viewport>`, and will be displayed through it."
msgstr ""

#: ../../tutorials/2d/canvas_layers.rst:19
msgid ""
"Viewport has the property :ref:`Viewport.canvas_transform "
"<class_Viewport_canvas_transform>`, which allows to transform all the "
"CanvasItem hierarchy by a custom :ref:`Transform2D <class_Transform2D>` "
"transform. Nodes such as :ref:`Camera2D <class_Camera2D>`, work by "
"changing that transform."
msgstr ""

#: ../../tutorials/2d/canvas_layers.rst:25
msgid ""
"Changing the canvas transform is useful because it is a lot more "
"efficient than moving the root canvas item (and hence the whole scene). "
"Canvas transform is a simple matrix that offsets the whole 2D drawing, so"
" it's the most efficient way to do scrolling."
msgstr ""

#: ../../tutorials/2d/canvas_layers.rst:31
msgid "Not enough..."
msgstr ""

#: ../../tutorials/2d/canvas_layers.rst:33
msgid ""
"But this is not enough. There are often situations where the game or "
"application may not want *everything* transformed by the canvas "
"transform. Examples of this are:"
msgstr ""

#: ../../tutorials/2d/canvas_layers.rst:37
msgid ""
"**Parallax Backgrounds**: Backgrounds that move slower than the rest of "
"the stage."
msgstr ""

#: ../../tutorials/2d/canvas_layers.rst:39
msgid ""
"**HUD**: Head's up display, or user interface. If the world moves, the "
"life counter, score, etc. must stay static."
msgstr ""

#: ../../tutorials/2d/canvas_layers.rst:41
msgid ""
"**Transitions**: Effects used for transitions (fades, blends) may also "
"want it to remain at a fixed location."
msgstr ""

#: ../../tutorials/2d/canvas_layers.rst:44
msgid "How can these problems be solved in a single scene tree?"
msgstr ""

#: ../../tutorials/2d/canvas_layers.rst:47
msgid "CanvasLayers"
msgstr ""

#: ../../tutorials/2d/canvas_layers.rst:49
msgid ""
"The answer is :ref:`CanvasLayer <class_CanvasLayer>`, which is a node "
"that adds a separate 2D rendering layer for all its children and grand-"
"children. Viewport children will draw by default at layer \"0\", while a "
"CanvasLayer will draw at any numeric layer. Layers with a greater number "
"will be drawn above those with a smaller number. CanvasLayers also have "
"their own transform, and do not depend on the transform of other layers. "
"This allows the UI to be fixed in-place, while the world moves."
msgstr ""

#: ../../tutorials/2d/canvas_layers.rst:58
msgid ""
"An example of this is creating a parallax background. This can be done "
"with a CanvasLayer at layer \"-1\". The screen with the points, life "
"counter and pause button can also be created at layer \"1\"."
msgstr ""

#: ../../tutorials/2d/canvas_layers.rst:62
msgid "Here's a diagram of how it looks:"
msgstr ""

#: ../../tutorials/2d/canvas_layers.rst:66
msgid ""
"CanvasLayers are independent of tree order, and they only depend on their"
" layer number, so they can be instantiated when needed."
msgstr ""

#: ../../tutorials/2d/canvas_layers.rst:70
msgid "Performance"
msgstr ""

#: ../../tutorials/2d/canvas_layers.rst:72
msgid ""
"Even though there shouldn't be any performance limitation, it is not "
"advised to use excessive amount of layers to arrange drawing order of "
"nodes. The most optimal way will always be arranging them by tree order. "
"2d nodes also have a property for controlling their drawing order (see "
":ref:`Node2D.z_index <class_Node2D_z_index>`)."
msgstr ""

