# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot
# community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-28 16:44-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../tutorials/2d/custom_drawing_in_2d.rst:4
msgid "Custom drawing in 2D"
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:7
msgid "Why?"
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:9
msgid ""
"Godot has nodes to draw sprites, polygons, particles, and all sorts of "
"stuff. For most cases this is enough, but not always. Before crying in "
"fear, angst, and rage because a node to draw that specific *something* "
"does not exist... it would be good to know that it is possible to easily "
"make any 2D node (be it :ref:`Control <class_Control>` or :ref:`Node2D "
"<class_Node2D>` based) draw custom commands. It is *really* easy to do it"
" too."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:17
msgid "But..."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:19
msgid ""
"Custom drawing manually in a node is *really* useful. Here are some "
"examples why:"
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:22
msgid ""
"Drawing shapes or logic that is not handled by nodes (example: making a "
"node that draws a circle, an image with trails, a special kind of "
"animated polygon, etc)."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:25
msgid ""
"Visualizations that are not that compatible with nodes: (example: a "
"tetris board). The tetris example uses a custom draw function to draw the"
" blocks."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:28
msgid ""
"Managing drawing logic of a large amount of simple objects (in the "
"hundreds of thousands). Using a thousand nodes is probably not nearly as "
"efficient as drawing, but a thousand of draw calls are cheap. Check the "
"\"Shower of Bullets\" demo as example."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:32
msgid ""
"Making a custom UI control. There are plenty of controls available, but "
"it's easy to run into the need to make a new, custom one."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:36
msgid "OK, how?"
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:38
msgid ""
"Add a script to any :ref:`CanvasItem <class_CanvasItem>` derived node, "
"like :ref:`Control <class_Control>` or :ref:`Node2D <class_Node2D>`. Then"
" override the _draw() function."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:50
msgid ""
"Draw commands are described in the :ref:`CanvasItem <class_CanvasItem>` "
"class reference. There are plenty of them."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:54
msgid "Updating"
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:56
msgid ""
"The _draw() function is only called once, and then the draw commands are "
"cached and remembered, so further calls are unnecessary."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:59
msgid ""
"If re-drawing is required because a state or something else changed, "
"simply call :ref:`CanvasItem.update() <class_CanvasItem_update>` in that "
"same node and a new _draw() call will happen."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:63
msgid ""
"Here is a little more complex example. A texture variable that will be "
"redrawn if modified:"
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:81
msgid ""
"In some cases, it may be desired to draw every frame. For this, just call"
" update() from the _process() callback, like this:"
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:97
msgid "An example: drawing circular arcs"
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:99
msgid ""
"We will now use the custom drawing functionality of the Godot Engine to "
"draw something that Godot doesn't provide functions for. As an example, "
"Godot provides a draw_circle() function that draws a whole circle. "
"However, what about drawing a portion of a circle? You will have to code "
"a function to perform this, and draw it yourself."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:102
msgid "Arc function"
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:105
msgid ""
"An arc is defined by its support circle parameters. That is: the center "
"position, and the radius. And the arc itself is then defined by the angle"
" it starts from, and the angle at which it stops. These are the 4 "
"parameters we have to provide to our drawing. We'll also provide the "
"color value so we can draw the arc in different colors if we wish."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:107
msgid ""
"Basically, drawing a shape on screen requires it to be decomposed into a "
"certain number of points, linked from one to the following one. As you "
"can imagine, the more points your shape is made of, the smoother it will "
"appear, but the heavier it will be, in terms of processing cost. In "
"general, if your shape is huge (or in 3D, close to the camera), it will "
"require more points to be drawn without it being angular-looking. On the "
"contrary, if your shape is small (or in 3D, far from the camera), you may"
" reduce its number of points to save processing costs. This is called "
"*Level of Detail (LoD)*. In our example, we will simply use a fixed "
"number of points, no matter the radius."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:123
msgid ""
"Remember the number of points our shape has to be decomposed into? We "
"fixed this number in the nb_points variable to a value of 32. Then, we "
"initialize an empty PoolVector2Array, which is simply an array of "
"Vector2."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:125
msgid ""
"The next step consists of computing the actual positions of these 32 "
"points that compose an arc. This is done in the first for-loop: we "
"iterate over the number of points for which we want to compute the "
"positions, plus one to include the last point. We first determine the "
"angle of each point, between the starting and ending angles."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:127
msgid ""
"The reason why each angle is reduced by 90° is that we will compute 2D "
"positions out of each angle using trigonometry (you know, cosine and sine"
" stuff...). However, to be simple, cos() and sin() use radians, not "
"degrees. The angle of 0° (0 radian) starts at 3 o'clock, although we want"
" to start counting at 0 o'clock. So, we just reduce each angle by 90° in "
"order to start counting from 0 o'clock."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:129
msgid ""
"The actual position of a point located on a circle at angle 'angle' (in "
"radians) is given by Vector2(cos(angle), sin(angle)). Since cos() and "
"sin() return values between -1 and 1, the position is located on a circle"
" of radius 1. To have this position on our support circle, which has a "
"radius of 'radius', we simply need to multiply the position by 'radius'. "
"Finally, we need to position our support circle at the 'center' position,"
" which is performed by adding it to our Vector2 value. Finally, we insert"
" the point in the PoolVector2Array which was previously defined."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:131
msgid ""
"Now, we need to actually draw our points. As you can imagine, we will not"
" simply draw our 32 points: we need to draw everything that is between "
"each of them. We could have computed every point ourselves using the "
"previous method, and drew it one by one. But this is too complicated and "
"inefficient (except if explicitly needed). So, we simply draw lines "
"between each pair of points. Unless the radius of our support circle is "
"very big, the length of each line between a pair of points will never be "
"long enough to see them. If this happens, we simply would need to "
"increase the number of points."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:134
msgid "Draw the arc on screen"
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:135
msgid ""
"We now have a function that draws stuff on the screen: it is time to call"
" in the _draw() function."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:147
msgid "Result:"
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:154
msgid "Arc polygon function"
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:155
msgid ""
"We can take this a step further and not only write a function that draws "
"the plain portion of the disc defined by the arc, but also its shape. The"
" method is exactly the same as previously, except that we draw a polygon "
"instead of lines:"
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:174
msgid "Dynamic custom drawing"
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:175
msgid ""
"Alright, we are now able to draw custom stuff on screen. However, it is "
"very static: let's make this shape turn around the center. The solution "
"to do this is simply to change the angle_from and angle_to values over "
"time. For our example, we will simply increment them by 50. This "
"increment value has to remain constant, else the rotation speed will "
"change accordingly."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:177
msgid ""
"First, we have to make both angle_from and angle_to variables global at "
"the top of our script. Also note that you can store them in other nodes "
"and access them using get_node()."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:189
msgid "We make these values change in the _process(delta) function."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:191
msgid ""
"We also increment our angle_from and angle_to values here. However, we "
"must not forget to wrap() the resulting values between 0 and 360°! That "
"is, if the angle is 361°, then it is actually 1°. If you don't wrap these"
" values, the script will work correctly. But angle values will grow "
"bigger and bigger over time, until they reach the maximum integer value "
"Godot can manage (2^31 - 1). When this happens, Godot may crash or "
"produce unexpected behavior. Since Godot doesn't provide a wrap() "
"function, we'll create it here, as it is relatively simple."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:193
msgid ""
"Finally, we must not forget to call the update() function, which "
"automatically calls _draw(). This way, you can control when you want to "
"refresh the frame."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:212
msgid ""
"Also, don't forget to modify the _draw() function to make use of these "
"variables: ::"
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:222
msgid "Let's run! It works, but the arc is rotating insanely fast! What's wrong?"
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:225
msgid ""
"The reason is that your GPU is actually displaying the frames as fast as "
"it can. We need to \"normalize\" the drawing by this speed. To achieve, "
"we have to make use of the 'delta' parameter of the _process() function. "
"'delta' contains the time elapsed between the two last rendered frames. "
"It is generally small (about 0.0003 seconds, but this depends on your "
"hardware). So, using 'delta' to control your drawing ensures that your "
"program runs at the same speed on everybody's hardware."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:227
msgid ""
"In our case, we simply need to multiply our 'rotation_ang' variable by "
"'delta' in the _process() function. This way, our 2 angles will be "
"increased by a much smaller value, which directly depends on the "
"rendering speed."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:241
msgid "Let's run again! This time, the rotation displays fine!"
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:244
msgid "Tools"
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:246
msgid ""
"Drawing your own nodes might also be desired while running them in the "
"editor, to use as preview or visualization of some feature or behavior."
msgstr ""

#: ../../tutorials/2d/custom_drawing_in_2d.rst:250
msgid ""
"Remember, to just use the \"tool\" keyword at the top of the script "
"(check the :ref:`doc_gdscript` reference if you forgot what this does)."
msgstr ""

