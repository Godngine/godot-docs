# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot
# community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-28 16:44-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../tutorials/misc/background_loading.rst:4
msgid "Background loading"
msgstr ""

#: ../../tutorials/misc/background_loading.rst:6
msgid ""
"When switching the main scene of your game (e.g. going to a new level), "
"you might want to show a loading screen with some indication that "
"progress is being made. The main load method (``ResourceLoader::load`` or"
" just ``load`` from GDScript) blocks your thread while the resource is "
"being loaded, so it's not good. This document discusses the "
"``ResourceInteractiveLoader`` class for smoother load screens."
msgstr ""

#: ../../tutorials/misc/background_loading.rst:15
msgid "ResourceInteractiveLoader"
msgstr ""

#: ../../tutorials/misc/background_loading.rst:17
msgid ""
"The ``ResourceInteractiveLoader`` class allows you to load a resource in "
"stages. Every time the method ``poll`` is called, a new stage is loaded, "
"and control is returned to the caller. Each stage is generally a sub-"
"resource that is loaded by the main resource. For example, if you're "
"loading a scene that loads 10 images, each image will be one stage."
msgstr ""

#: ../../tutorials/misc/background_loading.rst:24
msgid "Usage"
msgstr ""

#: ../../tutorials/misc/background_loading.rst:26
msgid "Usage is generally as follows"
msgstr ""

#: ../../tutorials/misc/background_loading.rst:29
msgid "Obtaining a ResourceInteractiveLoader"
msgstr ""

#: ../../tutorials/misc/background_loading.rst:35
msgid ""
"This method will give you a ResourceInteractiveLoader that you will use "
"to manage the load operation."
msgstr ""

#: ../../tutorials/misc/background_loading.rst:39
msgid "Polling"
msgstr ""

#: ../../tutorials/misc/background_loading.rst:45
msgid ""
"Use this method to advance the progress of the load. Each call to "
"``poll`` will load the next stage of your resource. Keep in mind that "
"each stage is one entire \"atomic\" resource, such as an image, or a "
"mesh, so it will take several frames to load."
msgstr ""

#: ../../tutorials/misc/background_loading.rst:50
msgid ""
"Returns ``OK`` on no errors, ``ERR_FILE_EOF`` when loading is finished. "
"Any other return value means there was an error and loading has stopped."
msgstr ""

#: ../../tutorials/misc/background_loading.rst:54
msgid "Load progress (optional)"
msgstr ""

#: ../../tutorials/misc/background_loading.rst:56
msgid "To query the progress of the load, use the following methods:"
msgstr ""

#: ../../tutorials/misc/background_loading.rst:63
msgid ""
"``get_stage_count`` returns the total number of stages to load. "
"``get_stage`` returns the current stage being loaded."
msgstr ""

#: ../../tutorials/misc/background_loading.rst:67
msgid "Forcing completion (optional)"
msgstr ""

#: ../../tutorials/misc/background_loading.rst:73
msgid ""
"Use this method if you need to load the entire resource in the current "
"frame, without any more steps."
msgstr ""

#: ../../tutorials/misc/background_loading.rst:77
msgid "Obtaining the resource"
msgstr ""

#: ../../tutorials/misc/background_loading.rst:83
msgid "If everything goes well, use this method to retrieve your loaded resource."
msgstr ""

#: ../../tutorials/misc/background_loading.rst:87
msgid "Example"
msgstr ""

#: ../../tutorials/misc/background_loading.rst:89
msgid ""
"This example demostrates how to load a new scene. Consider it in the "
"context of the :ref:`doc_singletons_autoload` example."
msgstr ""

#: ../../tutorials/misc/background_loading.rst:92
msgid ""
"First we setup some variables and initialize the ``current_scene`` with "
"the main scene of the game:"
msgstr ""

#: ../../tutorials/misc/background_loading.rst:106
msgid ""
"The function ``goto_scene`` is called from the game when the scene needs "
"to be switched. It requests an interactive loader, and calls "
"``set_process(true)`` to start polling the loader in the ``_process`` "
"callback. It also starts a \"loading\" animation, which can show a "
"progress bar or loading screen, etc."
msgstr ""

#: ../../tutorials/misc/background_loading.rst:128
msgid ""
"``_process`` is where the loader is polled. ``poll`` is called, and then "
"we deal with the return value from that call. ``OK`` means keep polling, "
"``ERR_FILE_EOF`` means load is done, anything else means there was an "
"error. Also note we skip one frame (via ``wait_frames``, set on the "
"``goto_scene`` function) to allow the loading screen to show up."
msgstr ""

#: ../../tutorials/misc/background_loading.rst:134
msgid ""
"Note how we use ``OS.get_ticks_msec`` to control how long we block the "
"thread. Some stages might load really fast, which means we might be able "
"to cram more than one call to ``poll`` in one frame, some might take way "
"more than your value for ``time_max``, so keep in mind we won't have "
"precise control over the timings."
msgstr ""

#: ../../tutorials/misc/background_loading.rst:170
msgid ""
"Some extra helper functions. ``update_progress`` updates a progress bar, "
"or can also update a paused animation (the animation represents the "
"entire load process from beginning to end). ``set_new_scene`` puts the "
"newly loaded scene on the tree. Because it's a scene being loaded, "
"``instance()`` needs to be called on the resource obtained from the "
"loader."
msgstr ""

#: ../../tutorials/misc/background_loading.rst:195
msgid "Using multiple threads"
msgstr ""

#: ../../tutorials/misc/background_loading.rst:197
msgid ""
"ResourceInteractiveLoader can be used from multiple threads. A couple of "
"things to keep in mind if you attempt it:"
msgstr ""

#: ../../tutorials/misc/background_loading.rst:201
msgid "Use a Semaphore"
msgstr ""

#: ../../tutorials/misc/background_loading.rst:203
msgid ""
"While your thread waits for the main thread to request a new resource, "
"use a Semaphore to sleep (instead of a busy loop or anything similar)."
msgstr ""

#: ../../tutorials/misc/background_loading.rst:207
msgid "Not blocking main thread during the polling"
msgstr ""

#: ../../tutorials/misc/background_loading.rst:209
msgid ""
"If you have a mutex to allow calls from the main thread to your loader "
"class, don't lock it while you call ``poll`` on the loader. When a "
"resource is finished loading, it might require some resources from the "
"low level APIs (VisualServer, etc), which might need to lock the main "
"thread to acquire them. This might cause a deadlock if the main thread is"
" waiting for your mutex while your thread is waiting to load a resource."
msgstr ""

#: ../../tutorials/misc/background_loading.rst:218
msgid "Example class"
msgstr ""

#: ../../tutorials/misc/background_loading.rst:220
msgid ""
"You can find an example class for loading resources in threads here: "
":download:`resource_queue.gd <files/resource_queue.gd>`. Usage is as "
"follows:"
msgstr ""

#: ../../tutorials/misc/background_loading.rst:227
msgid "Call after you instance the class to start the thread."
msgstr ""

#: ../../tutorials/misc/background_loading.rst:233
msgid ""
"Queue a resource. Use optional parameter \"p_in_front\" to put it in "
"front of the queue."
msgstr ""

#: ../../tutorials/misc/background_loading.rst:240
msgid "Remove a resource from the queue, discarding any loading done."
msgstr ""

#: ../../tutorials/misc/background_loading.rst:246
msgid "Returns true if a resource is done loading and ready to be retrieved."
msgstr ""

#: ../../tutorials/misc/background_loading.rst:252
msgid ""
"Get the progress of a resource. Returns -1 on error (for example if the "
"resource is not on the queue), or a number between 0.0 and 1.0 with the "
"progress of the load. Use mostly for cosmetic purposes (updating progress"
" bars, etc), use ``is_ready`` to find out if a resource is actually "
"ready."
msgstr ""

#: ../../tutorials/misc/background_loading.rst:262
msgid ""
"Returns the fully loaded resource, or null on error. If the resource is "
"not done loading (``is_ready`` returns false), it will block your thread "
"and finish the load. If the resource is not on the queue, it will call "
"``ResourceLoader::load`` to load it normally and return it."
msgstr ""

#: ../../tutorials/misc/background_loading.rst:268
msgid "Example:"
msgstr ""

#: ../../tutorials/misc/background_loading.rst:298
msgid ""
"**Note**: this code in its current form is not tested in real world "
"scenarios. Ask punto on IRC (#godotengine on irc.freenode.net) for help."
msgstr ""

