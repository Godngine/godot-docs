# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2018, Juan Linietsky, Ariel Manzur and the Godot
# community (CC-BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-28 16:44-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:4
msgid "GDNative C example"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:7
msgid "Introduction"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:8
msgid ""
"This tutorial will introduce you to the bare minimum required to create "
"GDNative modules. This should be your starting point into the world of "
"GDNative, understanding the contents of this tutorial will help you in "
"understanding all that is to come after this."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:10
msgid ""
"Before we begin, you can download the source code to the example object "
"we'll be describing here by following this link: "
"https://github.com/GodotNativeTools/GDNative-"
"demos/tree/master/c/SimpleDemo"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:13
msgid ""
"This example project also contains a SConstruct file that makes compiling"
" a little easier but in this tutorial we'll be doing things by hand."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:15
msgid ""
":ref:`GDNative <class_GDNative>` can be used to create several types of "
"additions to Godot, from PluginScript to ARVR interfaces. In this "
"tutorial we are going to look at creating a :ref:`NativeScript "
"<class_NativeScript>` module. NativeScript allows you to write logic in C"
" or C++ in similar fashion as you would write a GDScript file. We'll be "
"creating the C equivalent of this GDScript:"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:29
msgid ""
"We'll be writing separate tutorials on the other types of GDNative "
"modules and explain what each of them is for as we go through them."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:32
msgid "Prerequisites"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:33
msgid "Before we start you'll need a few things."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:35
msgid "A Godot 3.0 executable"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:36
msgid "A C compiler"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:37
msgid ""
"A copy of this repository: "
"https://github.com/GodotNativeTools/godot_headers"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:39
msgid ""
"The first two pretty much speak for themselves. On Linux, you'll likely "
"have a C compiler, on macOS, it's easiest to just install Xcode from the "
"Mac App Store and, on Windows, we've tested this with both MSVC 2015 and "
"2017."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:41
msgid ""
"For number 3, we suggest that you create a folder somewhere that you use "
"to store your code, open up a terminal and CD into that folder. Then "
"execute:"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:47
msgid "This will download the required files into that folder."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:49
msgid ""
"If you are building Godot from source, you may need a newer version of "
"these files. You can find this at "
"``<godotsource>/modules/gdnative/include``"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:52
msgid "Our C source"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:53
msgid ""
"Let's start by writing our main code. Ideally, we want to end up with a "
"file structure that looks something like this:"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:71
msgid ""
"Open up Godot and create a new project called simple. This will create "
"the simple folder and project.godot file. Then manually create a bin and "
"src subfolder in this folder."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:73
msgid ""
"We're going to start by having a look at what our simple.c file contains."
" Now, for our example here we're making a single C source file without a "
"header just to keep things simple. Once you start writing bigger projects"
" it is advisable you break your project up into multiple files. That "
"however falls outside of the scope of this tutorial."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:75
msgid ""
"We'll be looking at the source code bit by bit so all the parts below "
"should all be put together into one big file. I'll explain each section "
"as we add it."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:77
msgid ""
"The below code includes our header files that we need and then defines "
"two pointers to two different structs. GDNative supports a large "
"collection for functions for calling back into the main Godot executable."
" In order for your module to have access to these functions, GDNative "
"provides your application with a struct containing pointers to all these "
"functions."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:80
msgid ""
"To keep this implementation modular and easily extendable, the core "
"functions are available directly through the \"core\" API struct, but "
"additional functions have their own \"GDNative structs\" that are "
"accessible through extensions."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:82
msgid ""
"In our example, we access one of these extension to gain access to the "
"functions specifically needed for NativeScript."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:94
msgid ""
"A NativeScript behaves like any other script in Godot. Because the "
"NativeScript API is rather low level, it requires the library to specify "
"many things more verbosely than other scripting systems, such as "
"GDScript. When a NativeScript instance gets created, a library-given "
"constructor gets called. When that instance gets destroyed, the given "
"destructor will be executed."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:96
msgid ""
"These are forward declarations for the functions we'll be implementing "
"for our object. A constructor and destructor is needed. Additionally, the"
" object will have a single method called get_data."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:105
msgid ""
"Next up is the first of the entry points Godot will call when our dynamic"
" library is loaded. These methods are all prefixed with godot (you can "
"change this later on) followed by their name. ``gdnative_init`` is a "
"function that initialises our dynamic library. Godot will give it a "
"pointer to a structure that contains various bits of information we may "
"find useful amongst which the pointers to our API structures."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:107
msgid ""
"For any additional API structures we need to loop through our extensions "
"array and check the type of extension."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:125
msgid ""
"Next up is ``gdnative_terminate`` which is called before the library is "
"unloaded. Godot will unload the library when no object uses it anymore. "
"Here, you can do any cleanup you may need to do. For our example, we're "
"simply going to clear our API pointers."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:134
msgid ""
"Finally we have ``nativescript_init`` which is the most important "
"function we'll need today. This function will be called by Godot as part "
"of loading a GDNative library and communicates back to Godot what objects"
" we make available to Godot."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:136
msgid ""
"We first tell Godot which classes are implemented by calling "
"``nativescript_register_class``. The first parameter here is the handle "
"pointer given to us. The second is the name of our object class. The "
"third is the type of object in Godot that we 'inherit' from, this is not "
"true inheritance but it's close enough. Finally, our fourth and fifth "
"parameters are descriptions for our constructor and destructor."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:138
msgid ""
"We then tell Godot about our methods (well our one method in this case), "
"by calling ``nativescript_register_method`` for each method of our class."
" In our case, that is just ``get_data``. Our first parameter is yet again"
" our handle pointer. The second is again the name of the object class "
"we're registering. The third is the name of our function as it will be "
"known to GDScript. The fourth is our attributes setting. The fifth and "
"final parameter is a description of which function to call when the "
"method gets called."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:140
msgid ""
"The descriptions contain the function pointers to the functions "
"themselves. The other two fields in these structs are for specifying per-"
"method userdata. The value in the ``method_data`` field will be passed on"
" every function call as the ``p_method_data`` argument. This is useful to"
" reuse one function for different methods on possibly multiple different "
"script-classes. If the ``method_data`` value is a pointer to memory that "
"needs to be freed, the ``free_func`` field can contain a pointer to a "
"function that will free that memory. That free function gets called when "
"the script itself (not instance!) gets unloaded (so usually at library-"
"unload time)."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:163
msgid ""
"Now, it's time to start working on the functions of our object. First, we"
" define a structure that we use to store the member data of an instance "
"of our GDNative class."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:171
msgid ""
"And then, we define our constructor. All we do in our constructor is "
"allocate memory for our structure and fill it with some data. Note that "
"we use Godot's memory functions so the memory gets tracked and then "
"return the pointer to our new structure. This pointer will act as our "
"instance identifier in case multiple objects are instantiated."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:173
msgid ""
"This pointer will be passed to any of our functions related to our object"
" as a parameter called ``p_user_data``, and can both be used to identify "
"our instance and to access its member data."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:184
msgid ""
"Our destructor is called when Godot is done with our object and we free "
"our instances' member data."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:192
msgid ""
"And finally, we implement our get_data function. Data is always sent and "
"returned as variants so in order to return our data, which is a string, "
"we first need to convert our C string to a Godot string object, and then "
"copy that string object into the variant we are returning."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:194
msgid ""
"Strings are heap-allocated in Godot, so they have a destructor which "
"frees the memory. Destructors are named ``godot_TYPENAME_destroy``. When "
"a Variant gets created with a String, it references the String. That "
"means that the original String can be \"destroyed\" to decrease the ref-"
"count. If that does not happen the String memory will leak since the ref-"
"count will never be zero and the memory never deallocated. The returned "
"variant gets automatically destroyed by Godot."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:196
msgid ""
"(In more complex operations it can be confusing the keep track of which "
"value needs to be deallocated and which does not. As a general rule: call"
" godot_XXX_destroy when a C++ destructor would be called instead. The "
"String destructor would be called in C++ after the Variant was created, "
"so the same is necessary in C)"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:198
msgid "The variant we return is destroyed automatically by Godot."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:215
msgid "And that is the whole source code of our module."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:217
msgid ""
"If you add a blank .gdignore file to the src folder, Godot will not try "
"to import the compiler-generated temporary files."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:220
msgid "Compiling"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:221
msgid ""
"We now need to compile our source code. As mentioned our example project "
"on GitHub contains a Scons configuration that does all the hard work for "
"you but for our tutorial here we are going to call the compilers "
"directly."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:223
msgid ""
"Assuming you are sticking to the folder structure suggested above it is "
"best to CD into the src subfolder in a terminal session and execute the "
"commands from there. Make sure to create the bin folder before you "
"proceed."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:225
msgid "On Linux:"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:232
msgid "On Mac OS X:"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:239
msgid "On Windows:"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:246
msgid ""
"Note that on the Windows build you also end up with a libsimple.lib "
"library. This is a library that you can compile into a project to provide"
" access to the DLL. We get it as a bonus and we do not need it :) When "
"exporting your game for release this file will be ignored."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:249
msgid "Creating our GDNLIB file"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:250
msgid ""
"With our module compiled we now need to create a gdnlib file for our "
"module which we place alongside our dynamic libraries. This file tells "
"Godot what dynamic libraries are part of our module and need to be loaded"
" per platform. At the time of writing this tutorial work is still being "
"done on making this configurable from within Godot so for now grab your "
"favourite text editor, create a file called libsimple.gdnlib and add the "
"following into this file:"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:272
msgid "This file contains 3 sections."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:274
msgid ""
"The **general** section contains some info that tells Godot how to use "
"our module."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:276
msgid ""
"If singleton is true our library is automatically loaded and a function "
"called godot_singleton_init is called. We'll leave that for another "
"tutorial."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:278
msgid ""
"If load_once is true our library is loaded only once and each individual "
"script that uses our library will use the same data. Any variable you "
"define globally will be accessible from any instance of your object you "
"create. If load_once is false a new copy of the library is loaded into "
"memory each time a script access the library."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:280
msgid ""
"The symbol_prefix is a prefix for our core functions. So the godot in "
"godot_nativescript_init for instance. If you use multiple GDnative "
"libraries that you wish to statically link you'll have to use different "
"prefixes. This again is a subject to dive into deeper in a separate "
"tutorial, it is only needed at this time for deployment to iOS as this "
"platform does not like dynamic libraries."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:282
msgid ""
"The **entry** section tells us for each platform and feature combination "
"which dynamic library has to be loaded. This also informs the exporter "
"which files need to be exported when exporting to a specific platform."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:284
msgid ""
"The **dependencies** section tells Godot what other files need to be "
"exported for each platform in order for our library to work. Say that "
"your GDNative module uses another DLL to implement functionality from a "
"3rd party library, this is where you list that DLL."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:287
msgid "Putting it all together"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:288
msgid ""
"Now that we should have a working GDNative library it is time to fire up "
"Godot and use it. Open up the sample project if you haven't left it open "
"after creating the project all the way at the beginning of this tutorial."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:291
msgid "Creating our GDNS file"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:292
msgid ""
"With our GDNLIB file we've told Godot how to load our library, now we "
"need to tell it about our \"Simple\" object class. This we do by creating"
" a GDNS resource file."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:294
msgid "Start by clicking the create resource button in the Inspector:"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:298
msgid "And select NativeScript:"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:302
msgid ""
"Press Create, now the inspector will show a few fields we need to enter. "
"In Class Name we enter \"SIMPLE\" which is the object class name we used "
"in our C source when calling godot_nativescript_register_class. We also "
"need to select our GDNLIB file by clicking on Library and selecting Load:"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:306
msgid "Finally click on the save icon and save this as bin/Simple.gdns:"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:310
msgid ""
"Now it's time to build our scene. Add a control node to your scene as "
"your root and call it main. Then add a button and a label as subnodes. "
"Place them somewhere nice on screen and give your button a name."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:314
msgid "Select the control node and create a script for the control node:"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:318
msgid "Next link up the pressed signal on the button to your script:"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:322
msgid "Don't forget to save your scene, call it main.tscn."
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:324
msgid "Now we can implement our main.gd code:"
msgstr ""

#: ../../tutorials/plugins/gdnative/gdnative-c-example.rst:336
msgid ""
"After all that, our project should work. The first time you run it Godot "
"will ask you what your main scene is and you select your main.tscn file "
"and presto:"
msgstr ""

